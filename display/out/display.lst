
misProgramas//display/out/display.elf:     file format elf32-littlearm
misProgramas//display/out/display.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0008f9

Program Header:
0x70000001 off    0x00012a60 vaddr 0x1a002a60 paddr 0x1a002a60 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010050 vaddr 0x10000050 paddr 0x10000050 align 2**16
         filesz 0x00000000 memsz 0x00000104 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002a68 memsz 0x00002a68 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002a68 align 2**16
         filesz 0x0000004c memsz 0x0000004c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a5c  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  10000000  1a002a68  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0002004c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0002004c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0002004c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0002004c  2**2
                  CONTENTS
  6 .bss          00000104  10000050  10000050  00010050  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0002004c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0002004c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0002004c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0002004c  2**2
                  CONTENTS
 11 .init_array   00000004  1a002a5c  1a002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a002a60  1a002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  0002004c  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  0002004c  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  0002004c  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  0002004c  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  0002004c  2**2
                  CONTENTS
 18 .noinit       00000000  10000154  10000154  0002004c  2**2
                  CONTENTS
 19 .debug_info   00020fe2  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004a41  00000000  00000000  0004102e  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00008f55  00000000  00000000  00045a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000b60  00000000  00000000  0004e9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000b70  00000000  00000000  0004f524  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000cf72  00000000  00000000  00050094  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00012035  00000000  00000000  0005d006  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002830b  00000000  00000000  0006f03b  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  00097346  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000973ae  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001d68  00000000  00000000  000973e0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000050 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002a5c l    d  .init_array	00000000 .init_array
1a002a60 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000154 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 board.c
1a000984 l     F .text	00000044 Board_LED_Init
1a0009c8 l     F .text	00000040 Board_TEC_Init
1a000a08 l     F .text	00000040 Board_GPIO_Init
1a000a48 l     F .text	00000030 Board_ADC_Init
1a000a78 l     F .text	00000038 Board_SPI_Init
1a000ab0 l     F .text	00000024 Board_I2C_Init
1a0027b4 l     O .text	00000008 GpioButtons
1a0027bc l     O .text	0000000c GpioLeds
1a0027c8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0027e0 l     O .text	00000004 InitClkStates
1a0027e4 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000be0 l     F .text	0000002c Chip_UART_GetIndex
1a002858 l     O .text	00000008 UART_BClock
1a002860 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000d3c l     F .text	00000014 Chip_ADC_GetClockIndex
1a000d50 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000e04 l     F .text	000000a0 pll_calc_divs
1a000ea4 l     F .text	0000010c pll_get_frac
1a000fb0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a001224 l     F .text	00000022 Chip_Clock_GetDivRate
10000054 l     O .bss	00000008 audio_usb_pll_freq
1a002874 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0028e0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001630 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001644 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
1000005c l     O .bss	00000004 callBackFuncParams
10000060 l     O .bss	00000008 tickCounter
10000068 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a001a50 l     F .text	00000030 i2cHardwareInit
1a001a80 l     F .text	00000040 i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001ae8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000006c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_convert.c
00000000 l    df *ABS*	00000000 sapi_lcd.c
1a001fcc l     F .text	00000038 pcf8574TGpioPortWrite
1a002004 l     F .text	00000028 pcf8574TGpioWrite
1a00202c l     F .text	00000008 lcdPinSet
1a002034 l     F .text	0000002e lcdSendNibble
1a002062 l     F .text	0000001c lcdEnablePulse
1a002080 l     F .text	0000002c pcf8574TGpioPortInit
1a0020ac l     F .text	00000018 pcf8574TInit
10000070 l     O .bss	0000000a lcd
1000007a l     O .bss	00000001 pcf8574TGpioPortDirections
1000007b l     O .bss	00000001 pcf8574TGpioPortValue
10000048 l     O .data	00000001 pcf8574TI2cAddress
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a002a60 l       .init_array	00000000 __init_array_end
1a002a5c l       .bss_RAM5	00000000 __preinit_array_end
1a002a5c l       .init_array	00000000 __init_array_start
1a002a5c l       .bss_RAM5	00000000 __preinit_array_start
1a001048 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0014a4 g     F .text	0000000e Chip_I2CM_Xfer
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a001ac0 g     F .text	0000000e i2cInit
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001f1c g     F .text	00000088 int64ToString
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000b28 g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a001704 g     F .text	00000120 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a000df6 g     F .text	0000000c Chip_ADC_SetResolution
1a001a24 g     F .text	0000002c SysTick_Handler
1a0005f0 g     F .text	00000064 menuinicioEnsayo
10000000 g     O .data	00000001 x
1a0008f4  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002a68 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0022cc g     F .text	0000000c lcdSendInt
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff6f96 g       *ABS*	00000000 __valid_user_code_checksum
1a002a68 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0012c6 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0018b0 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a000558 g     F .text	00000098 menutiempoEnsayo
1a0003e0 g     F .text	00000088 teclaPulsada_2
1a002390 g     F .text	00000000 .hidden __aeabi_uldivmod
10000154 g       .noinit	00000000 _noinit
10000084 g     O .bss	00000004 SystemCoreClock
1a000c0c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0022d8 g     F .text	00000018 lcdSendIntFormXY
1a000180  w    F .text	00000002 UsageFault_Handler
1a001344 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000b68 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001880 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a0023c0 g     F .text	000002d0 .hidden __udivmoddi4
1a0027b0 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a002280 g     F .text	00000038 lcdSendChar
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a00222c g     F .text	00000014 lcdCursorSet
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002a60 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a002694 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000af8 g     F .text	00000030 Board_Init
1a000982  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a001fa4 g     F .text	00000028 intToStringGlobal
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000154 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a0008f8 g     F .text	00000088 Reset_Handler
1a0019a8 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0014b2 g     F .text	00000024 Chip_I2CM_XferBlocking
1a001848 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000ffc g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a001824 g     F .text	00000024 Chip_I2C_Init
1a0022b8 g     F .text	00000014 lcdSendString
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a0011b8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a000468 g     F .text	00000078 menuPrincipal
1a002928 g     O .text	000000e6 gpioPinsInit
1a00165c g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a0012a0 g     F .text	00000026 Chip_Clock_GetBaseClock
1a002190 g     F .text	0000009c lcdInit
10000050 g       .bss	00000000 _bss
1a000dc4 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00166e g     F .text	0000003e Chip_SSP_SetBitRate
1a0014d6 g     F .text	00000002 Chip_GPIO_Init
1a0027dc g     O .text	00000004 OscRateIn
1a001e2c g     F .text	0000005a delayInaccurateMs
10000154 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a0020fc g     F .text	00000030 lcdData
1a000178 g       .text	00000000 __bss_section_table_end
1a001b1c g     F .text	000001ac gpioInit
1a002690  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0020c4 g     F .text	00000038 lcdCommand
1a002258 g     F .text	00000028 lcdSendEnter
1a001d9c g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0018e0 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a001064 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0026dc g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0006f8 g     F .text	000001fc main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1000008c g     O .bss	000000c8 globalStrConvertBuff
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0012d4 g     F .text	0000003c Chip_Clock_EnableOpts
1000007c g     O .bss	00000004 voltaje
1a001080 g     F .text	000000b8 Chip_Clock_GetClockInputHz
10000050 g     O .bss	00000002 contPulsados
1a001138 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001930 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a001ee4 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001cc8 g     F .text	0000006a gpioWrite
1a000980  w    F .text	00000002 _fini
1a000d84 g     F .text	00000040 Chip_ADC_Init
10000088 g     O .bss	00000004 g_pUsbApi
1a000b30 g     F .text	00000038 Board_SetupMuxing
1a00212c g     F .text	00000050 lcdGoToXY
1a000c60 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001984 g     F .text	0000000c tickRead
10000040 g     O .data	00000008 tickRateMS
1a0006b0 g     F .text	00000048 termino_ensayo
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000300 g     F .text	000000e0 teclaPulsada
1a002240 g     F .text	00000016 lcdSendStringRaw
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a0013a4 g     F .text	00000100 Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
10000154 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0016ac g     F .text	00000038 Chip_SSP_Init
1a0018f8 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a001ace g     F .text	00000018 i2cWrite
1a000ad4 g     F .text	00000024 Board_Debug_Init
1000004c g       .data	00000000 _edata
1a0016e4 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0014d8 g     F .text	00000158 Chip_SetupCoreClock
10000080 g     O .bss	00000001 menuDisplay
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a001390 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00217c g     F .text	00000012 lcdClear
1a001e86 g     F .text	0000005c delayInaccurateUs
1a002690  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0004e0 g     F .text	00000078 menuLampara
1a001310 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001d32 g     F .text	00000068 gpioRead
1a001db8 g     F .text	00000074 boardInit
1a000654 g     F .text	0000005c ejecucion_ensayo
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0022f0 g     F .text	00000000 .hidden __aeabi_ldivmod
1a001990 g     F .text	00000018 tickPowerSet
1a001248 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001968 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000bd4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 f9 08 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 96 6f ff 53     }............o.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	25 1a 00 1a                                         %...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	9d 1d 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a002a68 	.word	0x1a002a68
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000004c 	.word	0x0000004c
1a000120:	1a002a68 	.word	0x1a002a68
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002a68 	.word	0x1a002a68
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002a68 	.word	0x1a002a68
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002a68 	.word	0x1a002a68
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000050 	.word	0x10000050
1a000154:	00000104 	.word	0x00000104
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <teclaPulsada>:
	return 0;
}

/*==================[definiciones de funciones internas]=====================*/

void teclaPulsada(void){
1a000300:	b510      	push	{r4, lr}
	if(!gpioRead(TEC1)){
1a000302:	2024      	movs	r0, #36	; 0x24
1a000304:	f001 fd15 	bl	1a001d32 <gpioRead>
1a000308:	b178      	cbz	r0, 1a00032a <teclaPulsada+0x2a>
		delay(250);
		if (contPulsados>3){
			contPulsados=1;
		}
	}
	if (contPulsados==1){
1a00030a:	4b32      	ldr	r3, [pc, #200]	; (1a0003d4 <teclaPulsada+0xd4>)
1a00030c:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000310:	2b01      	cmp	r3, #1
1a000312:	d019      	beq.n	1a000348 <teclaPulsada+0x48>
		lcdGoToXY(0,1);
		lcdSendStringRaw( "  " );
		lcdGoToXY(0,2);
		lcdSendStringRaw( "  " );
	}
	if (contPulsados==2){
1a000314:	4b2f      	ldr	r3, [pc, #188]	; (1a0003d4 <teclaPulsada+0xd4>)
1a000316:	f9b3 3000 	ldrsh.w	r3, [r3]
1a00031a:	2b02      	cmp	r3, #2
1a00031c:	d02b      	beq.n	1a000376 <teclaPulsada+0x76>
		lcdGoToXY(0,0);
		lcdSendStringRaw( "  " );
		lcdGoToXY(0,2);
		lcdSendStringRaw( "  " );
	}
	if (contPulsados==3){
1a00031e:	4b2d      	ldr	r3, [pc, #180]	; (1a0003d4 <teclaPulsada+0xd4>)
1a000320:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000324:	2b03      	cmp	r3, #3
1a000326:	d03d      	beq.n	1a0003a4 <teclaPulsada+0xa4>
		lcdGoToXY(0,0);
		lcdSendStringRaw( "  " );
		lcdGoToXY(0,1);
		lcdSendStringRaw( "  " );
	}
}
1a000328:	bd10      	pop	{r4, pc}
		contPulsados=contPulsados+1;
1a00032a:	4c2a      	ldr	r4, [pc, #168]	; (1a0003d4 <teclaPulsada+0xd4>)
1a00032c:	8823      	ldrh	r3, [r4, #0]
1a00032e:	3301      	adds	r3, #1
1a000330:	8023      	strh	r3, [r4, #0]
		delay(250);
1a000332:	20fa      	movs	r0, #250	; 0xfa
1a000334:	2100      	movs	r1, #0
1a000336:	f001 fdd5 	bl	1a001ee4 <delay>
		if (contPulsados>3){
1a00033a:	f9b4 3000 	ldrsh.w	r3, [r4]
1a00033e:	2b03      	cmp	r3, #3
1a000340:	dde3      	ble.n	1a00030a <teclaPulsada+0xa>
			contPulsados=1;
1a000342:	2201      	movs	r2, #1
1a000344:	8022      	strh	r2, [r4, #0]
1a000346:	e7e0      	b.n	1a00030a <teclaPulsada+0xa>
		lcdGoToXY(0,0);
1a000348:	2100      	movs	r1, #0
1a00034a:	4608      	mov	r0, r1
1a00034c:	f001 feee 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "->" );
1a000350:	4821      	ldr	r0, [pc, #132]	; (1a0003d8 <teclaPulsada+0xd8>)
1a000352:	f001 ff75 	bl	1a002240 <lcdSendStringRaw>
		lcdGoToXY(0,1);
1a000356:	2101      	movs	r1, #1
1a000358:	2000      	movs	r0, #0
1a00035a:	f001 fee7 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "  " );
1a00035e:	4c1f      	ldr	r4, [pc, #124]	; (1a0003dc <teclaPulsada+0xdc>)
1a000360:	4620      	mov	r0, r4
1a000362:	f001 ff6d 	bl	1a002240 <lcdSendStringRaw>
		lcdGoToXY(0,2);
1a000366:	2102      	movs	r1, #2
1a000368:	2000      	movs	r0, #0
1a00036a:	f001 fedf 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "  " );
1a00036e:	4620      	mov	r0, r4
1a000370:	f001 ff66 	bl	1a002240 <lcdSendStringRaw>
1a000374:	e7ce      	b.n	1a000314 <teclaPulsada+0x14>
		lcdGoToXY(0,1);
1a000376:	2101      	movs	r1, #1
1a000378:	2000      	movs	r0, #0
1a00037a:	f001 fed7 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "->" );
1a00037e:	4816      	ldr	r0, [pc, #88]	; (1a0003d8 <teclaPulsada+0xd8>)
1a000380:	f001 ff5e 	bl	1a002240 <lcdSendStringRaw>
		lcdGoToXY(0,0);
1a000384:	2100      	movs	r1, #0
1a000386:	4608      	mov	r0, r1
1a000388:	f001 fed0 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "  " );
1a00038c:	4c13      	ldr	r4, [pc, #76]	; (1a0003dc <teclaPulsada+0xdc>)
1a00038e:	4620      	mov	r0, r4
1a000390:	f001 ff56 	bl	1a002240 <lcdSendStringRaw>
		lcdGoToXY(0,2);
1a000394:	2102      	movs	r1, #2
1a000396:	2000      	movs	r0, #0
1a000398:	f001 fec8 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "  " );
1a00039c:	4620      	mov	r0, r4
1a00039e:	f001 ff4f 	bl	1a002240 <lcdSendStringRaw>
1a0003a2:	e7bc      	b.n	1a00031e <teclaPulsada+0x1e>
		lcdGoToXY(0,2);
1a0003a4:	2102      	movs	r1, #2
1a0003a6:	2000      	movs	r0, #0
1a0003a8:	f001 fec0 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "->" );
1a0003ac:	480a      	ldr	r0, [pc, #40]	; (1a0003d8 <teclaPulsada+0xd8>)
1a0003ae:	f001 ff47 	bl	1a002240 <lcdSendStringRaw>
		lcdGoToXY(0,0);
1a0003b2:	2100      	movs	r1, #0
1a0003b4:	4608      	mov	r0, r1
1a0003b6:	f001 feb9 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "  " );
1a0003ba:	4c08      	ldr	r4, [pc, #32]	; (1a0003dc <teclaPulsada+0xdc>)
1a0003bc:	4620      	mov	r0, r4
1a0003be:	f001 ff3f 	bl	1a002240 <lcdSendStringRaw>
		lcdGoToXY(0,1);
1a0003c2:	2101      	movs	r1, #1
1a0003c4:	2000      	movs	r0, #0
1a0003c6:	f001 feb1 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "  " );
1a0003ca:	4620      	mov	r0, r4
1a0003cc:	f001 ff38 	bl	1a002240 <lcdSendStringRaw>
}
1a0003d0:	e7aa      	b.n	1a000328 <teclaPulsada+0x28>
1a0003d2:	bf00      	nop
1a0003d4:	10000050 	.word	0x10000050
1a0003d8:	1a0027a8 	.word	0x1a0027a8
1a0003dc:	1a002798 	.word	0x1a002798

1a0003e0 <teclaPulsada_2>:
void teclaPulsada_2(void){
1a0003e0:	b510      	push	{r4, lr}

	if(!gpioRead(TEC1)){
1a0003e2:	2024      	movs	r0, #36	; 0x24
1a0003e4:	f001 fca5 	bl	1a001d32 <gpioRead>
1a0003e8:	b150      	cbz	r0, 1a000400 <teclaPulsada_2+0x20>
		delay(250);
		if (contPulsados>2){
			contPulsados=1;
		}
	}
	if (contPulsados==1){
1a0003ea:	4b1c      	ldr	r3, [pc, #112]	; (1a00045c <teclaPulsada_2+0x7c>)
1a0003ec:	f9b3 3000 	ldrsh.w	r3, [r3]
1a0003f0:	2b01      	cmp	r3, #1
1a0003f2:	d014      	beq.n	1a00041e <teclaPulsada_2+0x3e>
		lcdGoToXY(0,2);
		lcdSendStringRaw( "->" );
		lcdGoToXY(0,3);
		lcdSendStringRaw( "  " );
	}
	if (contPulsados==2){
1a0003f4:	4b19      	ldr	r3, [pc, #100]	; (1a00045c <teclaPulsada_2+0x7c>)
1a0003f6:	f9b3 3000 	ldrsh.w	r3, [r3]
1a0003fa:	2b02      	cmp	r3, #2
1a0003fc:	d01e      	beq.n	1a00043c <teclaPulsada_2+0x5c>
		lcdGoToXY(0,3);
		lcdSendStringRaw( "->" );
		lcdGoToXY(0,2);
		lcdSendStringRaw( "  " );
	}
}
1a0003fe:	bd10      	pop	{r4, pc}
		contPulsados++;
1a000400:	4c16      	ldr	r4, [pc, #88]	; (1a00045c <teclaPulsada_2+0x7c>)
1a000402:	8823      	ldrh	r3, [r4, #0]
1a000404:	3301      	adds	r3, #1
1a000406:	8023      	strh	r3, [r4, #0]
		delay(250);
1a000408:	20fa      	movs	r0, #250	; 0xfa
1a00040a:	2100      	movs	r1, #0
1a00040c:	f001 fd6a 	bl	1a001ee4 <delay>
		if (contPulsados>2){
1a000410:	f9b4 3000 	ldrsh.w	r3, [r4]
1a000414:	2b02      	cmp	r3, #2
1a000416:	dde8      	ble.n	1a0003ea <teclaPulsada_2+0xa>
			contPulsados=1;
1a000418:	2201      	movs	r2, #1
1a00041a:	8022      	strh	r2, [r4, #0]
1a00041c:	e7e5      	b.n	1a0003ea <teclaPulsada_2+0xa>
		lcdGoToXY(0,2);
1a00041e:	2102      	movs	r1, #2
1a000420:	2000      	movs	r0, #0
1a000422:	f001 fe83 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "->" );
1a000426:	480e      	ldr	r0, [pc, #56]	; (1a000460 <teclaPulsada_2+0x80>)
1a000428:	f001 ff0a 	bl	1a002240 <lcdSendStringRaw>
		lcdGoToXY(0,3);
1a00042c:	2103      	movs	r1, #3
1a00042e:	2000      	movs	r0, #0
1a000430:	f001 fe7c 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "  " );
1a000434:	480b      	ldr	r0, [pc, #44]	; (1a000464 <teclaPulsada_2+0x84>)
1a000436:	f001 ff03 	bl	1a002240 <lcdSendStringRaw>
1a00043a:	e7db      	b.n	1a0003f4 <teclaPulsada_2+0x14>
		lcdGoToXY(0,3);
1a00043c:	2103      	movs	r1, #3
1a00043e:	2000      	movs	r0, #0
1a000440:	f001 fe74 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "->" );
1a000444:	4806      	ldr	r0, [pc, #24]	; (1a000460 <teclaPulsada_2+0x80>)
1a000446:	f001 fefb 	bl	1a002240 <lcdSendStringRaw>
		lcdGoToXY(0,2);
1a00044a:	2102      	movs	r1, #2
1a00044c:	2000      	movs	r0, #0
1a00044e:	f001 fe6d 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "  " );
1a000452:	4804      	ldr	r0, [pc, #16]	; (1a000464 <teclaPulsada_2+0x84>)
1a000454:	f001 fef4 	bl	1a002240 <lcdSendStringRaw>
}
1a000458:	e7d1      	b.n	1a0003fe <teclaPulsada_2+0x1e>
1a00045a:	bf00      	nop
1a00045c:	10000050 	.word	0x10000050
1a000460:	1a0027a8 	.word	0x1a0027a8
1a000464:	1a002798 	.word	0x1a002798

1a000468 <menuPrincipal>:

void menuPrincipal(void){
1a000468:	b508      	push	{r3, lr}
	lcdGoToXY( 2, 0 );
1a00046a:	2100      	movs	r1, #0
1a00046c:	2002      	movs	r0, #2
1a00046e:	f001 fe5d 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "Selecc lampara" );
1a000472:	4815      	ldr	r0, [pc, #84]	; (1a0004c8 <menuPrincipal+0x60>)
1a000474:	f001 fee4 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(16,0);
1a000478:	2100      	movs	r1, #0
1a00047a:	2010      	movs	r0, #16
1a00047c:	f001 fe56 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "   " );
1a000480:	4812      	ldr	r0, [pc, #72]	; (1a0004cc <menuPrincipal+0x64>)
1a000482:	f001 fedd 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(2,1);
1a000486:	2101      	movs	r1, #1
1a000488:	2002      	movs	r0, #2
1a00048a:	f001 fe4f 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "Tiempo ensayo" );
1a00048e:	4810      	ldr	r0, [pc, #64]	; (1a0004d0 <menuPrincipal+0x68>)
1a000490:	f001 fed6 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(2,2);
1a000494:	2102      	movs	r1, #2
1a000496:	4608      	mov	r0, r1
1a000498:	f001 fe48 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "Inicio Ensayo" );
1a00049c:	480d      	ldr	r0, [pc, #52]	; (1a0004d4 <menuPrincipal+0x6c>)
1a00049e:	f001 fecf 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(0,3);
1a0004a2:	2103      	movs	r1, #3
1a0004a4:	2000      	movs	r0, #0
1a0004a6:	f001 fe41 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "        " );
1a0004aa:	480b      	ldr	r0, [pc, #44]	; (1a0004d8 <menuPrincipal+0x70>)
1a0004ac:	f001 fec8 	bl	1a002240 <lcdSendStringRaw>

	lcdGoToXY(19,3);
1a0004b0:	2103      	movs	r1, #3
1a0004b2:	2013      	movs	r0, #19
1a0004b4:	f001 fe3a 	bl	1a00212c <lcdGoToXY>
	lcdSendInt( contPulsados );
1a0004b8:	4b08      	ldr	r3, [pc, #32]	; (1a0004dc <menuPrincipal+0x74>)
1a0004ba:	f9b3 0000 	ldrsh.w	r0, [r3]
1a0004be:	17c1      	asrs	r1, r0, #31
1a0004c0:	f001 ff04 	bl	1a0022cc <lcdSendInt>
}
1a0004c4:	bd08      	pop	{r3, pc}
1a0004c6:	bf00      	nop
1a0004c8:	1a002720 	.word	0x1a002720
1a0004cc:	1a002730 	.word	0x1a002730
1a0004d0:	1a002734 	.word	0x1a002734
1a0004d4:	1a002744 	.word	0x1a002744
1a0004d8:	1a002754 	.word	0x1a002754
1a0004dc:	10000050 	.word	0x10000050

1a0004e0 <menuLampara>:

void menuLampara(void){
1a0004e0:	b508      	push	{r3, lr}
	lcdGoToXY( 2, 0 );
1a0004e2:	2100      	movs	r1, #0
1a0004e4:	2002      	movs	r0, #2
1a0004e6:	f001 fe21 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "luz ultravioleta" );
1a0004ea:	4815      	ldr	r0, [pc, #84]	; (1a000540 <menuLampara+0x60>)
1a0004ec:	f001 fea8 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(2,1);
1a0004f0:	2101      	movs	r1, #1
1a0004f2:	2002      	movs	r0, #2
1a0004f4:	f001 fe1a 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "luz visible" );
1a0004f8:	4812      	ldr	r0, [pc, #72]	; (1a000544 <menuLampara+0x64>)
1a0004fa:	f001 fea1 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(13,1);
1a0004fe:	2101      	movs	r1, #1
1a000500:	200d      	movs	r0, #13
1a000502:	f001 fe13 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "  " );
1a000506:	4810      	ldr	r0, [pc, #64]	; (1a000548 <menuLampara+0x68>)
1a000508:	f001 fe9a 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(2,2);
1a00050c:	2102      	movs	r1, #2
1a00050e:	4608      	mov	r0, r1
1a000510:	f001 fe0c 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "Salir" );
1a000514:	480d      	ldr	r0, [pc, #52]	; (1a00054c <menuLampara+0x6c>)
1a000516:	f001 fe93 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(7,2);
1a00051a:	2102      	movs	r1, #2
1a00051c:	2007      	movs	r0, #7
1a00051e:	f001 fe05 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "        " );
1a000522:	480b      	ldr	r0, [pc, #44]	; (1a000550 <menuLampara+0x70>)
1a000524:	f001 fe8c 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(19,3);
1a000528:	2103      	movs	r1, #3
1a00052a:	2013      	movs	r0, #19
1a00052c:	f001 fdfe 	bl	1a00212c <lcdGoToXY>
	lcdSendInt( contPulsados );
1a000530:	4b08      	ldr	r3, [pc, #32]	; (1a000554 <menuLampara+0x74>)
1a000532:	f9b3 0000 	ldrsh.w	r0, [r3]
1a000536:	17c1      	asrs	r1, r0, #31
1a000538:	f001 fec8 	bl	1a0022cc <lcdSendInt>

}
1a00053c:	bd08      	pop	{r3, pc}
1a00053e:	bf00      	nop
1a000540:	1a0026f8 	.word	0x1a0026f8
1a000544:	1a00270c 	.word	0x1a00270c
1a000548:	1a002798 	.word	0x1a002798
1a00054c:	1a002718 	.word	0x1a002718
1a000550:	1a002754 	.word	0x1a002754
1a000554:	10000050 	.word	0x10000050

1a000558 <menutiempoEnsayo>:

void menutiempoEnsayo(void){
1a000558:	b510      	push	{r4, lr}
	lcdGoToXY( 2, 0 );
1a00055a:	2100      	movs	r1, #0
1a00055c:	2002      	movs	r0, #2
1a00055e:	f001 fde5 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "1 Minuto" );
1a000562:	481c      	ldr	r0, [pc, #112]	; (1a0005d4 <menutiempoEnsayo+0x7c>)
1a000564:	f001 fe6c 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY( 10, 0 );
1a000568:	2100      	movs	r1, #0
1a00056a:	200a      	movs	r0, #10
1a00056c:	f001 fdde 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "          " );
1a000570:	4819      	ldr	r0, [pc, #100]	; (1a0005d8 <menutiempoEnsayo+0x80>)
1a000572:	f001 fe65 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(2,1);
1a000576:	2101      	movs	r1, #1
1a000578:	2002      	movs	r0, #2
1a00057a:	f001 fdd7 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "2 Minutos" );
1a00057e:	4817      	ldr	r0, [pc, #92]	; (1a0005dc <menutiempoEnsayo+0x84>)
1a000580:	f001 fe5e 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY( 11, 1 );
1a000584:	2101      	movs	r1, #1
1a000586:	200b      	movs	r0, #11
1a000588:	f001 fdd0 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "  " );
1a00058c:	4c14      	ldr	r4, [pc, #80]	; (1a0005e0 <menutiempoEnsayo+0x88>)
1a00058e:	4620      	mov	r0, r4
1a000590:	f001 fe56 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(13,1);
1a000594:	2101      	movs	r1, #1
1a000596:	200d      	movs	r0, #13
1a000598:	f001 fdc8 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "  " );
1a00059c:	4620      	mov	r0, r4
1a00059e:	f001 fe4f 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(2,2);
1a0005a2:	2102      	movs	r1, #2
1a0005a4:	4608      	mov	r0, r1
1a0005a6:	f001 fdc1 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "Salir" );
1a0005aa:	480e      	ldr	r0, [pc, #56]	; (1a0005e4 <menutiempoEnsayo+0x8c>)
1a0005ac:	f001 fe48 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(7,2);
1a0005b0:	2102      	movs	r1, #2
1a0005b2:	2007      	movs	r0, #7
1a0005b4:	f001 fdba 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "        " );
1a0005b8:	480b      	ldr	r0, [pc, #44]	; (1a0005e8 <menutiempoEnsayo+0x90>)
1a0005ba:	f001 fe41 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(19,3);
1a0005be:	2103      	movs	r1, #3
1a0005c0:	2013      	movs	r0, #19
1a0005c2:	f001 fdb3 	bl	1a00212c <lcdGoToXY>
	lcdSendInt( contPulsados );
1a0005c6:	4b09      	ldr	r3, [pc, #36]	; (1a0005ec <menutiempoEnsayo+0x94>)
1a0005c8:	f9b3 0000 	ldrsh.w	r0, [r3]
1a0005cc:	17c1      	asrs	r1, r0, #31
1a0005ce:	f001 fe7d 	bl	1a0022cc <lcdSendInt>
}
1a0005d2:	bd10      	pop	{r4, pc}
1a0005d4:	1a002784 	.word	0x1a002784
1a0005d8:	1a002790 	.word	0x1a002790
1a0005dc:	1a00279c 	.word	0x1a00279c
1a0005e0:	1a002798 	.word	0x1a002798
1a0005e4:	1a002718 	.word	0x1a002718
1a0005e8:	1a002754 	.word	0x1a002754
1a0005ec:	10000050 	.word	0x10000050

1a0005f0 <menuinicioEnsayo>:

void menuinicioEnsayo(void){
1a0005f0:	b508      	push	{r3, lr}
	lcdGoToXY( 0, 0 );
1a0005f2:	2100      	movs	r1, #0
1a0005f4:	4608      	mov	r0, r1
1a0005f6:	f001 fd99 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "Valor Analogico" );
1a0005fa:	4811      	ldr	r0, [pc, #68]	; (1a000640 <menuinicioEnsayo+0x50>)
1a0005fc:	f001 fe20 	bl	1a002240 <lcdSendStringRaw>

	lcdGoToXY(0,1);
1a000600:	2101      	movs	r1, #1
1a000602:	2000      	movs	r0, #0
1a000604:	f001 fd92 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "Duracion" );
1a000608:	480e      	ldr	r0, [pc, #56]	; (1a000644 <menuinicioEnsayo+0x54>)
1a00060a:	f001 fe19 	bl	1a002240 <lcdSendStringRaw>

	lcdGoToXY(2,2);
1a00060e:	2102      	movs	r1, #2
1a000610:	4608      	mov	r0, r1
1a000612:	f001 fd8b 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "Inicio" );
1a000616:	480c      	ldr	r0, [pc, #48]	; (1a000648 <menuinicioEnsayo+0x58>)
1a000618:	f001 fe12 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(2,3);
1a00061c:	2103      	movs	r1, #3
1a00061e:	2002      	movs	r0, #2
1a000620:	f001 fd84 	bl	1a00212c <lcdGoToXY>
	lcdSendStringRaw( "Salir" );
1a000624:	4809      	ldr	r0, [pc, #36]	; (1a00064c <menuinicioEnsayo+0x5c>)
1a000626:	f001 fe0b 	bl	1a002240 <lcdSendStringRaw>
	lcdGoToXY(19,3);
1a00062a:	2103      	movs	r1, #3
1a00062c:	2013      	movs	r0, #19
1a00062e:	f001 fd7d 	bl	1a00212c <lcdGoToXY>
	lcdSendInt( contPulsados );
1a000632:	4b07      	ldr	r3, [pc, #28]	; (1a000650 <menuinicioEnsayo+0x60>)
1a000634:	f9b3 0000 	ldrsh.w	r0, [r3]
1a000638:	17c1      	asrs	r1, r0, #31
1a00063a:	f001 fe47 	bl	1a0022cc <lcdSendInt>

}
1a00063e:	bd08      	pop	{r3, pc}
1a000640:	1a002760 	.word	0x1a002760
1a000644:	1a002770 	.word	0x1a002770
1a000648:	1a00277c 	.word	0x1a00277c
1a00064c:	1a002718 	.word	0x1a002718
1a000650:	10000050 	.word	0x10000050

1a000654 <ejecucion_ensayo>:


bool_t ejecucion_ensayo(int64_t a){
1a000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000656:	4606      	mov	r6, r0
1a000658:	460f      	mov	r7, r1
	int64_t i;
		for(i=0;i<a;i++){
1a00065a:	2400      	movs	r4, #0
1a00065c:	2500      	movs	r5, #0
1a00065e:	42b4      	cmp	r4, r6
1a000660:	eb75 0307 	sbcs.w	r3, r5, r7
1a000664:	da1e      	bge.n	1a0006a4 <ejecucion_ensayo+0x50>
		lcdGoToXY( 0, 0 );
1a000666:	2100      	movs	r1, #0
1a000668:	4608      	mov	r0, r1
1a00066a:	f001 fd5f 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "Val Muestra" );
1a00066e:	480e      	ldr	r0, [pc, #56]	; (1a0006a8 <ejecucion_ensayo+0x54>)
1a000670:	f001 fde6 	bl	1a002240 <lcdSendStringRaw>
		lcdGoToXY(0,1);
1a000674:	2101      	movs	r1, #1
1a000676:	2000      	movs	r0, #0
1a000678:	f001 fd58 	bl	1a00212c <lcdGoToXY>
		lcdSendStringRaw( "Duracion" );
1a00067c:	480b      	ldr	r0, [pc, #44]	; (1a0006ac <ejecucion_ensayo+0x58>)
1a00067e:	f001 fddf 	bl	1a002240 <lcdSendStringRaw>
		lcdSendIntFormXY(i,12,1);
1a000682:	2301      	movs	r3, #1
1a000684:	220c      	movs	r2, #12
1a000686:	4620      	mov	r0, r4
1a000688:	4629      	mov	r1, r5
1a00068a:	f001 fe25 	bl	1a0022d8 <lcdSendIntFormXY>
		delay(1000);
1a00068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000692:	2100      	movs	r1, #0
1a000694:	f001 fc26 	bl	1a001ee4 <delay>
		lcdClear();
1a000698:	f001 fd70 	bl	1a00217c <lcdClear>
		for(i=0;i<a;i++){
1a00069c:	3401      	adds	r4, #1
1a00069e:	f145 0500 	adc.w	r5, r5, #0
1a0006a2:	e7dc      	b.n	1a00065e <ejecucion_ensayo+0xa>
	}
        return FALSE;
	}
1a0006a4:	2000      	movs	r0, #0
1a0006a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0006a8:	1a0026ec 	.word	0x1a0026ec
1a0006ac:	1a002770 	.word	0x1a002770

1a0006b0 <termino_ensayo>:

void termino_ensayo(void){
1a0006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int64_t i;
int64_t j;
for (i=0;i<=3;i++){
1a0006b2:	2600      	movs	r6, #0
1a0006b4:	2700      	movs	r7, #0
1a0006b6:	e014      	b.n	1a0006e2 <termino_ensayo+0x32>
	for(j=0;j<=19;j++){
		lcdGoToXY(j,i);
1a0006b8:	b2f1      	uxtb	r1, r6
1a0006ba:	b2e0      	uxtb	r0, r4
1a0006bc:	f001 fd36 	bl	1a00212c <lcdGoToXY>
		delay(100);
1a0006c0:	2064      	movs	r0, #100	; 0x64
1a0006c2:	2100      	movs	r1, #0
1a0006c4:	f001 fc0e 	bl	1a001ee4 <delay>
		lcdSendStringRaw( "-" );
1a0006c8:	480a      	ldr	r0, [pc, #40]	; (1a0006f4 <termino_ensayo+0x44>)
1a0006ca:	f001 fdb9 	bl	1a002240 <lcdSendStringRaw>
	for(j=0;j<=19;j++){
1a0006ce:	3401      	adds	r4, #1
1a0006d0:	f145 0500 	adc.w	r5, r5, #0
1a0006d4:	2c14      	cmp	r4, #20
1a0006d6:	f175 0300 	sbcs.w	r3, r5, #0
1a0006da:	dbed      	blt.n	1a0006b8 <termino_ensayo+0x8>
for (i=0;i<=3;i++){
1a0006dc:	3601      	adds	r6, #1
1a0006de:	f147 0700 	adc.w	r7, r7, #0
1a0006e2:	2e04      	cmp	r6, #4
1a0006e4:	f177 0300 	sbcs.w	r3, r7, #0
1a0006e8:	da02      	bge.n	1a0006f0 <termino_ensayo+0x40>
	for(j=0;j<=19;j++){
1a0006ea:	2400      	movs	r4, #0
1a0006ec:	2500      	movs	r5, #0
1a0006ee:	e7f1      	b.n	1a0006d4 <termino_ensayo+0x24>
	}

}
	}
1a0006f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0006f2:	bf00      	nop
1a0006f4:	1a0027ac 	.word	0x1a0027ac

1a0006f8 <main>:
{
1a0006f8:	b508      	push	{r3, lr}
	boardInit();
1a0006fa:	f001 fb5d 	bl	1a001db8 <boardInit>
	i2cInit( I2C0, 100000 );
1a0006fe:	4979      	ldr	r1, [pc, #484]	; (1a0008e4 <main+0x1ec>)
1a000700:	2000      	movs	r0, #0
1a000702:	f001 f9dd 	bl	1a001ac0 <i2cInit>
	menuDisplay=menu_principal;
1a000706:	2400      	movs	r4, #0
1a000708:	4b77      	ldr	r3, [pc, #476]	; (1a0008e8 <main+0x1f0>)
1a00070a:	701c      	strb	r4, [r3, #0]
	delay( LCD_STARTUP_WAIT_MS );   // Wait for stable power (some LCD need that)
1a00070c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000710:	2100      	movs	r1, #0
1a000712:	f001 fbe7 	bl	1a001ee4 <delay>
	lcdInit( 20, 4, 5, 8 );
1a000716:	2308      	movs	r3, #8
1a000718:	2205      	movs	r2, #5
1a00071a:	2104      	movs	r1, #4
1a00071c:	2014      	movs	r0, #20
1a00071e:	f001 fd37 	bl	1a002190 <lcdInit>
	lcdCursorSet( LCD_CURSOR_OFF ); // Apaga el cursor
1a000722:	4620      	mov	r0, r4
1a000724:	f001 fd82 	bl	1a00222c <lcdCursorSet>
	lcdClear();                     // Borrar la pantalla
1a000728:	f001 fd28 	bl	1a00217c <lcdClear>
1a00072c:	e0bc      	b.n	1a0008a8 <main+0x1b0>
			teclaPulsada();
1a00072e:	f7ff fde7 	bl	1a000300 <teclaPulsada>
			menuPrincipal();
1a000732:	f7ff fe99 	bl	1a000468 <menuPrincipal>
			if(!gpioRead(TEC2)){
1a000736:	2025      	movs	r0, #37	; 0x25
1a000738:	f001 fafb 	bl	1a001d32 <gpioRead>
1a00073c:	b920      	cbnz	r0, 1a000748 <main+0x50>
				if (contPulsados==1){
1a00073e:	4b6b      	ldr	r3, [pc, #428]	; (1a0008ec <main+0x1f4>)
1a000740:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000744:	2b01      	cmp	r3, #1
1a000746:	d018      	beq.n	1a00077a <main+0x82>
			if(!gpioRead(TEC2)){
1a000748:	2025      	movs	r0, #37	; 0x25
1a00074a:	f001 faf2 	bl	1a001d32 <gpioRead>
1a00074e:	b920      	cbnz	r0, 1a00075a <main+0x62>
				if (contPulsados==2){
1a000750:	4b66      	ldr	r3, [pc, #408]	; (1a0008ec <main+0x1f4>)
1a000752:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000756:	2b02      	cmp	r3, #2
1a000758:	d013      	beq.n	1a000782 <main+0x8a>
			if(!gpioRead(TEC2)){
1a00075a:	2025      	movs	r0, #37	; 0x25
1a00075c:	f001 fae9 	bl	1a001d32 <gpioRead>
1a000760:	2800      	cmp	r0, #0
1a000762:	f040 80a1 	bne.w	1a0008a8 <main+0x1b0>
				if (contPulsados==3){
1a000766:	4b61      	ldr	r3, [pc, #388]	; (1a0008ec <main+0x1f4>)
1a000768:	f9b3 3000 	ldrsh.w	r3, [r3]
1a00076c:	2b03      	cmp	r3, #3
1a00076e:	f040 809b 	bne.w	1a0008a8 <main+0x1b0>
					menuDisplay=menu_inicioEnsayo;
1a000772:	4b5d      	ldr	r3, [pc, #372]	; (1a0008e8 <main+0x1f0>)
1a000774:	2203      	movs	r2, #3
1a000776:	701a      	strb	r2, [r3, #0]
1a000778:	e096      	b.n	1a0008a8 <main+0x1b0>
					menuDisplay=menu_lampara;
1a00077a:	4b5b      	ldr	r3, [pc, #364]	; (1a0008e8 <main+0x1f0>)
1a00077c:	2201      	movs	r2, #1
1a00077e:	701a      	strb	r2, [r3, #0]
1a000780:	e7e2      	b.n	1a000748 <main+0x50>
					menuDisplay=menu_tiempoEnsayo;
1a000782:	4b59      	ldr	r3, [pc, #356]	; (1a0008e8 <main+0x1f0>)
1a000784:	2202      	movs	r2, #2
1a000786:	701a      	strb	r2, [r3, #0]
1a000788:	e7e7      	b.n	1a00075a <main+0x62>
			teclaPulsada();
1a00078a:	f7ff fdb9 	bl	1a000300 <teclaPulsada>
			menuLampara();
1a00078e:	f7ff fea7 	bl	1a0004e0 <menuLampara>
			if(!gpioRead(TEC2)){
1a000792:	2025      	movs	r0, #37	; 0x25
1a000794:	f001 facd 	bl	1a001d32 <gpioRead>
1a000798:	2800      	cmp	r0, #0
1a00079a:	f040 8085 	bne.w	1a0008a8 <main+0x1b0>
				if(contPulsados==1){
1a00079e:	4b53      	ldr	r3, [pc, #332]	; (1a0008ec <main+0x1f4>)
1a0007a0:	f9b3 3000 	ldrsh.w	r3, [r3]
1a0007a4:	2b01      	cmp	r3, #1
1a0007a6:	d015      	beq.n	1a0007d4 <main+0xdc>
				if(contPulsados==2){
1a0007a8:	4b50      	ldr	r3, [pc, #320]	; (1a0008ec <main+0x1f4>)
1a0007aa:	f9b3 3000 	ldrsh.w	r3, [r3]
1a0007ae:	2b02      	cmp	r3, #2
1a0007b0:	d015      	beq.n	1a0007de <main+0xe6>
				if (contPulsados==3){
1a0007b2:	4b4e      	ldr	r3, [pc, #312]	; (1a0008ec <main+0x1f4>)
1a0007b4:	f9b3 3000 	ldrsh.w	r3, [r3]
1a0007b8:	2b03      	cmp	r3, #3
1a0007ba:	d175      	bne.n	1a0008a8 <main+0x1b0>
					menuDisplay=menu_principal;
1a0007bc:	2400      	movs	r4, #0
1a0007be:	4b4a      	ldr	r3, [pc, #296]	; (1a0008e8 <main+0x1f0>)
1a0007c0:	701c      	strb	r4, [r3, #0]
					gpioWrite(LED1,0);
1a0007c2:	4621      	mov	r1, r4
1a0007c4:	202b      	movs	r0, #43	; 0x2b
1a0007c6:	f001 fa7f 	bl	1a001cc8 <gpioWrite>
					gpioWrite(LED2,0);
1a0007ca:	4621      	mov	r1, r4
1a0007cc:	202c      	movs	r0, #44	; 0x2c
1a0007ce:	f001 fa7b 	bl	1a001cc8 <gpioWrite>
1a0007d2:	e069      	b.n	1a0008a8 <main+0x1b0>
					gpioWrite(LED1,1);//prendo led 1 solo para probar la idea es que guarde en una memoria este dato
1a0007d4:	2101      	movs	r1, #1
1a0007d6:	202b      	movs	r0, #43	; 0x2b
1a0007d8:	f001 fa76 	bl	1a001cc8 <gpioWrite>
1a0007dc:	e7e4      	b.n	1a0007a8 <main+0xb0>
					gpioWrite(LED2,1);//prendo led 2 solo para probar la idea es que guarde en una memoria este dato
1a0007de:	2101      	movs	r1, #1
1a0007e0:	202c      	movs	r0, #44	; 0x2c
1a0007e2:	f001 fa71 	bl	1a001cc8 <gpioWrite>
1a0007e6:	e7e4      	b.n	1a0007b2 <main+0xba>
			teclaPulsada();
1a0007e8:	f7ff fd8a 	bl	1a000300 <teclaPulsada>
			menutiempoEnsayo();
1a0007ec:	f7ff feb4 	bl	1a000558 <menutiempoEnsayo>
			if(!gpioRead(TEC2)){
1a0007f0:	2025      	movs	r0, #37	; 0x25
1a0007f2:	f001 fa9e 	bl	1a001d32 <gpioRead>
1a0007f6:	2800      	cmp	r0, #0
1a0007f8:	d156      	bne.n	1a0008a8 <main+0x1b0>
				if(contPulsados==1){
1a0007fa:	4b3c      	ldr	r3, [pc, #240]	; (1a0008ec <main+0x1f4>)
1a0007fc:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000800:	2b01      	cmp	r3, #1
1a000802:	d015      	beq.n	1a000830 <main+0x138>
				if(contPulsados==2){
1a000804:	4b39      	ldr	r3, [pc, #228]	; (1a0008ec <main+0x1f4>)
1a000806:	f9b3 3000 	ldrsh.w	r3, [r3]
1a00080a:	2b02      	cmp	r3, #2
1a00080c:	d015      	beq.n	1a00083a <main+0x142>
				if (contPulsados==3){
1a00080e:	4b37      	ldr	r3, [pc, #220]	; (1a0008ec <main+0x1f4>)
1a000810:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000814:	2b03      	cmp	r3, #3
1a000816:	d147      	bne.n	1a0008a8 <main+0x1b0>
					menuDisplay=menu_principal;
1a000818:	2400      	movs	r4, #0
1a00081a:	4b33      	ldr	r3, [pc, #204]	; (1a0008e8 <main+0x1f0>)
1a00081c:	701c      	strb	r4, [r3, #0]
					gpioWrite(LEDB,0);
1a00081e:	4621      	mov	r1, r4
1a000820:	202a      	movs	r0, #42	; 0x2a
1a000822:	f001 fa51 	bl	1a001cc8 <gpioWrite>
					gpioWrite(LEDR,0);
1a000826:	4621      	mov	r1, r4
1a000828:	2028      	movs	r0, #40	; 0x28
1a00082a:	f001 fa4d 	bl	1a001cc8 <gpioWrite>
1a00082e:	e03b      	b.n	1a0008a8 <main+0x1b0>
					gpioWrite(LEDB,1);//prendo led azul solo para probar la idea es que guarde en una memoria este dato
1a000830:	2101      	movs	r1, #1
1a000832:	202a      	movs	r0, #42	; 0x2a
1a000834:	f001 fa48 	bl	1a001cc8 <gpioWrite>
1a000838:	e7e4      	b.n	1a000804 <main+0x10c>
					gpioWrite(LEDR,1);//prendo led rojo solo para probar la idea es que guarde en una memoria este dato
1a00083a:	2101      	movs	r1, #1
1a00083c:	2028      	movs	r0, #40	; 0x28
1a00083e:	f001 fa43 	bl	1a001cc8 <gpioWrite>
1a000842:	e7e4      	b.n	1a00080e <main+0x116>
			teclaPulsada_2();
1a000844:	f7ff fdcc 	bl	1a0003e0 <teclaPulsada_2>
			menuinicioEnsayo();
1a000848:	f7ff fed2 	bl	1a0005f0 <menuinicioEnsayo>
			if(!gpioRead(TEC2)){
1a00084c:	2025      	movs	r0, #37	; 0x25
1a00084e:	f001 fa70 	bl	1a001d32 <gpioRead>
1a000852:	bb48      	cbnz	r0, 1a0008a8 <main+0x1b0>
				if (contPulsados==3){                     /*pongo esto porque el contador me queda en tres revisar */
1a000854:	4b25      	ldr	r3, [pc, #148]	; (1a0008ec <main+0x1f4>)
1a000856:	f9b3 3000 	ldrsh.w	r3, [r3]
1a00085a:	2b03      	cmp	r3, #3
1a00085c:	d00f      	beq.n	1a00087e <main+0x186>
				if (contPulsados==1){
1a00085e:	4b23      	ldr	r3, [pc, #140]	; (1a0008ec <main+0x1f4>)
1a000860:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000864:	2b01      	cmp	r3, #1
1a000866:	d010      	beq.n	1a00088a <main+0x192>
				if (contPulsados==2){
1a000868:	4b20      	ldr	r3, [pc, #128]	; (1a0008ec <main+0x1f4>)
1a00086a:	f9b3 3000 	ldrsh.w	r3, [r3]
1a00086e:	2b02      	cmp	r3, #2
1a000870:	d11a      	bne.n	1a0008a8 <main+0x1b0>
					menuDisplay=menu_principal;
1a000872:	4b1d      	ldr	r3, [pc, #116]	; (1a0008e8 <main+0x1f0>)
1a000874:	2200      	movs	r2, #0
1a000876:	701a      	strb	r2, [r3, #0]
					lcdClear();
1a000878:	f001 fc80 	bl	1a00217c <lcdClear>
1a00087c:	e014      	b.n	1a0008a8 <main+0x1b0>
					menuDisplay=menu_ejecucion_ensayo;
1a00087e:	4b1a      	ldr	r3, [pc, #104]	; (1a0008e8 <main+0x1f0>)
1a000880:	2204      	movs	r2, #4
1a000882:	701a      	strb	r2, [r3, #0]
					lcdClear();
1a000884:	f001 fc7a 	bl	1a00217c <lcdClear>
1a000888:	e7e9      	b.n	1a00085e <main+0x166>
					menuDisplay=menu_ejecucion_ensayo;
1a00088a:	4b17      	ldr	r3, [pc, #92]	; (1a0008e8 <main+0x1f0>)
1a00088c:	2204      	movs	r2, #4
1a00088e:	701a      	strb	r2, [r3, #0]
					lcdClear();
1a000890:	f001 fc74 	bl	1a00217c <lcdClear>
1a000894:	e7e8      	b.n	1a000868 <main+0x170>
           if (x){
1a000896:	4b16      	ldr	r3, [pc, #88]	; (1a0008f0 <main+0x1f8>)
1a000898:	781b      	ldrb	r3, [r3, #0]
1a00089a:	b1bb      	cbz	r3, 1a0008cc <main+0x1d4>
			x=ejecucion_ensayo(20);
1a00089c:	2014      	movs	r0, #20
1a00089e:	2100      	movs	r1, #0
1a0008a0:	f7ff fed8 	bl	1a000654 <ejecucion_ensayo>
1a0008a4:	4b12      	ldr	r3, [pc, #72]	; (1a0008f0 <main+0x1f8>)
1a0008a6:	7018      	strb	r0, [r3, #0]
		switch(menuDisplay) {
1a0008a8:	4b0f      	ldr	r3, [pc, #60]	; (1a0008e8 <main+0x1f0>)
1a0008aa:	781b      	ldrb	r3, [r3, #0]
1a0008ac:	2b04      	cmp	r3, #4
1a0008ae:	d8fb      	bhi.n	1a0008a8 <main+0x1b0>
1a0008b0:	a201      	add	r2, pc, #4	; (adr r2, 1a0008b8 <main+0x1c0>)
1a0008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0008b6:	bf00      	nop
1a0008b8:	1a00072f 	.word	0x1a00072f
1a0008bc:	1a00078b 	.word	0x1a00078b
1a0008c0:	1a0007e9 	.word	0x1a0007e9
1a0008c4:	1a000845 	.word	0x1a000845
1a0008c8:	1a000897 	.word	0x1a000897
        	   termino_ensayo();
1a0008cc:	f7ff fef0 	bl	1a0006b0 <termino_ensayo>
        	   lcdClear();
1a0008d0:	f001 fc54 	bl	1a00217c <lcdClear>
        	   menuDisplay=menu_principal;
1a0008d4:	4b04      	ldr	r3, [pc, #16]	; (1a0008e8 <main+0x1f0>)
1a0008d6:	2200      	movs	r2, #0
1a0008d8:	701a      	strb	r2, [r3, #0]
        	   x=TRUE;
1a0008da:	4b05      	ldr	r3, [pc, #20]	; (1a0008f0 <main+0x1f8>)
1a0008dc:	2201      	movs	r2, #1
1a0008de:	701a      	strb	r2, [r3, #0]
1a0008e0:	e7e2      	b.n	1a0008a8 <main+0x1b0>
1a0008e2:	bf00      	nop
1a0008e4:	000186a0 	.word	0x000186a0
1a0008e8:	10000080 	.word	0x10000080
1a0008ec:	10000050 	.word	0x10000050
1a0008f0:	10000000 	.word	0x10000000

1a0008f4 <initialise_monitor_handles>:
}
1a0008f4:	4770      	bx	lr
1a0008f6:	Address 0x000000001a0008f6 is out of bounds.


1a0008f8 <Reset_Handler>:
void Reset_Handler(void) {
1a0008f8:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0008fa:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0008fc:	4b19      	ldr	r3, [pc, #100]	; (1a000964 <Reset_Handler+0x6c>)
1a0008fe:	4a1a      	ldr	r2, [pc, #104]	; (1a000968 <Reset_Handler+0x70>)
1a000900:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000902:	3304      	adds	r3, #4
1a000904:	4a19      	ldr	r2, [pc, #100]	; (1a00096c <Reset_Handler+0x74>)
1a000906:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000908:	2300      	movs	r3, #0
1a00090a:	e005      	b.n	1a000918 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00090c:	4a18      	ldr	r2, [pc, #96]	; (1a000970 <Reset_Handler+0x78>)
1a00090e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000912:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000916:	3301      	adds	r3, #1
1a000918:	2b07      	cmp	r3, #7
1a00091a:	d9f7      	bls.n	1a00090c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a00091c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a00091e:	4b15      	ldr	r3, [pc, #84]	; (1a000974 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000920:	e007      	b.n	1a000932 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000922:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000926:	689a      	ldr	r2, [r3, #8]
1a000928:	6859      	ldr	r1, [r3, #4]
1a00092a:	6818      	ldr	r0, [r3, #0]
1a00092c:	f7ff fc2d 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000930:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000932:	4a11      	ldr	r2, [pc, #68]	; (1a000978 <Reset_Handler+0x80>)
1a000934:	4293      	cmp	r3, r2
1a000936:	d3f4      	bcc.n	1a000922 <Reset_Handler+0x2a>
1a000938:	e006      	b.n	1a000948 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00093a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a00093c:	6859      	ldr	r1, [r3, #4]
1a00093e:	f854 0b08 	ldr.w	r0, [r4], #8
1a000942:	f7ff fc31 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000946:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000948:	4a0c      	ldr	r2, [pc, #48]	; (1a00097c <Reset_Handler+0x84>)
1a00094a:	4293      	cmp	r3, r2
1a00094c:	d3f5      	bcc.n	1a00093a <Reset_Handler+0x42>
    SystemInit();
1a00094e:	f000 ffef 	bl	1a001930 <SystemInit>
    __libc_init_array();
1a000952:	f001 fe9f 	bl	1a002694 <__libc_init_array>
    initialise_monitor_handles();
1a000956:	f7ff ffcd 	bl	1a0008f4 <initialise_monitor_handles>
    main();
1a00095a:	f7ff fecd 	bl	1a0006f8 <main>
        __asm__ volatile("wfi");
1a00095e:	bf30      	wfi
1a000960:	e7fd      	b.n	1a00095e <Reset_Handler+0x66>
1a000962:	bf00      	nop
1a000964:	40053100 	.word	0x40053100
1a000968:	10df1000 	.word	0x10df1000
1a00096c:	01dff7ff 	.word	0x01dff7ff
1a000970:	e000e280 	.word	0xe000e280
1a000974:	1a000114 	.word	0x1a000114
1a000978:	1a000150 	.word	0x1a000150
1a00097c:	1a000178 	.word	0x1a000178

1a000980 <_fini>:
void _fini(void) {}
1a000980:	4770      	bx	lr

1a000982 <_init>:
void _init(void) {}
1a000982:	4770      	bx	lr

1a000984 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000984:	2200      	movs	r2, #0
1a000986:	2a05      	cmp	r2, #5
1a000988:	d819      	bhi.n	1a0009be <Board_LED_Init+0x3a>
{
1a00098a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00098c:	490c      	ldr	r1, [pc, #48]	; (1a0009c0 <Board_LED_Init+0x3c>)
1a00098e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000992:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000996:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000998:	4b0a      	ldr	r3, [pc, #40]	; (1a0009c4 <Board_LED_Init+0x40>)
1a00099a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00099e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a0009a2:	2001      	movs	r0, #1
1a0009a4:	40a0      	lsls	r0, r4
1a0009a6:	4301      	orrs	r1, r0
1a0009a8:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0009ac:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0009b0:	2100      	movs	r1, #0
1a0009b2:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0009b4:	3201      	adds	r2, #1
1a0009b6:	2a05      	cmp	r2, #5
1a0009b8:	d9e8      	bls.n	1a00098c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0009ba:	bc70      	pop	{r4, r5, r6}
1a0009bc:	4770      	bx	lr
1a0009be:	4770      	bx	lr
1a0009c0:	1a0027bc 	.word	0x1a0027bc
1a0009c4:	400f4000 	.word	0x400f4000

1a0009c8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0009c8:	2300      	movs	r3, #0
1a0009ca:	2b03      	cmp	r3, #3
1a0009cc:	d816      	bhi.n	1a0009fc <Board_TEC_Init+0x34>
{
1a0009ce:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0009d0:	490b      	ldr	r1, [pc, #44]	; (1a000a00 <Board_TEC_Init+0x38>)
1a0009d2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0009d6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0009da:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0009dc:	4c09      	ldr	r4, [pc, #36]	; (1a000a04 <Board_TEC_Init+0x3c>)
1a0009de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0009e2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0009e6:	2001      	movs	r0, #1
1a0009e8:	40a8      	lsls	r0, r5
1a0009ea:	ea21 0100 	bic.w	r1, r1, r0
1a0009ee:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0009f2:	3301      	adds	r3, #1
1a0009f4:	2b03      	cmp	r3, #3
1a0009f6:	d9eb      	bls.n	1a0009d0 <Board_TEC_Init+0x8>
   }
}
1a0009f8:	bc30      	pop	{r4, r5}
1a0009fa:	4770      	bx	lr
1a0009fc:	4770      	bx	lr
1a0009fe:	bf00      	nop
1a000a00:	1a0027b4 	.word	0x1a0027b4
1a000a04:	400f4000 	.word	0x400f4000

1a000a08 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000a08:	2300      	movs	r3, #0
1a000a0a:	2b08      	cmp	r3, #8
1a000a0c:	d816      	bhi.n	1a000a3c <Board_GPIO_Init+0x34>
{
1a000a0e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000a10:	490b      	ldr	r1, [pc, #44]	; (1a000a40 <Board_GPIO_Init+0x38>)
1a000a12:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000a16:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000a1a:	784d      	ldrb	r5, [r1, #1]
1a000a1c:	4c09      	ldr	r4, [pc, #36]	; (1a000a44 <Board_GPIO_Init+0x3c>)
1a000a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000a22:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000a26:	2001      	movs	r0, #1
1a000a28:	40a8      	lsls	r0, r5
1a000a2a:	ea21 0100 	bic.w	r1, r1, r0
1a000a2e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000a32:	3301      	adds	r3, #1
1a000a34:	2b08      	cmp	r3, #8
1a000a36:	d9eb      	bls.n	1a000a10 <Board_GPIO_Init+0x8>
   }
}
1a000a38:	bc30      	pop	{r4, r5}
1a000a3a:	4770      	bx	lr
1a000a3c:	4770      	bx	lr
1a000a3e:	bf00      	nop
1a000a40:	1a0027c8 	.word	0x1a0027c8
1a000a44:	400f4000 	.word	0x400f4000

1a000a48 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000a48:	b510      	push	{r4, lr}
1a000a4a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000a4c:	4c08      	ldr	r4, [pc, #32]	; (1a000a70 <Board_ADC_Init+0x28>)
1a000a4e:	4669      	mov	r1, sp
1a000a50:	4620      	mov	r0, r4
1a000a52:	f000 f997 	bl	1a000d84 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000a56:	4a07      	ldr	r2, [pc, #28]	; (1a000a74 <Board_ADC_Init+0x2c>)
1a000a58:	4669      	mov	r1, sp
1a000a5a:	4620      	mov	r0, r4
1a000a5c:	f000 f9b2 	bl	1a000dc4 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000a60:	2200      	movs	r2, #0
1a000a62:	4669      	mov	r1, sp
1a000a64:	4620      	mov	r0, r4
1a000a66:	f000 f9c6 	bl	1a000df6 <Chip_ADC_SetResolution>
}
1a000a6a:	b002      	add	sp, #8
1a000a6c:	bd10      	pop	{r4, pc}
1a000a6e:	bf00      	nop
1a000a70:	400e3000 	.word	0x400e3000
1a000a74:	00061a80 	.word	0x00061a80

1a000a78 <Board_SPI_Init>:
{
1a000a78:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000a7a:	4c0b      	ldr	r4, [pc, #44]	; (1a000aa8 <Board_SPI_Init+0x30>)
1a000a7c:	4620      	mov	r0, r4
1a000a7e:	f000 fe15 	bl	1a0016ac <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000a82:	6863      	ldr	r3, [r4, #4]
1a000a84:	f023 0304 	bic.w	r3, r3, #4
1a000a88:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000a8a:	6823      	ldr	r3, [r4, #0]
1a000a8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000a90:	f043 0307 	orr.w	r3, r3, #7
1a000a94:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000a96:	4905      	ldr	r1, [pc, #20]	; (1a000aac <Board_SPI_Init+0x34>)
1a000a98:	4620      	mov	r0, r4
1a000a9a:	f000 fde8 	bl	1a00166e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000a9e:	6863      	ldr	r3, [r4, #4]
1a000aa0:	f043 0302 	orr.w	r3, r3, #2
1a000aa4:	6063      	str	r3, [r4, #4]
}
1a000aa6:	bd10      	pop	{r4, pc}
1a000aa8:	400c5000 	.word	0x400c5000
1a000aac:	000186a0 	.word	0x000186a0

1a000ab0 <Board_I2C_Init>:
{
1a000ab0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000ab2:	2000      	movs	r0, #0
1a000ab4:	f000 feb6 	bl	1a001824 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000ab8:	4b04      	ldr	r3, [pc, #16]	; (1a000acc <Board_I2C_Init+0x1c>)
1a000aba:	f640 0208 	movw	r2, #2056	; 0x808
1a000abe:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000ac2:	4903      	ldr	r1, [pc, #12]	; (1a000ad0 <Board_I2C_Init+0x20>)
1a000ac4:	2000      	movs	r0, #0
1a000ac6:	f000 febf 	bl	1a001848 <Chip_I2C_SetClockRate>
}
1a000aca:	bd08      	pop	{r3, pc}
1a000acc:	40086000 	.word	0x40086000
1a000ad0:	000f4240 	.word	0x000f4240

1a000ad4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000ad4:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000ad6:	4c07      	ldr	r4, [pc, #28]	; (1a000af4 <Board_Debug_Init+0x20>)
1a000ad8:	4620      	mov	r0, r4
1a000ada:	f000 f897 	bl	1a000c0c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000ade:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000ae2:	4620      	mov	r0, r4
1a000ae4:	f000 f8bc 	bl	1a000c60 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000ae8:	2303      	movs	r3, #3
1a000aea:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000aec:	2301      	movs	r3, #1
1a000aee:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000af0:	bd10      	pop	{r4, pc}
1a000af2:	bf00      	nop
1a000af4:	400c1000 	.word	0x400c1000

1a000af8 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000af8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000afa:	f7ff ffeb 	bl	1a000ad4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000afe:	4809      	ldr	r0, [pc, #36]	; (1a000b24 <Board_Init+0x2c>)
1a000b00:	f000 fce9 	bl	1a0014d6 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000b04:	f7ff ff80 	bl	1a000a08 <Board_GPIO_Init>
   Board_ADC_Init();
1a000b08:	f7ff ff9e 	bl	1a000a48 <Board_ADC_Init>
   Board_SPI_Init();
1a000b0c:	f7ff ffb4 	bl	1a000a78 <Board_SPI_Init>
   Board_I2C_Init();
1a000b10:	f7ff ffce 	bl	1a000ab0 <Board_I2C_Init>

   Board_LED_Init();
1a000b14:	f7ff ff36 	bl	1a000984 <Board_LED_Init>
   Board_TEC_Init();
1a000b18:	f7ff ff56 	bl	1a0009c8 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000b1c:	f000 fc38 	bl	1a001390 <SystemCoreClockUpdate>
}
1a000b20:	bd08      	pop	{r3, pc}
1a000b22:	bf00      	nop
1a000b24:	400f4000 	.word	0x400f4000

1a000b28 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000b28:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000b2a:	f7ff ffd3 	bl	1a000ad4 <Board_Debug_Init>
1a000b2e:	bd08      	pop	{r3, pc}

1a000b30 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000b30:	2300      	movs	r3, #0
1a000b32:	2b1c      	cmp	r3, #28
1a000b34:	d812      	bhi.n	1a000b5c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000b36:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000b38:	4a09      	ldr	r2, [pc, #36]	; (1a000b60 <Board_SetupMuxing+0x30>)
1a000b3a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000b3e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000b42:	784a      	ldrb	r2, [r1, #1]
1a000b44:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000b46:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000b4a:	4906      	ldr	r1, [pc, #24]	; (1a000b64 <Board_SetupMuxing+0x34>)
1a000b4c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000b50:	3301      	adds	r3, #1
1a000b52:	2b1c      	cmp	r3, #28
1a000b54:	d9f0      	bls.n	1a000b38 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000b56:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000b5a:	4770      	bx	lr
1a000b5c:	4770      	bx	lr
1a000b5e:	bf00      	nop
1a000b60:	1a0027e4 	.word	0x1a0027e4
1a000b64:	40086000 	.word	0x40086000

1a000b68 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000b68:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000b6a:	4a17      	ldr	r2, [pc, #92]	; (1a000bc8 <Board_SetupClocking+0x60>)
1a000b6c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000b70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b74:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b78:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000b7c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000b80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b84:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b88:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000b8c:	2201      	movs	r2, #1
1a000b8e:	490f      	ldr	r1, [pc, #60]	; (1a000bcc <Board_SetupClocking+0x64>)
1a000b90:	2006      	movs	r0, #6
1a000b92:	f000 fca1 	bl	1a0014d8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b96:	2400      	movs	r4, #0
1a000b98:	b14c      	cbz	r4, 1a000bae <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000b9a:	4b0b      	ldr	r3, [pc, #44]	; (1a000bc8 <Board_SetupClocking+0x60>)
1a000b9c:	685a      	ldr	r2, [r3, #4]
1a000b9e:	f022 020c 	bic.w	r2, r2, #12
1a000ba2:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000ba4:	685a      	ldr	r2, [r3, #4]
1a000ba6:	f042 0203 	orr.w	r2, r2, #3
1a000baa:	605a      	str	r2, [r3, #4]
}
1a000bac:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000bae:	4808      	ldr	r0, [pc, #32]	; (1a000bd0 <Board_SetupClocking+0x68>)
1a000bb0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000bb4:	2301      	movs	r3, #1
1a000bb6:	788a      	ldrb	r2, [r1, #2]
1a000bb8:	7849      	ldrb	r1, [r1, #1]
1a000bba:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000bbe:	f000 fb43 	bl	1a001248 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000bc2:	3401      	adds	r4, #1
1a000bc4:	e7e8      	b.n	1a000b98 <Board_SetupClocking+0x30>
1a000bc6:	bf00      	nop
1a000bc8:	40043000 	.word	0x40043000
1a000bcc:	0c28cb00 	.word	0x0c28cb00
1a000bd0:	1a0027e0 	.word	0x1a0027e0

1a000bd4 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000bd4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000bd6:	f7ff ffab 	bl	1a000b30 <Board_SetupMuxing>
    Board_SetupClocking();
1a000bda:	f7ff ffc5 	bl	1a000b68 <Board_SetupClocking>
}
1a000bde:	bd08      	pop	{r3, pc}

1a000be0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000be0:	4b09      	ldr	r3, [pc, #36]	; (1a000c08 <Chip_UART_GetIndex+0x28>)
1a000be2:	4298      	cmp	r0, r3
1a000be4:	d009      	beq.n	1a000bfa <Chip_UART_GetIndex+0x1a>
1a000be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000bea:	4298      	cmp	r0, r3
1a000bec:	d007      	beq.n	1a000bfe <Chip_UART_GetIndex+0x1e>
1a000bee:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000bf2:	4298      	cmp	r0, r3
1a000bf4:	d005      	beq.n	1a000c02 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000bf6:	2000      	movs	r0, #0
1a000bf8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000bfa:	2002      	movs	r0, #2
1a000bfc:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000bfe:	2003      	movs	r0, #3
1a000c00:	4770      	bx	lr
			return 1;
1a000c02:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000c04:	4770      	bx	lr
1a000c06:	bf00      	nop
1a000c08:	400c1000 	.word	0x400c1000

1a000c0c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000c0c:	b530      	push	{r4, r5, lr}
1a000c0e:	b083      	sub	sp, #12
1a000c10:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000c12:	f7ff ffe5 	bl	1a000be0 <Chip_UART_GetIndex>
1a000c16:	2301      	movs	r3, #1
1a000c18:	461a      	mov	r2, r3
1a000c1a:	4619      	mov	r1, r3
1a000c1c:	4d0e      	ldr	r5, [pc, #56]	; (1a000c58 <Chip_UART_Init+0x4c>)
1a000c1e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000c22:	f000 fb57 	bl	1a0012d4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000c26:	2307      	movs	r3, #7
1a000c28:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000c2a:	2300      	movs	r3, #0
1a000c2c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000c2e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000c30:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000c32:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000c34:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000c36:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000c38:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000c3a:	4b08      	ldr	r3, [pc, #32]	; (1a000c5c <Chip_UART_Init+0x50>)
1a000c3c:	429c      	cmp	r4, r3
1a000c3e:	d006      	beq.n	1a000c4e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000c40:	2303      	movs	r3, #3
1a000c42:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000c44:	2310      	movs	r3, #16
1a000c46:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000c48:	9b01      	ldr	r3, [sp, #4]
}
1a000c4a:	b003      	add	sp, #12
1a000c4c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000c4e:	2300      	movs	r3, #0
1a000c50:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000c52:	69a3      	ldr	r3, [r4, #24]
1a000c54:	9301      	str	r3, [sp, #4]
1a000c56:	e7f3      	b.n	1a000c40 <Chip_UART_Init+0x34>
1a000c58:	1a002860 	.word	0x1a002860
1a000c5c:	40082000 	.word	0x40082000

1a000c60 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000c64:	b083      	sub	sp, #12
1a000c66:	9001      	str	r0, [sp, #4]
1a000c68:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000c6a:	f7ff ffb9 	bl	1a000be0 <Chip_UART_GetIndex>
1a000c6e:	4b32      	ldr	r3, [pc, #200]	; (1a000d38 <Chip_UART_SetBaudFDR+0xd8>)
1a000c70:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000c74:	f000 fb66 	bl	1a001344 <Chip_Clock_GetRate>
1a000c78:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a000c7a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000c7e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000c80:	f04f 0b00 	mov.w	fp, #0
1a000c84:	46a2      	mov	sl, r4
1a000c86:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a000c88:	e02a      	b.n	1a000ce0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a000c8a:	4242      	negs	r2, r0
				div ++;
1a000c8c:	1c4b      	adds	r3, r1, #1
1a000c8e:	e017      	b.n	1a000cc0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000c90:	b30a      	cbz	r2, 1a000cd6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000c92:	4617      	mov	r7, r2
			sd = d;
1a000c94:	46ab      	mov	fp, r5
			sm = m;
1a000c96:	46a2      	mov	sl, r4
			sdiv = div;
1a000c98:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a000c9a:	3501      	adds	r5, #1
1a000c9c:	42ac      	cmp	r4, r5
1a000c9e:	d91e      	bls.n	1a000cde <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000ca0:	0933      	lsrs	r3, r6, #4
1a000ca2:	0730      	lsls	r0, r6, #28
1a000ca4:	fba4 0100 	umull	r0, r1, r4, r0
1a000ca8:	fb04 1103 	mla	r1, r4, r3, r1
1a000cac:	1962      	adds	r2, r4, r5
1a000cae:	fb08 f202 	mul.w	r2, r8, r2
1a000cb2:	2300      	movs	r3, #0
1a000cb4:	f001 fb6c 	bl	1a002390 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a000cb8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a000cba:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000cbc:	2800      	cmp	r0, #0
1a000cbe:	dbe4      	blt.n	1a000c8a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000cc0:	4297      	cmp	r7, r2
1a000cc2:	d3ea      	bcc.n	1a000c9a <Chip_UART_SetBaudFDR+0x3a>
1a000cc4:	2b00      	cmp	r3, #0
1a000cc6:	d0e8      	beq.n	1a000c9a <Chip_UART_SetBaudFDR+0x3a>
1a000cc8:	0c19      	lsrs	r1, r3, #16
1a000cca:	d1e6      	bne.n	1a000c9a <Chip_UART_SetBaudFDR+0x3a>
1a000ccc:	2b02      	cmp	r3, #2
1a000cce:	d8df      	bhi.n	1a000c90 <Chip_UART_SetBaudFDR+0x30>
1a000cd0:	2d00      	cmp	r5, #0
1a000cd2:	d0dd      	beq.n	1a000c90 <Chip_UART_SetBaudFDR+0x30>
1a000cd4:	e7e1      	b.n	1a000c9a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000cd6:	4617      	mov	r7, r2
			sd = d;
1a000cd8:	46ab      	mov	fp, r5
			sm = m;
1a000cda:	46a2      	mov	sl, r4
			sdiv = div;
1a000cdc:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a000cde:	3401      	adds	r4, #1
1a000ce0:	b11f      	cbz	r7, 1a000cea <Chip_UART_SetBaudFDR+0x8a>
1a000ce2:	2c0f      	cmp	r4, #15
1a000ce4:	d801      	bhi.n	1a000cea <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000ce6:	2500      	movs	r5, #0
1a000ce8:	e7d8      	b.n	1a000c9c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000cea:	f1b9 0f00 	cmp.w	r9, #0
1a000cee:	d01e      	beq.n	1a000d2e <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000cf0:	9a01      	ldr	r2, [sp, #4]
1a000cf2:	4611      	mov	r1, r2
1a000cf4:	68d3      	ldr	r3, [r2, #12]
1a000cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000cfa:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000cfc:	fa5f f389 	uxtb.w	r3, r9
1a000d00:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a000d02:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000d06:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000d08:	68d3      	ldr	r3, [r2, #12]
1a000d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000d0e:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000d10:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000d14:	b2db      	uxtb	r3, r3
1a000d16:	f00b 020f 	and.w	r2, fp, #15
1a000d1a:	4313      	orrs	r3, r2
1a000d1c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000d1e:	0933      	lsrs	r3, r6, #4
1a000d20:	fb0a f303 	mul.w	r3, sl, r3
1a000d24:	44da      	add	sl, fp
1a000d26:	fb09 f90a 	mul.w	r9, r9, sl
1a000d2a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000d2e:	4648      	mov	r0, r9
1a000d30:	b003      	add	sp, #12
1a000d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000d36:	bf00      	nop
1a000d38:	1a002858 	.word	0x1a002858

1a000d3c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000d3c:	4b03      	ldr	r3, [pc, #12]	; (1a000d4c <Chip_ADC_GetClockIndex+0x10>)
1a000d3e:	4298      	cmp	r0, r3
1a000d40:	d001      	beq.n	1a000d46 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000d42:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000d44:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000d46:	2004      	movs	r0, #4
1a000d48:	4770      	bx	lr
1a000d4a:	bf00      	nop
1a000d4c:	400e4000 	.word	0x400e4000

1a000d50 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000d50:	b570      	push	{r4, r5, r6, lr}
1a000d52:	460d      	mov	r5, r1
1a000d54:	4614      	mov	r4, r2
1a000d56:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000d58:	f7ff fff0 	bl	1a000d3c <Chip_ADC_GetClockIndex>
1a000d5c:	f000 faf2 	bl	1a001344 <Chip_Clock_GetRate>
	if (burstMode) {
1a000d60:	b155      	cbz	r5, 1a000d78 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000d62:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000d66:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000d6a:	0064      	lsls	r4, r4, #1
1a000d6c:	fbb0 f0f4 	udiv	r0, r0, r4
1a000d70:	b2c0      	uxtb	r0, r0
1a000d72:	3801      	subs	r0, #1
	return div;
}
1a000d74:	b2c0      	uxtb	r0, r0
1a000d76:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000d78:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000d7c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000d80:	e7f1      	b.n	1a000d66 <getClkDiv+0x16>
1a000d82:	Address 0x000000001a000d82 is out of bounds.


1a000d84 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000d84:	b538      	push	{r3, r4, r5, lr}
1a000d86:	4605      	mov	r5, r0
1a000d88:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000d8a:	f7ff ffd7 	bl	1a000d3c <Chip_ADC_GetClockIndex>
1a000d8e:	2301      	movs	r3, #1
1a000d90:	461a      	mov	r2, r3
1a000d92:	4619      	mov	r1, r3
1a000d94:	f000 fa9e 	bl	1a0012d4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000d98:	2100      	movs	r1, #0
1a000d9a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000d9c:	4a08      	ldr	r2, [pc, #32]	; (1a000dc0 <Chip_ADC_Init+0x3c>)
1a000d9e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000da0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000da2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000da4:	230b      	movs	r3, #11
1a000da6:	4628      	mov	r0, r5
1a000da8:	f7ff ffd2 	bl	1a000d50 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000dac:	0200      	lsls	r0, r0, #8
1a000dae:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000db2:	7920      	ldrb	r0, [r4, #4]
1a000db4:	0440      	lsls	r0, r0, #17
1a000db6:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000dba:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000dbc:	6028      	str	r0, [r5, #0]
}
1a000dbe:	bd38      	pop	{r3, r4, r5, pc}
1a000dc0:	00061a80 	.word	0x00061a80

1a000dc4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000dc4:	b570      	push	{r4, r5, r6, lr}
1a000dc6:	4605      	mov	r5, r0
1a000dc8:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000dca:	6804      	ldr	r4, [r0, #0]
1a000dcc:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000dd0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000dd4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000dd6:	790b      	ldrb	r3, [r1, #4]
1a000dd8:	f1c3 030b 	rsb	r3, r3, #11
1a000ddc:	b2db      	uxtb	r3, r3
1a000dde:	7949      	ldrb	r1, [r1, #5]
1a000de0:	f7ff ffb6 	bl	1a000d50 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000de4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000de8:	7933      	ldrb	r3, [r6, #4]
1a000dea:	045b      	lsls	r3, r3, #17
1a000dec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000df0:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000df2:	602b      	str	r3, [r5, #0]
}
1a000df4:	bd70      	pop	{r4, r5, r6, pc}

1a000df6 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000df6:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000df8:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000dfa:	680a      	ldr	r2, [r1, #0]
1a000dfc:	f7ff ffe2 	bl	1a000dc4 <Chip_ADC_SetSampleRate>
}
1a000e00:	bd08      	pop	{r3, pc}
1a000e02:	Address 0x000000001a000e02 is out of bounds.


1a000e04 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000e04:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000e06:	680b      	ldr	r3, [r1, #0]
1a000e08:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000e0c:	d002      	beq.n	1a000e14 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000e12:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000e14:	4607      	mov	r7, r0
1a000e16:	2501      	movs	r5, #1
1a000e18:	e03a      	b.n	1a000e90 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000e1a:	694b      	ldr	r3, [r1, #20]
1a000e1c:	fb03 f302 	mul.w	r3, r3, r2
1a000e20:	fbb3 f3f5 	udiv	r3, r3, r5
1a000e24:	e01c      	b.n	1a000e60 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000e26:	461c      	mov	r4, r3
	if (val < 0)
1a000e28:	ebb0 0c04 	subs.w	ip, r0, r4
1a000e2c:	d427      	bmi.n	1a000e7e <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000e2e:	4567      	cmp	r7, ip
1a000e30:	d906      	bls.n	1a000e40 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000e32:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000e34:	1c77      	adds	r7, r6, #1
1a000e36:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000e38:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000e3a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000e3c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000e3e:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000e40:	3201      	adds	r2, #1
1a000e42:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000e46:	dc1d      	bgt.n	1a000e84 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000e48:	680c      	ldr	r4, [r1, #0]
1a000e4a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000e4e:	d0e4      	beq.n	1a000e1a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000e50:	1c73      	adds	r3, r6, #1
1a000e52:	fa02 fc03 	lsl.w	ip, r2, r3
1a000e56:	694b      	ldr	r3, [r1, #20]
1a000e58:	fb03 f30c 	mul.w	r3, r3, ip
1a000e5c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000e60:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000e9c <pll_calc_divs+0x98>
1a000e64:	4563      	cmp	r3, ip
1a000e66:	d9eb      	bls.n	1a000e40 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000e68:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000ea0 <pll_calc_divs+0x9c>
1a000e6c:	4563      	cmp	r3, ip
1a000e6e:	d809      	bhi.n	1a000e84 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000e70:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000e74:	d1d7      	bne.n	1a000e26 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000e76:	1c74      	adds	r4, r6, #1
1a000e78:	fa23 f404 	lsr.w	r4, r3, r4
1a000e7c:	e7d4      	b.n	1a000e28 <pll_calc_divs+0x24>
		return -val;
1a000e7e:	f1cc 0c00 	rsb	ip, ip, #0
1a000e82:	e7d4      	b.n	1a000e2e <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000e84:	3601      	adds	r6, #1
1a000e86:	2e03      	cmp	r6, #3
1a000e88:	dc01      	bgt.n	1a000e8e <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000e8a:	2201      	movs	r2, #1
1a000e8c:	e7d9      	b.n	1a000e42 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000e8e:	3501      	adds	r5, #1
1a000e90:	2d04      	cmp	r5, #4
1a000e92:	dc01      	bgt.n	1a000e98 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000e94:	2600      	movs	r6, #0
1a000e96:	e7f6      	b.n	1a000e86 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000e98:	bcf0      	pop	{r4, r5, r6, r7}
1a000e9a:	4770      	bx	lr
1a000e9c:	094c5eff 	.word	0x094c5eff
1a000ea0:	1312d000 	.word	0x1312d000

1a000ea4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000ea6:	b099      	sub	sp, #100	; 0x64
1a000ea8:	4605      	mov	r5, r0
1a000eaa:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000eac:	225c      	movs	r2, #92	; 0x5c
1a000eae:	2100      	movs	r1, #0
1a000eb0:	a801      	add	r0, sp, #4
1a000eb2:	f001 fc13 	bl	1a0026dc <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000eb6:	2380      	movs	r3, #128	; 0x80
1a000eb8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000eba:	6963      	ldr	r3, [r4, #20]
1a000ebc:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000ebe:	7923      	ldrb	r3, [r4, #4]
1a000ec0:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000ec4:	4669      	mov	r1, sp
1a000ec6:	4628      	mov	r0, r5
1a000ec8:	f7ff ff9c 	bl	1a000e04 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000ecc:	9b06      	ldr	r3, [sp, #24]
1a000ece:	42ab      	cmp	r3, r5
1a000ed0:	d027      	beq.n	1a000f22 <pll_get_frac+0x7e>
	if (val < 0)
1a000ed2:	1aeb      	subs	r3, r5, r3
1a000ed4:	d42e      	bmi.n	1a000f34 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000ed6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000ed8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000ede:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000ee0:	6963      	ldr	r3, [r4, #20]
1a000ee2:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000ee4:	7923      	ldrb	r3, [r4, #4]
1a000ee6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000eea:	a910      	add	r1, sp, #64	; 0x40
1a000eec:	4628      	mov	r0, r5
1a000eee:	f7ff ff89 	bl	1a000e04 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000ef2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000ef4:	42ab      	cmp	r3, r5
1a000ef6:	d01f      	beq.n	1a000f38 <pll_get_frac+0x94>
	if (val < 0)
1a000ef8:	1aeb      	subs	r3, r5, r3
1a000efa:	d425      	bmi.n	1a000f48 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000efc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000efe:	4b2b      	ldr	r3, [pc, #172]	; (1a000fac <pll_get_frac+0x108>)
1a000f00:	429d      	cmp	r5, r3
1a000f02:	d923      	bls.n	1a000f4c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000f04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000f06:	1aed      	subs	r5, r5, r3
1a000f08:	d433      	bmi.n	1a000f72 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000f0a:	42ae      	cmp	r6, r5
1a000f0c:	dc3b      	bgt.n	1a000f86 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000f0e:	42be      	cmp	r6, r7
1a000f10:	dc31      	bgt.n	1a000f76 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000f12:	466d      	mov	r5, sp
1a000f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000f20:	e006      	b.n	1a000f30 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000f22:	466d      	mov	r5, sp
1a000f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000f30:	b019      	add	sp, #100	; 0x64
1a000f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000f34:	425b      	negs	r3, r3
1a000f36:	e7ce      	b.n	1a000ed6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000f38:	ad10      	add	r5, sp, #64	; 0x40
1a000f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000f46:	e7f3      	b.n	1a000f30 <pll_get_frac+0x8c>
		return -val;
1a000f48:	425b      	negs	r3, r3
1a000f4a:	e7d7      	b.n	1a000efc <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000f4c:	2340      	movs	r3, #64	; 0x40
1a000f4e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000f50:	6963      	ldr	r3, [r4, #20]
1a000f52:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000f54:	a908      	add	r1, sp, #32
1a000f56:	4628      	mov	r0, r5
1a000f58:	f7ff ff54 	bl	1a000e04 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000f5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000f5e:	42ab      	cmp	r3, r5
1a000f60:	d1d0      	bne.n	1a000f04 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000f62:	ad08      	add	r5, sp, #32
1a000f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000f70:	e7de      	b.n	1a000f30 <pll_get_frac+0x8c>
		return -val;
1a000f72:	426d      	negs	r5, r5
1a000f74:	e7c9      	b.n	1a000f0a <pll_get_frac+0x66>
			*ppll = pll[2];
1a000f76:	ad10      	add	r5, sp, #64	; 0x40
1a000f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000f84:	e7d4      	b.n	1a000f30 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000f86:	42af      	cmp	r7, r5
1a000f88:	db07      	blt.n	1a000f9a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000f8a:	ad08      	add	r5, sp, #32
1a000f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000f90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000f98:	e7ca      	b.n	1a000f30 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000f9a:	ad10      	add	r5, sp, #64	; 0x40
1a000f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000fa0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000fa8:	e7c2      	b.n	1a000f30 <pll_get_frac+0x8c>
1a000faa:	bf00      	nop
1a000fac:	068e7780 	.word	0x068e7780

1a000fb0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000fb0:	b430      	push	{r4, r5}
1a000fb2:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000fb4:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000fb6:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000fb8:	e000      	b.n	1a000fbc <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000fba:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000fbc:	281c      	cmp	r0, #28
1a000fbe:	d118      	bne.n	1a000ff2 <Chip_Clock_FindBaseClock+0x42>
1a000fc0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000fc4:	0051      	lsls	r1, r2, #1
1a000fc6:	4a0c      	ldr	r2, [pc, #48]	; (1a000ff8 <Chip_Clock_FindBaseClock+0x48>)
1a000fc8:	440a      	add	r2, r1
1a000fca:	7914      	ldrb	r4, [r2, #4]
1a000fcc:	4284      	cmp	r4, r0
1a000fce:	d010      	beq.n	1a000ff2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000fd0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000fd4:	004a      	lsls	r2, r1, #1
1a000fd6:	4908      	ldr	r1, [pc, #32]	; (1a000ff8 <Chip_Clock_FindBaseClock+0x48>)
1a000fd8:	5a8a      	ldrh	r2, [r1, r2]
1a000fda:	42aa      	cmp	r2, r5
1a000fdc:	d8ed      	bhi.n	1a000fba <Chip_Clock_FindBaseClock+0xa>
1a000fde:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000fe2:	0051      	lsls	r1, r2, #1
1a000fe4:	4a04      	ldr	r2, [pc, #16]	; (1a000ff8 <Chip_Clock_FindBaseClock+0x48>)
1a000fe6:	440a      	add	r2, r1
1a000fe8:	8852      	ldrh	r2, [r2, #2]
1a000fea:	42aa      	cmp	r2, r5
1a000fec:	d3e5      	bcc.n	1a000fba <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000fee:	4620      	mov	r0, r4
1a000ff0:	e7e4      	b.n	1a000fbc <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000ff2:	bc30      	pop	{r4, r5}
1a000ff4:	4770      	bx	lr
1a000ff6:	bf00      	nop
1a000ff8:	1a002874 	.word	0x1a002874

1a000ffc <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000ffc:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001002:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001004:	4a0d      	ldr	r2, [pc, #52]	; (1a00103c <Chip_Clock_EnableCrystal+0x40>)
1a001006:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001008:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a00100c:	6992      	ldr	r2, [r2, #24]
1a00100e:	428a      	cmp	r2, r1
1a001010:	d001      	beq.n	1a001016 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001012:	4a0a      	ldr	r2, [pc, #40]	; (1a00103c <Chip_Clock_EnableCrystal+0x40>)
1a001014:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001016:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00101a:	4a09      	ldr	r2, [pc, #36]	; (1a001040 <Chip_Clock_EnableCrystal+0x44>)
1a00101c:	6811      	ldr	r1, [r2, #0]
1a00101e:	4a09      	ldr	r2, [pc, #36]	; (1a001044 <Chip_Clock_EnableCrystal+0x48>)
1a001020:	4291      	cmp	r1, r2
1a001022:	d901      	bls.n	1a001028 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001024:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001028:	4a04      	ldr	r2, [pc, #16]	; (1a00103c <Chip_Clock_EnableCrystal+0x40>)
1a00102a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a00102c:	9b01      	ldr	r3, [sp, #4]
1a00102e:	1e5a      	subs	r2, r3, #1
1a001030:	9201      	str	r2, [sp, #4]
1a001032:	2b00      	cmp	r3, #0
1a001034:	d1fa      	bne.n	1a00102c <Chip_Clock_EnableCrystal+0x30>
}
1a001036:	b002      	add	sp, #8
1a001038:	4770      	bx	lr
1a00103a:	bf00      	nop
1a00103c:	40050000 	.word	0x40050000
1a001040:	1a0027dc 	.word	0x1a0027dc
1a001044:	01312cff 	.word	0x01312cff

1a001048 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001048:	3012      	adds	r0, #18
1a00104a:	4b05      	ldr	r3, [pc, #20]	; (1a001060 <Chip_Clock_GetDividerSource+0x18>)
1a00104c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001050:	f010 0f01 	tst.w	r0, #1
1a001054:	d102      	bne.n	1a00105c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001056:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00105a:	4770      	bx	lr
		return CLKINPUT_PD;
1a00105c:	2011      	movs	r0, #17
}
1a00105e:	4770      	bx	lr
1a001060:	40050000 	.word	0x40050000

1a001064 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001064:	f100 0212 	add.w	r2, r0, #18
1a001068:	4b03      	ldr	r3, [pc, #12]	; (1a001078 <Chip_Clock_GetDividerDivisor+0x14>)
1a00106a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00106e:	4b03      	ldr	r3, [pc, #12]	; (1a00107c <Chip_Clock_GetDividerDivisor+0x18>)
1a001070:	5c18      	ldrb	r0, [r3, r0]
}
1a001072:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001076:	4770      	bx	lr
1a001078:	40050000 	.word	0x40050000
1a00107c:	1a00286c 	.word	0x1a00286c

1a001080 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001080:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001082:	2810      	cmp	r0, #16
1a001084:	d80a      	bhi.n	1a00109c <Chip_Clock_GetClockInputHz+0x1c>
1a001086:	e8df f000 	tbb	[pc, r0]
1a00108a:	0b44      	.short	0x0b44
1a00108c:	0921180d 	.word	0x0921180d
1a001090:	2d2a2724 	.word	0x2d2a2724
1a001094:	34300909 	.word	0x34300909
1a001098:	3c38      	.short	0x3c38
1a00109a:	40          	.byte	0x40
1a00109b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00109c:	2000      	movs	r0, #0
1a00109e:	e03a      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a0010a0:	481e      	ldr	r0, [pc, #120]	; (1a00111c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a0010a2:	e038      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0010a4:	4b1e      	ldr	r3, [pc, #120]	; (1a001120 <Chip_Clock_GetClockInputHz+0xa0>)
1a0010a6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0010aa:	f003 0307 	and.w	r3, r3, #7
1a0010ae:	2b04      	cmp	r3, #4
1a0010b0:	d001      	beq.n	1a0010b6 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0010b2:	481c      	ldr	r0, [pc, #112]	; (1a001124 <Chip_Clock_GetClockInputHz+0xa4>)
1a0010b4:	e02f      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a0010b6:	2000      	movs	r0, #0
1a0010b8:	e02d      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0010ba:	4b19      	ldr	r3, [pc, #100]	; (1a001120 <Chip_Clock_GetClockInputHz+0xa0>)
1a0010bc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0010c0:	f003 0307 	and.w	r3, r3, #7
1a0010c4:	2b04      	cmp	r3, #4
1a0010c6:	d027      	beq.n	1a001118 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0010c8:	4816      	ldr	r0, [pc, #88]	; (1a001124 <Chip_Clock_GetClockInputHz+0xa4>)
1a0010ca:	e024      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0010cc:	4b16      	ldr	r3, [pc, #88]	; (1a001128 <Chip_Clock_GetClockInputHz+0xa8>)
1a0010ce:	6818      	ldr	r0, [r3, #0]
		break;
1a0010d0:	e021      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0010d2:	4b16      	ldr	r3, [pc, #88]	; (1a00112c <Chip_Clock_GetClockInputHz+0xac>)
1a0010d4:	6818      	ldr	r0, [r3, #0]
		break;
1a0010d6:	e01e      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0010d8:	4b15      	ldr	r3, [pc, #84]	; (1a001130 <Chip_Clock_GetClockInputHz+0xb0>)
1a0010da:	6818      	ldr	r0, [r3, #0]
		break;
1a0010dc:	e01b      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0010de:	4b14      	ldr	r3, [pc, #80]	; (1a001130 <Chip_Clock_GetClockInputHz+0xb0>)
1a0010e0:	6858      	ldr	r0, [r3, #4]
		break;
1a0010e2:	e018      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0010e4:	f000 f868 	bl	1a0011b8 <Chip_Clock_GetMainPLLHz>
		break;
1a0010e8:	e015      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0010ea:	2100      	movs	r1, #0
1a0010ec:	f000 f89a 	bl	1a001224 <Chip_Clock_GetDivRate>
		break;
1a0010f0:	e011      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0010f2:	2101      	movs	r1, #1
1a0010f4:	f000 f896 	bl	1a001224 <Chip_Clock_GetDivRate>
		break;
1a0010f8:	e00d      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0010fa:	2102      	movs	r1, #2
1a0010fc:	f000 f892 	bl	1a001224 <Chip_Clock_GetDivRate>
		break;
1a001100:	e009      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001102:	2103      	movs	r1, #3
1a001104:	f000 f88e 	bl	1a001224 <Chip_Clock_GetDivRate>
		break;
1a001108:	e005      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00110a:	2104      	movs	r1, #4
1a00110c:	f000 f88a 	bl	1a001224 <Chip_Clock_GetDivRate>
		break;
1a001110:	e001      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a001112:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001116:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001118:	4806      	ldr	r0, [pc, #24]	; (1a001134 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00111a:	e7fc      	b.n	1a001116 <Chip_Clock_GetClockInputHz+0x96>
1a00111c:	00b71b00 	.word	0x00b71b00
1a001120:	40043000 	.word	0x40043000
1a001124:	017d7840 	.word	0x017d7840
1a001128:	1a0027b0 	.word	0x1a0027b0
1a00112c:	1a0027dc 	.word	0x1a0027dc
1a001130:	10000054 	.word	0x10000054
1a001134:	02faf080 	.word	0x02faf080

1a001138 <Chip_Clock_CalcMainPLLValue>:
{
1a001138:	b538      	push	{r3, r4, r5, lr}
1a00113a:	4605      	mov	r5, r0
1a00113c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00113e:	7908      	ldrb	r0, [r1, #4]
1a001140:	f7ff ff9e 	bl	1a001080 <Chip_Clock_GetClockInputHz>
1a001144:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001146:	4b19      	ldr	r3, [pc, #100]	; (1a0011ac <Chip_Clock_CalcMainPLLValue+0x74>)
1a001148:	442b      	add	r3, r5
1a00114a:	4a19      	ldr	r2, [pc, #100]	; (1a0011b0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a00114c:	4293      	cmp	r3, r2
1a00114e:	d821      	bhi.n	1a001194 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001150:	b318      	cbz	r0, 1a00119a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001152:	2380      	movs	r3, #128	; 0x80
1a001154:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001156:	2300      	movs	r3, #0
1a001158:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00115a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00115c:	fbb5 f3f0 	udiv	r3, r5, r0
1a001160:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001162:	4a14      	ldr	r2, [pc, #80]	; (1a0011b4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001164:	4295      	cmp	r5, r2
1a001166:	d903      	bls.n	1a001170 <Chip_Clock_CalcMainPLLValue+0x38>
1a001168:	fb03 f000 	mul.w	r0, r3, r0
1a00116c:	42a8      	cmp	r0, r5
1a00116e:	d007      	beq.n	1a001180 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001170:	4621      	mov	r1, r4
1a001172:	4628      	mov	r0, r5
1a001174:	f7ff fe96 	bl	1a000ea4 <pll_get_frac>
		if (!ppll->nsel) {
1a001178:	68a3      	ldr	r3, [r4, #8]
1a00117a:	b18b      	cbz	r3, 1a0011a0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a00117c:	3b01      	subs	r3, #1
1a00117e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001180:	6923      	ldr	r3, [r4, #16]
1a001182:	b183      	cbz	r3, 1a0011a6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001184:	68e2      	ldr	r2, [r4, #12]
1a001186:	b10a      	cbz	r2, 1a00118c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001188:	3a01      	subs	r2, #1
1a00118a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00118c:	3b01      	subs	r3, #1
1a00118e:	6123      	str	r3, [r4, #16]
	return 0;
1a001190:	2000      	movs	r0, #0
}
1a001192:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001198:	e7fb      	b.n	1a001192 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00119a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00119e:	e7f8      	b.n	1a001192 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a0011a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0011a4:	e7f5      	b.n	1a001192 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a0011a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0011aa:	e7f2      	b.n	1a001192 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0011ac:	ff6b3a10 	.word	0xff6b3a10
1a0011b0:	0b940510 	.word	0x0b940510
1a0011b4:	094c5eff 	.word	0x094c5eff

1a0011b8 <Chip_Clock_GetMainPLLHz>:
{
1a0011b8:	b530      	push	{r4, r5, lr}
1a0011ba:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0011bc:	4d17      	ldr	r5, [pc, #92]	; (1a00121c <Chip_Clock_GetMainPLLHz+0x64>)
1a0011be:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0011c0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0011c4:	f7ff ff5c 	bl	1a001080 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0011c8:	4b15      	ldr	r3, [pc, #84]	; (1a001220 <Chip_Clock_GetMainPLLHz+0x68>)
1a0011ca:	681b      	ldr	r3, [r3, #0]
1a0011cc:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0011ce:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0011d0:	f013 0f01 	tst.w	r3, #1
1a0011d4:	d020      	beq.n	1a001218 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a0011d6:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0011da:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0011de:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0011e2:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0011e6:	3301      	adds	r3, #1
	n = nsel + 1;
1a0011e8:	3201      	adds	r2, #1
	p = ptab[psel];
1a0011ea:	f10d 0c08 	add.w	ip, sp, #8
1a0011ee:	4461      	add	r1, ip
1a0011f0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0011f4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0011f8:	d108      	bne.n	1a00120c <Chip_Clock_GetMainPLLHz+0x54>
1a0011fa:	b93d      	cbnz	r5, 1a00120c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0011fc:	0049      	lsls	r1, r1, #1
1a0011fe:	fbb3 f3f1 	udiv	r3, r3, r1
1a001202:	fbb0 f0f2 	udiv	r0, r0, r2
1a001206:	fb00 f003 	mul.w	r0, r0, r3
1a00120a:	e003      	b.n	1a001214 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a00120c:	fbb0 f0f2 	udiv	r0, r0, r2
1a001210:	fb03 f000 	mul.w	r0, r3, r0
}
1a001214:	b003      	add	sp, #12
1a001216:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001218:	2000      	movs	r0, #0
1a00121a:	e7fb      	b.n	1a001214 <Chip_Clock_GetMainPLLHz+0x5c>
1a00121c:	40050000 	.word	0x40050000
1a001220:	1a002868 	.word	0x1a002868

1a001224 <Chip_Clock_GetDivRate>:
{
1a001224:	b538      	push	{r3, r4, r5, lr}
1a001226:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001228:	4608      	mov	r0, r1
1a00122a:	f7ff ff0d 	bl	1a001048 <Chip_Clock_GetDividerSource>
1a00122e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001230:	4620      	mov	r0, r4
1a001232:	f7ff ff17 	bl	1a001064 <Chip_Clock_GetDividerDivisor>
1a001236:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001238:	4628      	mov	r0, r5
1a00123a:	f7ff ff21 	bl	1a001080 <Chip_Clock_GetClockInputHz>
1a00123e:	3401      	adds	r4, #1
}
1a001240:	fbb0 f0f4 	udiv	r0, r0, r4
1a001244:	bd38      	pop	{r3, r4, r5, pc}
1a001246:	Address 0x000000001a001246 is out of bounds.


1a001248 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001248:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00124a:	f100 0416 	add.w	r4, r0, #22
1a00124e:	00a4      	lsls	r4, r4, #2
1a001250:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001254:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001258:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00125a:	281b      	cmp	r0, #27
1a00125c:	d813      	bhi.n	1a001286 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00125e:	2911      	cmp	r1, #17
1a001260:	d01a      	beq.n	1a001298 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001262:	4d0e      	ldr	r5, [pc, #56]	; (1a00129c <Chip_Clock_SetBaseClock+0x54>)
1a001264:	4025      	ands	r5, r4

			if (autoblocken) {
1a001266:	b10a      	cbz	r2, 1a00126c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001268:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a00126c:	b10b      	cbz	r3, 1a001272 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00126e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001272:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001276:	3016      	adds	r0, #22
1a001278:	0080      	lsls	r0, r0, #2
1a00127a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00127e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001282:	6045      	str	r5, [r0, #4]
1a001284:	e008      	b.n	1a001298 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001286:	f044 0401 	orr.w	r4, r4, #1
1a00128a:	3016      	adds	r0, #22
1a00128c:	0080      	lsls	r0, r0, #2
1a00128e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001292:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001296:	6044      	str	r4, [r0, #4]
	}
}
1a001298:	bc30      	pop	{r4, r5}
1a00129a:	4770      	bx	lr
1a00129c:	e0fff7fe 	.word	0xe0fff7fe

1a0012a0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0012a0:	281b      	cmp	r0, #27
1a0012a2:	d80c      	bhi.n	1a0012be <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0012a4:	3016      	adds	r0, #22
1a0012a6:	0080      	lsls	r0, r0, #2
1a0012a8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0012ac:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0012b0:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0012b2:	f010 0f01 	tst.w	r0, #1
1a0012b6:	d104      	bne.n	1a0012c2 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0012b8:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0012bc:	4770      	bx	lr
		return CLKINPUT_PD;
1a0012be:	2011      	movs	r0, #17
1a0012c0:	4770      	bx	lr
		return CLKINPUT_PD;
1a0012c2:	2011      	movs	r0, #17
}
1a0012c4:	4770      	bx	lr

1a0012c6 <Chip_Clock_GetBaseClocktHz>:
{
1a0012c6:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0012c8:	f7ff ffea 	bl	1a0012a0 <Chip_Clock_GetBaseClock>
1a0012cc:	f7ff fed8 	bl	1a001080 <Chip_Clock_GetClockInputHz>
}
1a0012d0:	bd08      	pop	{r3, pc}
1a0012d2:	Address 0x000000001a0012d2 is out of bounds.


1a0012d4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0012d4:	b971      	cbnz	r1, 1a0012f4 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0012d6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0012d8:	b10a      	cbz	r2, 1a0012de <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0012da:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0012de:	2b02      	cmp	r3, #2
1a0012e0:	d00a      	beq.n	1a0012f8 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0012e2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0012e6:	d30a      	bcc.n	1a0012fe <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0012e8:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0012ec:	4b06      	ldr	r3, [pc, #24]	; (1a001308 <Chip_Clock_EnableOpts+0x34>)
1a0012ee:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0012f2:	4770      	bx	lr
		reg |= (1 << 1);
1a0012f4:	2103      	movs	r1, #3
1a0012f6:	e7ef      	b.n	1a0012d8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0012f8:	f041 0120 	orr.w	r1, r1, #32
1a0012fc:	e7f1      	b.n	1a0012e2 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0012fe:	3020      	adds	r0, #32
1a001300:	4b02      	ldr	r3, [pc, #8]	; (1a00130c <Chip_Clock_EnableOpts+0x38>)
1a001302:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a001306:	4770      	bx	lr
1a001308:	40052000 	.word	0x40052000
1a00130c:	40051000 	.word	0x40051000

1a001310 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001310:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001314:	d309      	bcc.n	1a00132a <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001316:	4a09      	ldr	r2, [pc, #36]	; (1a00133c <Chip_Clock_Enable+0x2c>)
1a001318:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00131c:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001320:	f043 0301 	orr.w	r3, r3, #1
1a001324:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001328:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00132a:	4a05      	ldr	r2, [pc, #20]	; (1a001340 <Chip_Clock_Enable+0x30>)
1a00132c:	3020      	adds	r0, #32
1a00132e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001332:	f043 0301 	orr.w	r3, r3, #1
1a001336:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00133a:	4770      	bx	lr
1a00133c:	40052000 	.word	0x40052000
1a001340:	40051000 	.word	0x40051000

1a001344 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001344:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001346:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00134a:	d309      	bcc.n	1a001360 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00134c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001350:	4a0d      	ldr	r2, [pc, #52]	; (1a001388 <Chip_Clock_GetRate+0x44>)
1a001352:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001356:	f014 0f01 	tst.w	r4, #1
1a00135a:	d107      	bne.n	1a00136c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00135c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00135e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001360:	f100 0320 	add.w	r3, r0, #32
1a001364:	4a09      	ldr	r2, [pc, #36]	; (1a00138c <Chip_Clock_GetRate+0x48>)
1a001366:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00136a:	e7f4      	b.n	1a001356 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00136c:	f7ff fe20 	bl	1a000fb0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001370:	f7ff ffa9 	bl	1a0012c6 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001374:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001378:	d103      	bne.n	1a001382 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00137a:	2301      	movs	r3, #1
		rate = rate / div;
1a00137c:	fbb0 f0f3 	udiv	r0, r0, r3
1a001380:	e7ed      	b.n	1a00135e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001382:	2302      	movs	r3, #2
1a001384:	e7fa      	b.n	1a00137c <Chip_Clock_GetRate+0x38>
1a001386:	bf00      	nop
1a001388:	40052000 	.word	0x40052000
1a00138c:	40051000 	.word	0x40051000

1a001390 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001390:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001392:	2069      	movs	r0, #105	; 0x69
1a001394:	f7ff ffd6 	bl	1a001344 <Chip_Clock_GetRate>
1a001398:	4b01      	ldr	r3, [pc, #4]	; (1a0013a0 <SystemCoreClockUpdate+0x10>)
1a00139a:	6018      	str	r0, [r3, #0]
}
1a00139c:	bd08      	pop	{r3, pc}
1a00139e:	bf00      	nop
1a0013a0:	10000084 	.word	0x10000084

1a0013a4 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a0013a4:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a0013a6:	6843      	ldr	r3, [r0, #4]
1a0013a8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0013ac:	2b30      	cmp	r3, #48	; 0x30
1a0013ae:	d04c      	beq.n	1a00144a <Chip_I2CM_XferHandler+0xa6>
1a0013b0:	d908      	bls.n	1a0013c4 <Chip_I2CM_XferHandler+0x20>
1a0013b2:	2b48      	cmp	r3, #72	; 0x48
1a0013b4:	d06c      	beq.n	1a001490 <Chip_I2CM_XferHandler+0xec>
1a0013b6:	d934      	bls.n	1a001422 <Chip_I2CM_XferHandler+0x7e>
1a0013b8:	2b58      	cmp	r3, #88	; 0x58
1a0013ba:	d058      	beq.n	1a00146e <Chip_I2CM_XferHandler+0xca>
1a0013bc:	2bf8      	cmp	r3, #248	; 0xf8
1a0013be:	d13e      	bne.n	1a00143e <Chip_I2CM_XferHandler+0x9a>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a0013c0:	2000      	movs	r0, #0
1a0013c2:	e02b      	b.n	1a00141c <Chip_I2CM_XferHandler+0x78>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0013c4:	2b10      	cmp	r3, #16
1a0013c6:	d016      	beq.n	1a0013f6 <Chip_I2CM_XferHandler+0x52>
1a0013c8:	d90e      	bls.n	1a0013e8 <Chip_I2CM_XferHandler+0x44>
1a0013ca:	2b20      	cmp	r3, #32
1a0013cc:	d03d      	beq.n	1a00144a <Chip_I2CM_XferHandler+0xa6>
1a0013ce:	2b28      	cmp	r3, #40	; 0x28
1a0013d0:	d001      	beq.n	1a0013d6 <Chip_I2CM_XferHandler+0x32>
1a0013d2:	2b18      	cmp	r3, #24
1a0013d4:	d135      	bne.n	1a001442 <Chip_I2CM_XferHandler+0x9e>
		if (!xfer->txSz) {
1a0013d6:	888b      	ldrh	r3, [r1, #4]
1a0013d8:	2b00      	cmp	r3, #0
1a0013da:	d13e      	bne.n	1a00145a <Chip_I2CM_XferHandler+0xb6>
			if (xfer->rxSz) {
1a0013dc:	88cb      	ldrh	r3, [r1, #6]
1a0013de:	2b00      	cmp	r3, #0
1a0013e0:	d15e      	bne.n	1a0014a0 <Chip_I2CM_XferHandler+0xfc>
				xfer->status = I2CM_STATUS_OK;
1a0013e2:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a0013e4:	232c      	movs	r3, #44	; 0x2c
1a0013e6:	e00f      	b.n	1a001408 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0013e8:	b91b      	cbnz	r3, 1a0013f2 <Chip_I2CM_XferHandler+0x4e>
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a0013ea:	2303      	movs	r3, #3
1a0013ec:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0013ee:	232c      	movs	r3, #44	; 0x2c
        break;
1a0013f0:	e00a      	b.n	1a001408 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0013f2:	2b08      	cmp	r3, #8
1a0013f4:	d125      	bne.n	1a001442 <Chip_I2CM_XferHandler+0x9e>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a0013f6:	780a      	ldrb	r2, [r1, #0]
1a0013f8:	888b      	ldrh	r3, [r1, #4]
1a0013fa:	fab3 f383 	clz	r3, r3
1a0013fe:	095b      	lsrs	r3, r3, #5
1a001400:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a001404:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a001406:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a001408:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a00140c:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a00140e:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a001412:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a001414:	8848      	ldrh	r0, [r1, #2]
1a001416:	38ff      	subs	r0, #255	; 0xff
1a001418:	bf18      	it	ne
1a00141a:	2001      	movne	r0, #1
}
1a00141c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001420:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001422:	2b38      	cmp	r3, #56	; 0x38
1a001424:	d038      	beq.n	1a001498 <Chip_I2CM_XferHandler+0xf4>
1a001426:	2b40      	cmp	r3, #64	; 0x40
1a001428:	d10b      	bne.n	1a001442 <Chip_I2CM_XferHandler+0x9e>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a00142a:	88ca      	ldrh	r2, [r1, #6]
1a00142c:	2a01      	cmp	r2, #1
1a00142e:	d927      	bls.n	1a001480 <Chip_I2CM_XferHandler+0xdc>
			cclr &= ~I2C_CON_AA;
1a001430:	2338      	movs	r3, #56	; 0x38
		if (xfer->rxSz == 0) {
1a001432:	2a00      	cmp	r2, #0
1a001434:	d1e8      	bne.n	1a001408 <Chip_I2CM_XferHandler+0x64>
			xfer->status = I2CM_STATUS_OK;
1a001436:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a001438:	f023 0310 	bic.w	r3, r3, #16
1a00143c:	e7e4      	b.n	1a001408 <Chip_I2CM_XferHandler+0x64>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00143e:	2b50      	cmp	r3, #80	; 0x50
1a001440:	d015      	beq.n	1a00146e <Chip_I2CM_XferHandler+0xca>
		xfer->status = I2CM_STATUS_ERROR;
1a001442:	2301      	movs	r3, #1
1a001444:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001446:	232c      	movs	r3, #44	; 0x2c
        break;
1a001448:	e7de      	b.n	1a001408 <Chip_I2CM_XferHandler+0x64>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a00144a:	784b      	ldrb	r3, [r1, #1]
1a00144c:	f013 0f01 	tst.w	r3, #1
1a001450:	d1c1      	bne.n	1a0013d6 <Chip_I2CM_XferHandler+0x32>
			xfer->status = I2CM_STATUS_NAK;
1a001452:	2302      	movs	r3, #2
1a001454:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a001456:	232c      	movs	r3, #44	; 0x2c
			break;
1a001458:	e7d6      	b.n	1a001408 <Chip_I2CM_XferHandler+0x64>
			pI2C->DAT = *xfer->txBuff++;
1a00145a:	688b      	ldr	r3, [r1, #8]
1a00145c:	1c5a      	adds	r2, r3, #1
1a00145e:	608a      	str	r2, [r1, #8]
1a001460:	781b      	ldrb	r3, [r3, #0]
1a001462:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a001464:	888b      	ldrh	r3, [r1, #4]
1a001466:	3b01      	subs	r3, #1
1a001468:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a00146a:	233c      	movs	r3, #60	; 0x3c
1a00146c:	e7cc      	b.n	1a001408 <Chip_I2CM_XferHandler+0x64>
		*xfer->rxBuff++ = pI2C->DAT;
1a00146e:	6882      	ldr	r2, [r0, #8]
1a001470:	68cb      	ldr	r3, [r1, #12]
1a001472:	1c5c      	adds	r4, r3, #1
1a001474:	60cc      	str	r4, [r1, #12]
1a001476:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a001478:	88cb      	ldrh	r3, [r1, #6]
1a00147a:	3b01      	subs	r3, #1
1a00147c:	80cb      	strh	r3, [r1, #6]
1a00147e:	e7d4      	b.n	1a00142a <Chip_I2CM_XferHandler+0x86>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a001480:	784b      	ldrb	r3, [r1, #1]
1a001482:	f013 0f02 	tst.w	r3, #2
1a001486:	d101      	bne.n	1a00148c <Chip_I2CM_XferHandler+0xe8>
	uint32_t cclr = I2C_CON_FLAGS;
1a001488:	233c      	movs	r3, #60	; 0x3c
1a00148a:	e7d2      	b.n	1a001432 <Chip_I2CM_XferHandler+0x8e>
			cclr &= ~I2C_CON_AA;
1a00148c:	2338      	movs	r3, #56	; 0x38
1a00148e:	e7d0      	b.n	1a001432 <Chip_I2CM_XferHandler+0x8e>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a001490:	2304      	movs	r3, #4
1a001492:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001494:	232c      	movs	r3, #44	; 0x2c
		break;
1a001496:	e7b7      	b.n	1a001408 <Chip_I2CM_XferHandler+0x64>
		xfer->status = I2CM_STATUS_ARBLOST;
1a001498:	2305      	movs	r3, #5
1a00149a:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a00149c:	233c      	movs	r3, #60	; 0x3c
		break;
1a00149e:	e7b3      	b.n	1a001408 <Chip_I2CM_XferHandler+0x64>
				cclr &= ~I2C_CON_STA;
1a0014a0:	231c      	movs	r3, #28
1a0014a2:	e7b1      	b.n	1a001408 <Chip_I2CM_XferHandler+0x64>

1a0014a4 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a0014a4:	23ff      	movs	r3, #255	; 0xff
1a0014a6:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a0014a8:	232c      	movs	r3, #44	; 0x2c
1a0014aa:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a0014ac:	2360      	movs	r3, #96	; 0x60
1a0014ae:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a0014b0:	4770      	bx	lr

1a0014b2 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a0014b2:	b538      	push	{r3, r4, r5, lr}
1a0014b4:	4604      	mov	r4, r0
1a0014b6:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a0014b8:	f7ff fff4 	bl	1a0014a4 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a0014bc:	2000      	movs	r0, #0

	while (ret == 0) {
1a0014be:	e003      	b.n	1a0014c8 <Chip_I2CM_XferBlocking+0x16>
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a0014c0:	4629      	mov	r1, r5
1a0014c2:	4620      	mov	r0, r4
1a0014c4:	f7ff ff6e 	bl	1a0013a4 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a0014c8:	b920      	cbnz	r0, 1a0014d4 <Chip_I2CM_XferBlocking+0x22>
	return pI2C->CONSET & I2C_CON_SI;
1a0014ca:	6823      	ldr	r3, [r4, #0]
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a0014cc:	f013 0f08 	tst.w	r3, #8
1a0014d0:	d0fb      	beq.n	1a0014ca <Chip_I2CM_XferBlocking+0x18>
1a0014d2:	e7f5      	b.n	1a0014c0 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a0014d4:	bd38      	pop	{r3, r4, r5, pc}

1a0014d6 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0014d6:	4770      	bx	lr

1a0014d8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0014d8:	b570      	push	{r4, r5, r6, lr}
1a0014da:	b08a      	sub	sp, #40	; 0x28
1a0014dc:	4605      	mov	r5, r0
1a0014de:	460e      	mov	r6, r1
1a0014e0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0014e2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0014e6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0014e8:	2806      	cmp	r0, #6
1a0014ea:	d018      	beq.n	1a00151e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0014ec:	2300      	movs	r3, #0
1a0014ee:	2201      	movs	r2, #1
1a0014f0:	4629      	mov	r1, r5
1a0014f2:	2004      	movs	r0, #4
1a0014f4:	f7ff fea8 	bl	1a001248 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0014f8:	4a4a      	ldr	r2, [pc, #296]	; (1a001624 <Chip_SetupCoreClock+0x14c>)
1a0014fa:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0014fc:	f043 0301 	orr.w	r3, r3, #1
1a001500:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001502:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001506:	a901      	add	r1, sp, #4
1a001508:	4630      	mov	r0, r6
1a00150a:	f7ff fe15 	bl	1a001138 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00150e:	4b46      	ldr	r3, [pc, #280]	; (1a001628 <Chip_SetupCoreClock+0x150>)
1a001510:	429e      	cmp	r6, r3
1a001512:	d916      	bls.n	1a001542 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001514:	9b01      	ldr	r3, [sp, #4]
1a001516:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00151a:	d003      	beq.n	1a001524 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00151c:	e7fe      	b.n	1a00151c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00151e:	f7ff fd6d 	bl	1a000ffc <Chip_Clock_EnableCrystal>
1a001522:	e7e3      	b.n	1a0014ec <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001524:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001528:	d005      	beq.n	1a001536 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00152a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00152e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001530:	2500      	movs	r5, #0
			direct = 1;
1a001532:	2601      	movs	r6, #1
1a001534:	e007      	b.n	1a001546 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001536:	9b04      	ldr	r3, [sp, #16]
1a001538:	3301      	adds	r3, #1
1a00153a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00153c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00153e:	2600      	movs	r6, #0
1a001540:	e001      	b.n	1a001546 <Chip_SetupCoreClock+0x6e>
1a001542:	2500      	movs	r5, #0
1a001544:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001546:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00154a:	9b01      	ldr	r3, [sp, #4]
1a00154c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001550:	9a05      	ldr	r2, [sp, #20]
1a001552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001556:	9a03      	ldr	r2, [sp, #12]
1a001558:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00155c:	9a04      	ldr	r2, [sp, #16]
1a00155e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001562:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001566:	4a2f      	ldr	r2, [pc, #188]	; (1a001624 <Chip_SetupCoreClock+0x14c>)
1a001568:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00156a:	4b2e      	ldr	r3, [pc, #184]	; (1a001624 <Chip_SetupCoreClock+0x14c>)
1a00156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00156e:	f013 0f01 	tst.w	r3, #1
1a001572:	d0fa      	beq.n	1a00156a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001574:	2300      	movs	r3, #0
1a001576:	2201      	movs	r2, #1
1a001578:	2109      	movs	r1, #9
1a00157a:	2004      	movs	r0, #4
1a00157c:	f7ff fe64 	bl	1a001248 <Chip_Clock_SetBaseClock>

	if (direct) {
1a001580:	b306      	cbz	r6, 1a0015c4 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001582:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001586:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001588:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00158a:	1e5a      	subs	r2, r3, #1
1a00158c:	9209      	str	r2, [sp, #36]	; 0x24
1a00158e:	2b00      	cmp	r3, #0
1a001590:	d1fa      	bne.n	1a001588 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a001592:	9b01      	ldr	r3, [sp, #4]
1a001594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001598:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00159a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00159e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0015a2:	9a05      	ldr	r2, [sp, #20]
1a0015a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0015a8:	9a03      	ldr	r2, [sp, #12]
1a0015aa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0015ae:	9a04      	ldr	r2, [sp, #16]
1a0015b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0015b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0015b8:	4a1a      	ldr	r2, [pc, #104]	; (1a001624 <Chip_SetupCoreClock+0x14c>)
1a0015ba:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0015bc:	2c00      	cmp	r4, #0
1a0015be:	d12e      	bne.n	1a00161e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0015c0:	b00a      	add	sp, #40	; 0x28
1a0015c2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a0015c4:	2d00      	cmp	r5, #0
1a0015c6:	d0f9      	beq.n	1a0015bc <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0015c8:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0015cc:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0015ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0015d0:	1e5a      	subs	r2, r3, #1
1a0015d2:	9209      	str	r2, [sp, #36]	; 0x24
1a0015d4:	2b00      	cmp	r3, #0
1a0015d6:	d1fa      	bne.n	1a0015ce <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a0015d8:	9b04      	ldr	r3, [sp, #16]
1a0015da:	1e5a      	subs	r2, r3, #1
1a0015dc:	9204      	str	r2, [sp, #16]
1a0015de:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0015e2:	9b01      	ldr	r3, [sp, #4]
1a0015e4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0015e8:	9905      	ldr	r1, [sp, #20]
1a0015ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0015ee:	9903      	ldr	r1, [sp, #12]
1a0015f0:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0015f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0015f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0015fc:	4a09      	ldr	r2, [pc, #36]	; (1a001624 <Chip_SetupCoreClock+0x14c>)
1a0015fe:	6453      	str	r3, [r2, #68]	; 0x44
1a001600:	e7dc      	b.n	1a0015bc <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001602:	480a      	ldr	r0, [pc, #40]	; (1a00162c <Chip_SetupCoreClock+0x154>)
1a001604:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001608:	78cb      	ldrb	r3, [r1, #3]
1a00160a:	788a      	ldrb	r2, [r1, #2]
1a00160c:	7849      	ldrb	r1, [r1, #1]
1a00160e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001612:	f7ff fe19 	bl	1a001248 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001616:	3401      	adds	r4, #1
1a001618:	2c11      	cmp	r4, #17
1a00161a:	d9f2      	bls.n	1a001602 <Chip_SetupCoreClock+0x12a>
1a00161c:	e7d0      	b.n	1a0015c0 <Chip_SetupCoreClock+0xe8>
1a00161e:	2400      	movs	r4, #0
1a001620:	e7fa      	b.n	1a001618 <Chip_SetupCoreClock+0x140>
1a001622:	bf00      	nop
1a001624:	40050000 	.word	0x40050000
1a001628:	068e7780 	.word	0x068e7780
1a00162c:	1a0028e0 	.word	0x1a0028e0

1a001630 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001630:	4b03      	ldr	r3, [pc, #12]	; (1a001640 <Chip_SSP_GetClockIndex+0x10>)
1a001632:	4298      	cmp	r0, r3
1a001634:	d001      	beq.n	1a00163a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001636:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001638:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00163a:	20a5      	movs	r0, #165	; 0xa5
1a00163c:	4770      	bx	lr
1a00163e:	bf00      	nop
1a001640:	400c5000 	.word	0x400c5000

1a001644 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001644:	4b04      	ldr	r3, [pc, #16]	; (1a001658 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001646:	4298      	cmp	r0, r3
1a001648:	d002      	beq.n	1a001650 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00164a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00164e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001650:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001654:	4770      	bx	lr
1a001656:	bf00      	nop
1a001658:	400c5000 	.word	0x400c5000

1a00165c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00165c:	6803      	ldr	r3, [r0, #0]
1a00165e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001662:	0209      	lsls	r1, r1, #8
1a001664:	b289      	uxth	r1, r1
1a001666:	4319      	orrs	r1, r3
1a001668:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00166a:	6102      	str	r2, [r0, #16]
}
1a00166c:	4770      	bx	lr

1a00166e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00166e:	b570      	push	{r4, r5, r6, lr}
1a001670:	4606      	mov	r6, r0
1a001672:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001674:	f7ff ffe6 	bl	1a001644 <Chip_SSP_GetPeriphClockIndex>
1a001678:	f7ff fe64 	bl	1a001344 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00167c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00167e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001682:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001684:	e000      	b.n	1a001688 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001686:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001688:	42ab      	cmp	r3, r5
1a00168a:	d90b      	bls.n	1a0016a4 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00168c:	1c4c      	adds	r4, r1, #1
1a00168e:	fb02 f304 	mul.w	r3, r2, r4
1a001692:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001696:	429d      	cmp	r5, r3
1a001698:	d2f6      	bcs.n	1a001688 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00169a:	2cff      	cmp	r4, #255	; 0xff
1a00169c:	d9f3      	bls.n	1a001686 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00169e:	3202      	adds	r2, #2
				cr0_div = 0;
1a0016a0:	2100      	movs	r1, #0
1a0016a2:	e7f1      	b.n	1a001688 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0016a4:	4630      	mov	r0, r6
1a0016a6:	f7ff ffd9 	bl	1a00165c <Chip_SSP_SetClockRate>
}
1a0016aa:	bd70      	pop	{r4, r5, r6, pc}

1a0016ac <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0016ac:	b510      	push	{r4, lr}
1a0016ae:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0016b0:	f7ff ffbe 	bl	1a001630 <Chip_SSP_GetClockIndex>
1a0016b4:	f7ff fe2c 	bl	1a001310 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0016b8:	4620      	mov	r0, r4
1a0016ba:	f7ff ffc3 	bl	1a001644 <Chip_SSP_GetPeriphClockIndex>
1a0016be:	f7ff fe27 	bl	1a001310 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0016c2:	6863      	ldr	r3, [r4, #4]
1a0016c4:	f023 0304 	bic.w	r3, r3, #4
1a0016c8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0016ca:	6823      	ldr	r3, [r4, #0]
1a0016cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0016d0:	f043 0307 	orr.w	r3, r3, #7
1a0016d4:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0016d6:	4902      	ldr	r1, [pc, #8]	; (1a0016e0 <Chip_SSP_Init+0x34>)
1a0016d8:	4620      	mov	r0, r4
1a0016da:	f7ff ffc8 	bl	1a00166e <Chip_SSP_SetBitRate>
}
1a0016de:	bd10      	pop	{r4, pc}
1a0016e0:	000186a0 	.word	0x000186a0

1a0016e4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0016e4:	2901      	cmp	r1, #1
1a0016e6:	d109      	bne.n	1a0016fc <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a0016e8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0016ec:	0082      	lsls	r2, r0, #2
1a0016ee:	4b04      	ldr	r3, [pc, #16]	; (1a001700 <Chip_I2C_EventHandler+0x1c>)
1a0016f0:	4413      	add	r3, r2
1a0016f2:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0016f4:	7d13      	ldrb	r3, [r2, #20]
1a0016f6:	b2db      	uxtb	r3, r3
1a0016f8:	2b04      	cmp	r3, #4
1a0016fa:	d0fb      	beq.n	1a0016f4 <Chip_I2C_EventHandler+0x10>
}
1a0016fc:	4770      	bx	lr
1a0016fe:	bf00      	nop
1a001700:	10000004 	.word	0x10000004

1a001704 <handleMasterXferState>:
{
1a001704:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a001706:	6843      	ldr	r3, [r0, #4]
1a001708:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a00170c:	2b58      	cmp	r3, #88	; 0x58
1a00170e:	d87f      	bhi.n	1a001810 <handleMasterXferState+0x10c>
1a001710:	e8df f003 	tbb	[pc, r3]
1a001714:	7e7e7e7a 	.word	0x7e7e7e7a
1a001718:	7e7e7e7e 	.word	0x7e7e7e7e
1a00171c:	7e7e7e2f 	.word	0x7e7e7e2f
1a001720:	7e7e7e7e 	.word	0x7e7e7e7e
1a001724:	7e7e7e2f 	.word	0x7e7e7e2f
1a001728:	7e7e7e7e 	.word	0x7e7e7e7e
1a00172c:	7e7e7e39 	.word	0x7e7e7e39
1a001730:	7e7e7e7e 	.word	0x7e7e7e7e
1a001734:	7e7e7e6e 	.word	0x7e7e7e6e
1a001738:	7e7e7e7e 	.word	0x7e7e7e7e
1a00173c:	7e7e7e39 	.word	0x7e7e7e39
1a001740:	7e7e7e7e 	.word	0x7e7e7e7e
1a001744:	7e7e7e72 	.word	0x7e7e7e72
1a001748:	7e7e7e7e 	.word	0x7e7e7e7e
1a00174c:	7e7e7e76 	.word	0x7e7e7e76
1a001750:	7e7e7e7e 	.word	0x7e7e7e7e
1a001754:	7e7e7e6c 	.word	0x7e7e7e6c
1a001758:	7e7e7e7e 	.word	0x7e7e7e7e
1a00175c:	7e7e7e6e 	.word	0x7e7e7e6e
1a001760:	7e7e7e7e 	.word	0x7e7e7e7e
1a001764:	7e7e7e2d 	.word	0x7e7e7e2d
1a001768:	7e7e7e7e 	.word	0x7e7e7e7e
1a00176c:	4f          	.byte	0x4f
1a00176d:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a00176e:	233c      	movs	r3, #60	; 0x3c
1a001770:	e020      	b.n	1a0017b4 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a001772:	780a      	ldrb	r2, [r1, #0]
1a001774:	688b      	ldr	r3, [r1, #8]
1a001776:	fab3 f383 	clz	r3, r3
1a00177a:	095b      	lsrs	r3, r3, #5
1a00177c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a001780:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a001782:	233c      	movs	r3, #60	; 0x3c
		break;
1a001784:	e023      	b.n	1a0017ce <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a001786:	688b      	ldr	r3, [r1, #8]
1a001788:	b94b      	cbnz	r3, 1a00179e <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a00178a:	690b      	ldr	r3, [r1, #16]
1a00178c:	b123      	cbz	r3, 1a001798 <handleMasterXferState+0x94>
1a00178e:	f06f 0320 	mvn.w	r3, #32
1a001792:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a001796:	e01a      	b.n	1a0017ce <handleMasterXferState+0xca>
1a001798:	f06f 0310 	mvn.w	r3, #16
1a00179c:	e7f9      	b.n	1a001792 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a00179e:	684b      	ldr	r3, [r1, #4]
1a0017a0:	1c5a      	adds	r2, r3, #1
1a0017a2:	604a      	str	r2, [r1, #4]
1a0017a4:	781b      	ldrb	r3, [r3, #0]
1a0017a6:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a0017a8:	688b      	ldr	r3, [r1, #8]
1a0017aa:	3b01      	subs	r3, #1
1a0017ac:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0017ae:	233c      	movs	r3, #60	; 0x3c
1a0017b0:	e00d      	b.n	1a0017ce <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a0017b2:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a0017b4:	6884      	ldr	r4, [r0, #8]
1a0017b6:	68ca      	ldr	r2, [r1, #12]
1a0017b8:	1c55      	adds	r5, r2, #1
1a0017ba:	60cd      	str	r5, [r1, #12]
1a0017bc:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a0017be:	690a      	ldr	r2, [r1, #16]
1a0017c0:	3a01      	subs	r2, #1
1a0017c2:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a0017c4:	690a      	ldr	r2, [r1, #16]
1a0017c6:	2a01      	cmp	r2, #1
1a0017c8:	dd01      	ble.n	1a0017ce <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a0017ca:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0017ce:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0017d2:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a0017d4:	f023 0210 	bic.w	r2, r3, #16
1a0017d8:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a0017da:	f013 0f10 	tst.w	r3, #16
1a0017de:	d019      	beq.n	1a001814 <handleMasterXferState+0x110>
1a0017e0:	7d0b      	ldrb	r3, [r1, #20]
1a0017e2:	2b02      	cmp	r3, #2
1a0017e4:	d016      	beq.n	1a001814 <handleMasterXferState+0x110>
	return 1;
1a0017e6:	2001      	movs	r0, #1
}
1a0017e8:	bc30      	pop	{r4, r5}
1a0017ea:	4770      	bx	lr
	uint32_t cclr = I2C_CON_FLAGS;
1a0017ec:	233c      	movs	r3, #60	; 0x3c
1a0017ee:	e7e9      	b.n	1a0017c4 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a0017f0:	2305      	movs	r3, #5
1a0017f2:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0017f4:	232c      	movs	r3, #44	; 0x2c
		break;
1a0017f6:	e7ea      	b.n	1a0017ce <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a0017f8:	2301      	movs	r3, #1
1a0017fa:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0017fc:	232c      	movs	r3, #44	; 0x2c
		break;
1a0017fe:	e7e6      	b.n	1a0017ce <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a001800:	2302      	movs	r3, #2
1a001802:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a001804:	233c      	movs	r3, #60	; 0x3c
		break;
1a001806:	e7e2      	b.n	1a0017ce <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a001808:	2303      	movs	r3, #3
1a00180a:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00180c:	232c      	movs	r3, #44	; 0x2c
1a00180e:	e7de      	b.n	1a0017ce <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a001810:	233c      	movs	r3, #60	; 0x3c
1a001812:	e7dc      	b.n	1a0017ce <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a001814:	7d0b      	ldrb	r3, [r1, #20]
1a001816:	2b04      	cmp	r3, #4
1a001818:	d001      	beq.n	1a00181e <handleMasterXferState+0x11a>
		return 0;
1a00181a:	2000      	movs	r0, #0
1a00181c:	e7e4      	b.n	1a0017e8 <handleMasterXferState+0xe4>
			xfer->status = I2C_STATUS_DONE;
1a00181e:	2300      	movs	r3, #0
1a001820:	750b      	strb	r3, [r1, #20]
1a001822:	e7fa      	b.n	1a00181a <handleMasterXferState+0x116>

1a001824 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001824:	b570      	push	{r4, r5, r6, lr}
1a001826:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001828:	4e06      	ldr	r6, [pc, #24]	; (1a001844 <Chip_I2C_Init+0x20>)
1a00182a:	00c4      	lsls	r4, r0, #3
1a00182c:	1a22      	subs	r2, r4, r0
1a00182e:	0093      	lsls	r3, r2, #2
1a001830:	4433      	add	r3, r6
1a001832:	8898      	ldrh	r0, [r3, #4]
1a001834:	f7ff fd6c 	bl	1a001310 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001838:	1b64      	subs	r4, r4, r5
1a00183a:	00a3      	lsls	r3, r4, #2
1a00183c:	58f3      	ldr	r3, [r6, r3]
1a00183e:	226c      	movs	r2, #108	; 0x6c
1a001840:	619a      	str	r2, [r3, #24]
}
1a001842:	bd70      	pop	{r4, r5, r6, pc}
1a001844:	10000004 	.word	0x10000004

1a001848 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00184c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00184e:	4e0b      	ldr	r6, [pc, #44]	; (1a00187c <Chip_I2C_SetClockRate+0x34>)
1a001850:	00c5      	lsls	r5, r0, #3
1a001852:	1a2b      	subs	r3, r5, r0
1a001854:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001858:	eb06 0308 	add.w	r3, r6, r8
1a00185c:	8898      	ldrh	r0, [r3, #4]
1a00185e:	f7ff fd71 	bl	1a001344 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a001862:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001866:	f856 3008 	ldr.w	r3, [r6, r8]
1a00186a:	0842      	lsrs	r2, r0, #1
1a00186c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00186e:	f856 3008 	ldr.w	r3, [r6, r8]
1a001872:	691a      	ldr	r2, [r3, #16]
1a001874:	1a80      	subs	r0, r0, r2
1a001876:	6158      	str	r0, [r3, #20]
}
1a001878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00187c:	10000004 	.word	0x10000004

1a001880 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a001880:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001884:	009a      	lsls	r2, r3, #2
1a001886:	4b09      	ldr	r3, [pc, #36]	; (1a0018ac <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001888:	4413      	add	r3, r2
1a00188a:	691b      	ldr	r3, [r3, #16]
1a00188c:	b153      	cbz	r3, 1a0018a4 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a00188e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001892:	0082      	lsls	r2, r0, #2
1a001894:	4b05      	ldr	r3, [pc, #20]	; (1a0018ac <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001896:	4413      	add	r3, r2
1a001898:	6898      	ldr	r0, [r3, #8]
}
1a00189a:	4288      	cmp	r0, r1
1a00189c:	bf14      	ite	ne
1a00189e:	2000      	movne	r0, #0
1a0018a0:	2001      	moveq	r0, #1
1a0018a2:	4770      	bx	lr
		iic->mEvent = event;
1a0018a4:	4b01      	ldr	r3, [pc, #4]	; (1a0018ac <Chip_I2C_SetMasterEventHandler+0x2c>)
1a0018a6:	4413      	add	r3, r2
1a0018a8:	6099      	str	r1, [r3, #8]
1a0018aa:	e7f0      	b.n	1a00188e <Chip_I2C_SetMasterEventHandler+0xe>
1a0018ac:	10000004 	.word	0x10000004

1a0018b0 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a0018b0:	b510      	push	{r4, lr}
1a0018b2:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a0018b4:	4809      	ldr	r0, [pc, #36]	; (1a0018dc <Chip_I2C_MasterStateHandler+0x2c>)
1a0018b6:	00e3      	lsls	r3, r4, #3
1a0018b8:	1b1b      	subs	r3, r3, r4
1a0018ba:	009a      	lsls	r2, r3, #2
1a0018bc:	1883      	adds	r3, r0, r2
1a0018be:	6919      	ldr	r1, [r3, #16]
1a0018c0:	5880      	ldr	r0, [r0, r2]
1a0018c2:	f7ff ff1f 	bl	1a001704 <handleMasterXferState>
1a0018c6:	b940      	cbnz	r0, 1a0018da <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a0018c8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a0018cc:	009a      	lsls	r2, r3, #2
1a0018ce:	4b03      	ldr	r3, [pc, #12]	; (1a0018dc <Chip_I2C_MasterStateHandler+0x2c>)
1a0018d0:	4413      	add	r3, r2
1a0018d2:	689b      	ldr	r3, [r3, #8]
1a0018d4:	2102      	movs	r1, #2
1a0018d6:	4620      	mov	r0, r4
1a0018d8:	4798      	blx	r3
	}
}
1a0018da:	bd10      	pop	{r4, pc}
1a0018dc:	10000004 	.word	0x10000004

1a0018e0 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a0018e0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0018e4:	0083      	lsls	r3, r0, #2
1a0018e6:	4a03      	ldr	r2, [pc, #12]	; (1a0018f4 <Chip_I2C_IsStateChanged+0x14>)
1a0018e8:	58d3      	ldr	r3, [r2, r3]
1a0018ea:	6818      	ldr	r0, [r3, #0]
}
1a0018ec:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a0018f0:	4770      	bx	lr
1a0018f2:	bf00      	nop
1a0018f4:	10000004 	.word	0x10000004

1a0018f8 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a0018f8:	2901      	cmp	r1, #1
1a0018fa:	d115      	bne.n	1a001928 <Chip_I2C_EventHandlerPolling+0x30>
{
1a0018fc:	b538      	push	{r3, r4, r5, lr}
1a0018fe:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a001900:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001904:	009a      	lsls	r2, r3, #2
1a001906:	4b09      	ldr	r3, [pc, #36]	; (1a00192c <Chip_I2C_EventHandlerPolling+0x34>)
1a001908:	4413      	add	r3, r2
1a00190a:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a00190c:	7d2b      	ldrb	r3, [r5, #20]
1a00190e:	b2db      	uxtb	r3, r3
1a001910:	2b04      	cmp	r3, #4
1a001912:	d108      	bne.n	1a001926 <Chip_I2C_EventHandlerPolling+0x2e>
		if (Chip_I2C_IsStateChanged(id)) {
1a001914:	4620      	mov	r0, r4
1a001916:	f7ff ffe3 	bl	1a0018e0 <Chip_I2C_IsStateChanged>
1a00191a:	2800      	cmp	r0, #0
1a00191c:	d0f6      	beq.n	1a00190c <Chip_I2C_EventHandlerPolling+0x14>
			Chip_I2C_MasterStateHandler(id);
1a00191e:	4620      	mov	r0, r4
1a001920:	f7ff ffc6 	bl	1a0018b0 <Chip_I2C_MasterStateHandler>
1a001924:	e7f2      	b.n	1a00190c <Chip_I2C_EventHandlerPolling+0x14>
}
1a001926:	bd38      	pop	{r3, r4, r5, pc}
1a001928:	4770      	bx	lr
1a00192a:	bf00      	nop
1a00192c:	10000004 	.word	0x10000004

1a001930 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001930:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001932:	4a0b      	ldr	r2, [pc, #44]	; (1a001960 <SystemInit+0x30>)
1a001934:	4b0b      	ldr	r3, [pc, #44]	; (1a001964 <SystemInit+0x34>)
1a001936:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001938:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a00193c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00193e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001942:	2b20      	cmp	r3, #32
1a001944:	d004      	beq.n	1a001950 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a001946:	f7ff f945 	bl	1a000bd4 <Board_SystemInit>
   Board_Init();
1a00194a:	f7ff f8d5 	bl	1a000af8 <Board_Init>
}
1a00194e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001950:	4a04      	ldr	r2, [pc, #16]	; (1a001964 <SystemInit+0x34>)
1a001952:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00195a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00195e:	e7f2      	b.n	1a001946 <SystemInit+0x16>
1a001960:	1a000000 	.word	0x1a000000
1a001964:	e000ed00 	.word	0xe000ed00

1a001968 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001968:	4b04      	ldr	r3, [pc, #16]	; (1a00197c <cyclesCounterInit+0x14>)
1a00196a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a00196c:	4a04      	ldr	r2, [pc, #16]	; (1a001980 <cyclesCounterInit+0x18>)
1a00196e:	6813      	ldr	r3, [r2, #0]
1a001970:	f043 0301 	orr.w	r3, r3, #1
1a001974:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001976:	2001      	movs	r0, #1
1a001978:	4770      	bx	lr
1a00197a:	bf00      	nop
1a00197c:	1000003c 	.word	0x1000003c
1a001980:	e0001000 	.word	0xe0001000

1a001984 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001984:	4b01      	ldr	r3, [pc, #4]	; (1a00198c <tickRead+0x8>)
1a001986:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00198a:	4770      	bx	lr
1a00198c:	10000060 	.word	0x10000060

1a001990 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001990:	b118      	cbz	r0, 1a00199a <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001992:	4b04      	ldr	r3, [pc, #16]	; (1a0019a4 <tickPowerSet+0x14>)
1a001994:	2207      	movs	r2, #7
1a001996:	601a      	str	r2, [r3, #0]
1a001998:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a00199a:	4b02      	ldr	r3, [pc, #8]	; (1a0019a4 <tickPowerSet+0x14>)
1a00199c:	2200      	movs	r2, #0
1a00199e:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a0019a0:	4770      	bx	lr
1a0019a2:	bf00      	nop
1a0019a4:	e000e010 	.word	0xe000e010

1a0019a8 <tickInit>:
{
1a0019a8:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0019aa:	ea50 0401 	orrs.w	r4, r0, r1
1a0019ae:	d02a      	beq.n	1a001a06 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0019b0:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0019b4:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a0019b8:	2b00      	cmp	r3, #0
1a0019ba:	bf08      	it	eq
1a0019bc:	2a32      	cmpeq	r2, #50	; 0x32
1a0019be:	d227      	bcs.n	1a001a10 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0019c0:	4b14      	ldr	r3, [pc, #80]	; (1a001a14 <tickInit+0x6c>)
1a0019c2:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0019c6:	4b14      	ldr	r3, [pc, #80]	; (1a001a18 <tickInit+0x70>)
1a0019c8:	681b      	ldr	r3, [r3, #0]
1a0019ca:	fba3 4500 	umull	r4, r5, r3, r0
1a0019ce:	fb03 5501 	mla	r5, r3, r1, r5
1a0019d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0019d6:	2300      	movs	r3, #0
1a0019d8:	4620      	mov	r0, r4
1a0019da:	4629      	mov	r1, r5
1a0019dc:	f000 fcd8 	bl	1a002390 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0019e0:	3801      	subs	r0, #1
1a0019e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0019e6:	d209      	bcs.n	1a0019fc <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0019e8:	4b0c      	ldr	r3, [pc, #48]	; (1a001a1c <tickInit+0x74>)
1a0019ea:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0019ec:	4a0c      	ldr	r2, [pc, #48]	; (1a001a20 <tickInit+0x78>)
1a0019ee:	21e0      	movs	r1, #224	; 0xe0
1a0019f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0019f4:	2200      	movs	r2, #0
1a0019f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0019f8:	2207      	movs	r2, #7
1a0019fa:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a0019fc:	2001      	movs	r0, #1
1a0019fe:	f7ff ffc7 	bl	1a001990 <tickPowerSet>
      bool_t ret_val = 1;
1a001a02:	2001      	movs	r0, #1
}
1a001a04:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001a06:	2000      	movs	r0, #0
1a001a08:	f7ff ffc2 	bl	1a001990 <tickPowerSet>
         ret_val = 0;
1a001a0c:	2000      	movs	r0, #0
1a001a0e:	e7f9      	b.n	1a001a04 <tickInit+0x5c>
            ret_val = 0;
1a001a10:	2000      	movs	r0, #0
1a001a12:	e7f7      	b.n	1a001a04 <tickInit+0x5c>
1a001a14:	10000040 	.word	0x10000040
1a001a18:	10000084 	.word	0x10000084
1a001a1c:	e000e010 	.word	0xe000e010
1a001a20:	e000ed00 	.word	0xe000ed00

1a001a24 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001a24:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001a26:	4a07      	ldr	r2, [pc, #28]	; (1a001a44 <SysTick_Handler+0x20>)
1a001a28:	6813      	ldr	r3, [r2, #0]
1a001a2a:	6851      	ldr	r1, [r2, #4]
1a001a2c:	3301      	adds	r3, #1
1a001a2e:	f141 0100 	adc.w	r1, r1, #0
1a001a32:	6013      	str	r3, [r2, #0]
1a001a34:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001a36:	4b04      	ldr	r3, [pc, #16]	; (1a001a48 <SysTick_Handler+0x24>)
1a001a38:	681b      	ldr	r3, [r3, #0]
1a001a3a:	b113      	cbz	r3, 1a001a42 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a001a3c:	4a03      	ldr	r2, [pc, #12]	; (1a001a4c <SysTick_Handler+0x28>)
1a001a3e:	6810      	ldr	r0, [r2, #0]
1a001a40:	4798      	blx	r3
   }
}
1a001a42:	bd08      	pop	{r3, pc}
1a001a44:	10000060 	.word	0x10000060
1a001a48:	10000068 	.word	0x10000068
1a001a4c:	1000005c 	.word	0x1000005c

1a001a50 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a001a50:	b538      	push	{r3, r4, r5, lr}
1a001a52:	4604      	mov	r4, r0
1a001a54:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001a56:	4b08      	ldr	r3, [pc, #32]	; (1a001a78 <i2cHardwareInit+0x28>)
1a001a58:	f640 0208 	movw	r2, #2056	; 0x808
1a001a5c:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a001a60:	f7ff fee0 	bl	1a001824 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a001a64:	4629      	mov	r1, r5
1a001a66:	4620      	mov	r0, r4
1a001a68:	f7ff feee 	bl	1a001848 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a001a6c:	4903      	ldr	r1, [pc, #12]	; (1a001a7c <i2cHardwareInit+0x2c>)
1a001a6e:	4620      	mov	r0, r4
1a001a70:	f7ff ff06 	bl	1a001880 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a001a74:	2001      	movs	r0, #1
1a001a76:	bd38      	pop	{r3, r4, r5, pc}
1a001a78:	40086000 	.word	0x40086000
1a001a7c:	1a0018f9 	.word	0x1a0018f9

1a001a80 <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a001a80:	b108      	cbz	r0, 1a001a86 <i2cHardwareWrite+0x6>
      return FALSE;
1a001a82:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a001a84:	4770      	bx	lr
{
1a001a86:	b500      	push	{lr}
1a001a88:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a001a8a:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a001a8e:	2100      	movs	r1, #0
1a001a90:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a001a94:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a001a98:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a001a9a:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a001a9e:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a001aa0:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001aa4:	4669      	mov	r1, sp
1a001aa6:	4805      	ldr	r0, [pc, #20]	; (1a001abc <i2cHardwareWrite+0x3c>)
1a001aa8:	f7ff fd03 	bl	1a0014b2 <Chip_I2CM_XferBlocking>
1a001aac:	b118      	cbz	r0, 1a001ab6 <i2cHardwareWrite+0x36>
   return TRUE;
1a001aae:	2001      	movs	r0, #1
}
1a001ab0:	b005      	add	sp, #20
1a001ab2:	f85d fb04 	ldr.w	pc, [sp], #4
      return FALSE;
1a001ab6:	2000      	movs	r0, #0
1a001ab8:	e7fa      	b.n	1a001ab0 <i2cHardwareWrite+0x30>
1a001aba:	bf00      	nop
1a001abc:	400a1000 	.word	0x400a1000

1a001ac0 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001ac0:	b108      	cbz	r0, 1a001ac6 <i2cInit+0x6>
      return FALSE;
1a001ac2:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a001ac4:	4770      	bx	lr
{
1a001ac6:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a001ac8:	f7ff ffc2 	bl	1a001a50 <i2cHardwareInit>
}
1a001acc:	bd08      	pop	{r3, pc}

1a001ace <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001ace:	b108      	cbz	r0, 1a001ad4 <i2cWrite+0x6>
      return FALSE;
1a001ad0:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a001ad2:	4770      	bx	lr
{
1a001ad4:	b510      	push	{r4, lr}
1a001ad6:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a001ad8:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a001adc:	9400      	str	r4, [sp, #0]
1a001ade:	f7ff ffcf 	bl	1a001a80 <i2cHardwareWrite>
}
1a001ae2:	b002      	add	sp, #8
1a001ae4:	bd10      	pop	{r4, pc}
1a001ae6:	Address 0x000000001a001ae6 is out of bounds.


1a001ae8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001ae8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001aea:	4d0b      	ldr	r5, [pc, #44]	; (1a001b18 <gpioObtainPinInit+0x30>)
1a001aec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001af0:	182c      	adds	r4, r5, r0
1a001af2:	5628      	ldrsb	r0, [r5, r0]
1a001af4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001af6:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001afa:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001afc:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001b00:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001b02:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001b06:	9b02      	ldr	r3, [sp, #8]
1a001b08:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001b0a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001b0e:	9b03      	ldr	r3, [sp, #12]
1a001b10:	701a      	strb	r2, [r3, #0]
}
1a001b12:	bc30      	pop	{r4, r5}
1a001b14:	4770      	bx	lr
1a001b16:	bf00      	nop
1a001b18:	1a002928 	.word	0x1a002928

1a001b1c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001b1c:	f110 0f02 	cmn.w	r0, #2
1a001b20:	f000 80c7 	beq.w	1a001cb2 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a001b24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001b28:	f000 80c5 	beq.w	1a001cb6 <gpioInit+0x19a>
{
1a001b2c:	b570      	push	{r4, r5, r6, lr}
1a001b2e:	b084      	sub	sp, #16
1a001b30:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001b32:	2300      	movs	r3, #0
1a001b34:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001b38:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001b3c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001b40:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001b44:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001b48:	f10d 030b 	add.w	r3, sp, #11
1a001b4c:	9301      	str	r3, [sp, #4]
1a001b4e:	ab03      	add	r3, sp, #12
1a001b50:	9300      	str	r3, [sp, #0]
1a001b52:	f10d 030d 	add.w	r3, sp, #13
1a001b56:	f10d 020e 	add.w	r2, sp, #14
1a001b5a:	f10d 010f 	add.w	r1, sp, #15
1a001b5e:	f7ff ffc3 	bl	1a001ae8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001b62:	2c05      	cmp	r4, #5
1a001b64:	f200 80a9 	bhi.w	1a001cba <gpioInit+0x19e>
1a001b68:	e8df f004 	tbb	[pc, r4]
1a001b6c:	45278109 	.word	0x45278109
1a001b70:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001b72:	4853      	ldr	r0, [pc, #332]	; (1a001cc0 <gpioInit+0x1a4>)
1a001b74:	f7ff fcaf 	bl	1a0014d6 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001b78:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001b7a:	b004      	add	sp, #16
1a001b7c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001b7e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001b82:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001b86:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001b8a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001b8e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001b92:	494c      	ldr	r1, [pc, #304]	; (1a001cc4 <gpioInit+0x1a8>)
1a001b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001b98:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001b9c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001ba0:	2001      	movs	r0, #1
1a001ba2:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001ba6:	4c46      	ldr	r4, [pc, #280]	; (1a001cc0 <gpioInit+0x1a4>)
1a001ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001bac:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001bb0:	ea22 0201 	bic.w	r2, r2, r1
1a001bb4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001bb8:	e7df      	b.n	1a001b7a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001bba:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001bbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001bc2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001bc6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001bca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001bce:	493d      	ldr	r1, [pc, #244]	; (1a001cc4 <gpioInit+0x1a8>)
1a001bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001bd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001bd8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001bdc:	2001      	movs	r0, #1
1a001bde:	fa00 f102 	lsl.w	r1, r0, r2
1a001be2:	4c37      	ldr	r4, [pc, #220]	; (1a001cc0 <gpioInit+0x1a4>)
1a001be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001be8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001bec:	ea22 0201 	bic.w	r2, r2, r1
1a001bf0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001bf4:	e7c1      	b.n	1a001b7a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001bf6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001bfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001bfe:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c02:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001c06:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c0a:	492e      	ldr	r1, [pc, #184]	; (1a001cc4 <gpioInit+0x1a8>)
1a001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001c10:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c14:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c18:	2001      	movs	r0, #1
1a001c1a:	fa00 f102 	lsl.w	r1, r0, r2
1a001c1e:	4c28      	ldr	r4, [pc, #160]	; (1a001cc0 <gpioInit+0x1a4>)
1a001c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c24:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001c28:	ea22 0201 	bic.w	r2, r2, r1
1a001c2c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001c30:	e7a3      	b.n	1a001b7a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001c32:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001c36:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001c3a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c3e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001c42:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c46:	491f      	ldr	r1, [pc, #124]	; (1a001cc4 <gpioInit+0x1a8>)
1a001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001c4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001c50:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c54:	2001      	movs	r0, #1
1a001c56:	fa00 f102 	lsl.w	r1, r0, r2
1a001c5a:	4c19      	ldr	r4, [pc, #100]	; (1a001cc0 <gpioInit+0x1a4>)
1a001c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001c60:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001c64:	ea22 0201 	bic.w	r2, r2, r1
1a001c68:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001c6c:	e785      	b.n	1a001b7a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001c6e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001c72:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001c76:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001c7a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001c7e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001c82:	4910      	ldr	r1, [pc, #64]	; (1a001cc4 <gpioInit+0x1a8>)
1a001c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001c88:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001c8c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001c90:	2001      	movs	r0, #1
1a001c92:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001c96:	4b0a      	ldr	r3, [pc, #40]	; (1a001cc0 <gpioInit+0x1a4>)
1a001c98:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001c9c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001ca0:	4331      	orrs	r1, r6
1a001ca2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001ca6:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001ca8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001cac:	2100      	movs	r1, #0
1a001cae:	5499      	strb	r1, [r3, r2]
1a001cb0:	e763      	b.n	1a001b7a <gpioInit+0x5e>
	  return FALSE;
1a001cb2:	2000      	movs	r0, #0
1a001cb4:	4770      	bx	lr
	  return FALSE;
1a001cb6:	2000      	movs	r0, #0
}
1a001cb8:	4770      	bx	lr
      ret_val = 0;
1a001cba:	2000      	movs	r0, #0
1a001cbc:	e75d      	b.n	1a001b7a <gpioInit+0x5e>
1a001cbe:	bf00      	nop
1a001cc0:	400f4000 	.word	0x400f4000
1a001cc4:	40086000 	.word	0x40086000

1a001cc8 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001cc8:	f110 0f02 	cmn.w	r0, #2
1a001ccc:	d02d      	beq.n	1a001d2a <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a001cce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001cd2:	d02c      	beq.n	1a001d2e <gpioWrite+0x66>
{
1a001cd4:	b510      	push	{r4, lr}
1a001cd6:	b084      	sub	sp, #16
1a001cd8:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001cda:	2300      	movs	r3, #0
1a001cdc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001ce0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001ce4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001ce8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001cec:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001cf0:	f10d 030b 	add.w	r3, sp, #11
1a001cf4:	9301      	str	r3, [sp, #4]
1a001cf6:	ab03      	add	r3, sp, #12
1a001cf8:	9300      	str	r3, [sp, #0]
1a001cfa:	f10d 030d 	add.w	r3, sp, #13
1a001cfe:	f10d 020e 	add.w	r2, sp, #14
1a001d02:	f10d 010f 	add.w	r1, sp, #15
1a001d06:	f7ff feef 	bl	1a001ae8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001d0a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001d0e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001d12:	1c21      	adds	r1, r4, #0
1a001d14:	bf18      	it	ne
1a001d16:	2101      	movne	r1, #1
1a001d18:	015b      	lsls	r3, r3, #5
1a001d1a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001d1e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001d22:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a001d24:	2001      	movs	r0, #1
}
1a001d26:	b004      	add	sp, #16
1a001d28:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001d2a:	2000      	movs	r0, #0
1a001d2c:	4770      	bx	lr
	  return FALSE;
1a001d2e:	2000      	movs	r0, #0
}
1a001d30:	4770      	bx	lr

1a001d32 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a001d32:	f110 0f02 	cmn.w	r0, #2
1a001d36:	d02c      	beq.n	1a001d92 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a001d38:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001d3c:	d02b      	beq.n	1a001d96 <gpioRead+0x64>
{
1a001d3e:	b500      	push	{lr}
1a001d40:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a001d42:	2300      	movs	r3, #0
1a001d44:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001d48:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001d4c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001d50:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001d54:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001d58:	f10d 030b 	add.w	r3, sp, #11
1a001d5c:	9301      	str	r3, [sp, #4]
1a001d5e:	ab03      	add	r3, sp, #12
1a001d60:	9300      	str	r3, [sp, #0]
1a001d62:	f10d 030d 	add.w	r3, sp, #13
1a001d66:	f10d 020e 	add.w	r2, sp, #14
1a001d6a:	f10d 010f 	add.w	r1, sp, #15
1a001d6e:	f7ff febb 	bl	1a001ae8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a001d72:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a001d76:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001d7a:	015b      	lsls	r3, r3, #5
1a001d7c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001d80:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001d84:	5c98      	ldrb	r0, [r3, r2]
1a001d86:	3000      	adds	r0, #0
1a001d88:	bf18      	it	ne
1a001d8a:	2001      	movne	r0, #1

   return ret_val;
}
1a001d8c:	b005      	add	sp, #20
1a001d8e:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a001d92:	2001      	movs	r0, #1
1a001d94:	4770      	bx	lr
      return FALSE;
1a001d96:	2000      	movs	r0, #0
}
1a001d98:	4770      	bx	lr
1a001d9a:	Address 0x000000001a001d9a is out of bounds.


1a001d9c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001d9c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001d9e:	4b04      	ldr	r3, [pc, #16]	; (1a001db0 <USB0_IRQHandler+0x14>)
1a001da0:	681b      	ldr	r3, [r3, #0]
1a001da2:	681b      	ldr	r3, [r3, #0]
1a001da4:	68db      	ldr	r3, [r3, #12]
1a001da6:	4a03      	ldr	r2, [pc, #12]	; (1a001db4 <USB0_IRQHandler+0x18>)
1a001da8:	6810      	ldr	r0, [r2, #0]
1a001daa:	4798      	blx	r3
}
1a001dac:	bd08      	pop	{r3, pc}
1a001dae:	bf00      	nop
1a001db0:	10000088 	.word	0x10000088
1a001db4:	1000006c 	.word	0x1000006c

1a001db8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001db8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001dba:	f7ff fae9 	bl	1a001390 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001dbe:	4b1a      	ldr	r3, [pc, #104]	; (1a001e28 <boardInit+0x70>)
1a001dc0:	6818      	ldr	r0, [r3, #0]
1a001dc2:	f7ff fdd1 	bl	1a001968 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001dc6:	2001      	movs	r0, #1
1a001dc8:	2100      	movs	r1, #0
1a001dca:	f7ff fded 	bl	1a0019a8 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001dce:	2105      	movs	r1, #5
1a001dd0:	2000      	movs	r0, #0
1a001dd2:	f7ff fea3 	bl	1a001b1c <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001dd6:	2100      	movs	r1, #0
1a001dd8:	2024      	movs	r0, #36	; 0x24
1a001dda:	f7ff fe9f 	bl	1a001b1c <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001dde:	2100      	movs	r1, #0
1a001de0:	2025      	movs	r0, #37	; 0x25
1a001de2:	f7ff fe9b 	bl	1a001b1c <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001de6:	2100      	movs	r1, #0
1a001de8:	2026      	movs	r0, #38	; 0x26
1a001dea:	f7ff fe97 	bl	1a001b1c <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001dee:	2100      	movs	r1, #0
1a001df0:	2027      	movs	r0, #39	; 0x27
1a001df2:	f7ff fe93 	bl	1a001b1c <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001df6:	2101      	movs	r1, #1
1a001df8:	2028      	movs	r0, #40	; 0x28
1a001dfa:	f7ff fe8f 	bl	1a001b1c <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001dfe:	2101      	movs	r1, #1
1a001e00:	2029      	movs	r0, #41	; 0x29
1a001e02:	f7ff fe8b 	bl	1a001b1c <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001e06:	2101      	movs	r1, #1
1a001e08:	202a      	movs	r0, #42	; 0x2a
1a001e0a:	f7ff fe87 	bl	1a001b1c <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001e0e:	2101      	movs	r1, #1
1a001e10:	202b      	movs	r0, #43	; 0x2b
1a001e12:	f7ff fe83 	bl	1a001b1c <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001e16:	2101      	movs	r1, #1
1a001e18:	202c      	movs	r0, #44	; 0x2c
1a001e1a:	f7ff fe7f 	bl	1a001b1c <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001e1e:	2101      	movs	r1, #1
1a001e20:	202d      	movs	r0, #45	; 0x2d
1a001e22:	f7ff fe7b 	bl	1a001b1c <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001e26:	bd08      	pop	{r3, pc}
1a001e28:	10000084 	.word	0x10000084

1a001e2c <delayInaccurateMs>:
/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurateMs(tick_t delay_ms)
{
1a001e2c:	b4f0      	push	{r4, r5, r6, r7}
1a001e2e:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;
   delay = INACCURATE_TO_MS * delay_ms;
1a001e30:	ea4f 0c81 	mov.w	ip, r1, lsl #2
1a001e34:	0083      	lsls	r3, r0, #2
1a001e36:	ea4c 7290 	orr.w	r2, ip, r0, lsr #30
1a001e3a:	181b      	adds	r3, r3, r0
1a001e3c:	eb41 0202 	adc.w	r2, r1, r2
1a001e40:	0211      	lsls	r1, r2, #8
1a001e42:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
1a001e46:	0218      	lsls	r0, r3, #8
1a001e48:	1ac6      	subs	r6, r0, r3
1a001e4a:	eb61 0702 	sbc.w	r7, r1, r2
1a001e4e:	013b      	lsls	r3, r7, #4
1a001e50:	ea43 7316 	orr.w	r3, r3, r6, lsr #28
1a001e54:	0132      	lsls	r2, r6, #4
1a001e56:	4616      	mov	r6, r2
1a001e58:	461f      	mov	r7, r3
1a001e5a:	e9cd 6700 	strd	r6, r7, [sp]
   for( i=delay; i>0; i-- );
1a001e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
1a001e62:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a001e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001e6a:	4313      	orrs	r3, r2
1a001e6c:	d008      	beq.n	1a001e80 <delayInaccurateMs+0x54>
1a001e6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001e72:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a001e76:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a001e7a:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a001e7e:	e7f2      	b.n	1a001e66 <delayInaccurateMs+0x3a>
}
1a001e80:	b004      	add	sp, #16
1a001e82:	bcf0      	pop	{r4, r5, r6, r7}
1a001e84:	4770      	bx	lr

1a001e86 <delayInaccurateUs>:

void delayInaccurateUs( tick_t delay_us )
{
1a001e86:	b530      	push	{r4, r5, lr}
1a001e88:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;
   delay = (INACCURATE_TO_US_x10 * delay_us) / 10;
1a001e8a:	1803      	adds	r3, r0, r0
1a001e8c:	eb41 0201 	adc.w	r2, r1, r1
1a001e90:	1818      	adds	r0, r3, r0
1a001e92:	eb42 0101 	adc.w	r1, r2, r1
1a001e96:	010b      	lsls	r3, r1, #4
1a001e98:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
1a001e9c:	0102      	lsls	r2, r0, #4
1a001e9e:	1880      	adds	r0, r0, r2
1a001ea0:	eb43 0101 	adc.w	r1, r3, r1
1a001ea4:	008b      	lsls	r3, r1, #2
1a001ea6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
1a001eaa:	0082      	lsls	r2, r0, #2
1a001eac:	4610      	mov	r0, r2
1a001eae:	4619      	mov	r1, r3
1a001eb0:	220a      	movs	r2, #10
1a001eb2:	2300      	movs	r3, #0
1a001eb4:	f000 fa6c 	bl	1a002390 <__aeabi_uldivmod>
1a001eb8:	e9cd 0100 	strd	r0, r1, [sp]
   for( i=delay; i>0; i-- );
1a001ebc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a001ec0:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a001ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001ec8:	4313      	orrs	r3, r2
1a001eca:	d008      	beq.n	1a001ede <delayInaccurateUs+0x58>
1a001ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001ed0:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
1a001ed4:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
1a001ed8:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a001edc:	e7f2      	b.n	1a001ec4 <delayInaccurateUs+0x3e>
}
1a001ede:	b005      	add	sp, #20
1a001ee0:	bd30      	pop	{r4, r5, pc}
1a001ee2:	Address 0x000000001a001ee2 is out of bounds.


1a001ee4 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a001ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001ee8:	4680      	mov	r8, r0
1a001eea:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001eec:	f7ff fd4a 	bl	1a001984 <tickRead>
1a001ef0:	4606      	mov	r6, r0
1a001ef2:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a001ef4:	f7ff fd46 	bl	1a001984 <tickRead>
1a001ef8:	1b84      	subs	r4, r0, r6
1a001efa:	eb61 0507 	sbc.w	r5, r1, r7
1a001efe:	4b06      	ldr	r3, [pc, #24]	; (1a001f18 <delay+0x34>)
1a001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001f04:	4640      	mov	r0, r8
1a001f06:	4649      	mov	r1, r9
1a001f08:	f000 fa42 	bl	1a002390 <__aeabi_uldivmod>
1a001f0c:	428d      	cmp	r5, r1
1a001f0e:	bf08      	it	eq
1a001f10:	4284      	cmpeq	r4, r0
1a001f12:	d3ef      	bcc.n	1a001ef4 <delay+0x10>
}
1a001f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001f18:	10000040 	.word	0x10000040

1a001f1c <int64ToString>:
/*==================[external functions definition]==========================*/

// C++ version 0.4 char* style "itoa"
// Modified by Eric Pernia.
bool_t int64ToString( int64_t value, char* result, uint8_t base )
{
1a001f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001f20:	4614      	mov	r4, r2
1a001f22:	469a      	mov	sl, r3
   // check that the base if valid
   if( base < 2 || base > 36 ) {
1a001f24:	3b02      	subs	r3, #2
1a001f26:	b2db      	uxtb	r3, r3
1a001f28:	2b22      	cmp	r3, #34	; 0x22
1a001f2a:	d803      	bhi.n	1a001f34 <int64ToString+0x18>
1a001f2c:	4606      	mov	r6, r0
1a001f2e:	460f      	mov	r7, r1
      *result = '\0';
      return FALSE;
   }

   char* ptr = result, *ptr1 = result, tmp_char;
1a001f30:	4615      	mov	r5, r2
1a001f32:	e005      	b.n	1a001f40 <int64ToString+0x24>
      *result = '\0';
1a001f34:	2000      	movs	r0, #0
1a001f36:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a001f38:	e02f      	b.n	1a001f9a <int64ToString+0x7e>
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a001f3a:	461d      	mov	r5, r3
      value /= (int64_t)base;
1a001f3c:	4606      	mov	r6, r0
1a001f3e:	460f      	mov	r7, r1
1a001f40:	fa5f f88a 	uxtb.w	r8, sl
1a001f44:	f04f 0900 	mov.w	r9, #0
1a001f48:	4642      	mov	r2, r8
1a001f4a:	464b      	mov	r3, r9
1a001f4c:	4630      	mov	r0, r6
1a001f4e:	4639      	mov	r1, r7
1a001f50:	f000 f9ce 	bl	1a0022f0 <__aeabi_ldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a001f54:	fba8 2300 	umull	r2, r3, r8, r0
1a001f58:	1ab2      	subs	r2, r6, r2
1a001f5a:	3223      	adds	r2, #35	; 0x23
1a001f5c:	462b      	mov	r3, r5
1a001f5e:	f8df c040 	ldr.w	ip, [pc, #64]	; 1a001fa0 <int64ToString+0x84>
1a001f62:	4462      	add	r2, ip
1a001f64:	7812      	ldrb	r2, [r2, #0]
1a001f66:	f803 2b01 	strb.w	r2, [r3], #1
   } while ( value );
1a001f6a:	ea50 0201 	orrs.w	r2, r0, r1
1a001f6e:	d1e4      	bne.n	1a001f3a <int64ToString+0x1e>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a001f70:	2e00      	cmp	r6, #0
1a001f72:	f177 0200 	sbcs.w	r2, r7, #0
1a001f76:	db03      	blt.n	1a001f80 <int64ToString+0x64>
   *ptr-- = '\0';
1a001f78:	2200      	movs	r2, #0
1a001f7a:	f803 2901 	strb.w	r2, [r3], #-1
   while(ptr1 < ptr) {
1a001f7e:	e009      	b.n	1a001f94 <int64ToString+0x78>
   if (tmp_value < 0) *ptr++ = '-';
1a001f80:	222d      	movs	r2, #45	; 0x2d
1a001f82:	701a      	strb	r2, [r3, #0]
1a001f84:	1cab      	adds	r3, r5, #2
1a001f86:	e7f7      	b.n	1a001f78 <int64ToString+0x5c>
      tmp_char = *ptr;
1a001f88:	781a      	ldrb	r2, [r3, #0]
      *ptr--= *ptr1;
1a001f8a:	7821      	ldrb	r1, [r4, #0]
1a001f8c:	f803 1901 	strb.w	r1, [r3], #-1
      *ptr1++ = tmp_char;
1a001f90:	f804 2b01 	strb.w	r2, [r4], #1
   while(ptr1 < ptr) {
1a001f94:	42a3      	cmp	r3, r4
1a001f96:	d8f7      	bhi.n	1a001f88 <int64ToString+0x6c>
   }
   return TRUE;
1a001f98:	2001      	movs	r0, #1
}
1a001f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001f9e:	bf00      	nop
1a001fa0:	1a002a10 	.word	0x1a002a10

1a001fa4 <intToStringGlobal>:
   return value;
}

// Funcion no reentrante. Cuidado con el RTOS!!!
char* intToStringGlobal( int64_t value )
{
1a001fa4:	b508      	push	{r3, lr}
   if( value == 0 ) {
1a001fa6:	ea50 0301 	orrs.w	r3, r0, r1
1a001faa:	d106      	bne.n	1a001fba <intToStringGlobal+0x16>
      globalStrConvertBuff[0] = '0';
1a001fac:	4b06      	ldr	r3, [pc, #24]	; (1a001fc8 <intToStringGlobal+0x24>)
1a001fae:	2230      	movs	r2, #48	; 0x30
1a001fb0:	701a      	strb	r2, [r3, #0]
      globalStrConvertBuff[1] = 0;
1a001fb2:	2200      	movs	r2, #0
1a001fb4:	705a      	strb	r2, [r3, #1]
   } else {
      globalStrConvertBuff[0] = 0;
      int64ToString( value, globalStrConvertBuff, 10 );
   }
   return globalStrConvertBuff;
}
1a001fb6:	4804      	ldr	r0, [pc, #16]	; (1a001fc8 <intToStringGlobal+0x24>)
1a001fb8:	bd08      	pop	{r3, pc}
      globalStrConvertBuff[0] = 0;
1a001fba:	4a03      	ldr	r2, [pc, #12]	; (1a001fc8 <intToStringGlobal+0x24>)
1a001fbc:	2300      	movs	r3, #0
1a001fbe:	7013      	strb	r3, [r2, #0]
      int64ToString( value, globalStrConvertBuff, 10 );
1a001fc0:	230a      	movs	r3, #10
1a001fc2:	f7ff ffab 	bl	1a001f1c <int64ToString>
1a001fc6:	e7f6      	b.n	1a001fb6 <intToStringGlobal+0x12>
1a001fc8:	1000008c 	.word	0x1000008c

1a001fcc <pcf8574TGpioPortWrite>:
   pcf8574TGpioPortDirections = directions;
   i2cWrite( I2C0, pcf8574TI2cAddress, &directions, 1, TRUE );
}

static void pcf8574TGpioPortWrite( uint8_t portValue )
{
1a001fcc:	b500      	push	{lr}
1a001fce:	b085      	sub	sp, #20
   pcf8574TGpioPortValue = portValue;
1a001fd0:	4b09      	ldr	r3, [pc, #36]	; (1a001ff8 <pcf8574TGpioPortWrite+0x2c>)
1a001fd2:	7018      	strb	r0, [r3, #0]
   // Or with pcf8574TGpioPortDirections to keep pins initialized as inputs
   uint8_t transmitDataBuffer = portValue | pcf8574TGpioPortDirections;
1a001fd4:	4b09      	ldr	r3, [pc, #36]	; (1a001ffc <pcf8574TGpioPortWrite+0x30>)
1a001fd6:	781b      	ldrb	r3, [r3, #0]
1a001fd8:	4318      	orrs	r0, r3
1a001fda:	f88d 000f 	strb.w	r0, [sp, #15]
   i2cWrite( I2C0, pcf8574TI2cAddress, &transmitDataBuffer, 1, TRUE );
1a001fde:	2301      	movs	r3, #1
1a001fe0:	9300      	str	r3, [sp, #0]
1a001fe2:	f10d 020f 	add.w	r2, sp, #15
1a001fe6:	4906      	ldr	r1, [pc, #24]	; (1a002000 <pcf8574TGpioPortWrite+0x34>)
1a001fe8:	7809      	ldrb	r1, [r1, #0]
1a001fea:	2000      	movs	r0, #0
1a001fec:	f7ff fd6f 	bl	1a001ace <i2cWrite>
}
1a001ff0:	b005      	add	sp, #20
1a001ff2:	f85d fb04 	ldr.w	pc, [sp], #4
1a001ff6:	bf00      	nop
1a001ff8:	1000007b 	.word	0x1000007b
1a001ffc:	1000007a 	.word	0x1000007a
1a002000:	10000048 	.word	0x10000048

1a002004 <pcf8574TGpioWrite>:
{
   return pcf8574TGpioPortRead() & (1<<pin);
}

static void pcf8574TGpioWrite( pcf8574T_gpio_t pin, bool_t value )
{
1a002004:	b508      	push	{r3, lr}
   uint8_t portValue = pcf8574TGpioPortValue;
1a002006:	4b08      	ldr	r3, [pc, #32]	; (1a002028 <pcf8574TGpioWrite+0x24>)
1a002008:	781b      	ldrb	r3, [r3, #0]
   if( value ) {
1a00200a:	b139      	cbz	r1, 1a00201c <pcf8574TGpioWrite+0x18>
      portValue |= (1<<pin);
1a00200c:	2201      	movs	r2, #1
1a00200e:	fa02 f000 	lsl.w	r0, r2, r0
1a002012:	4303      	orrs	r3, r0
1a002014:	b2d8      	uxtb	r0, r3
   } else {
      portValue &= ~(1<<pin);
   }
   pcf8574TGpioPortWrite( portValue );
1a002016:	f7ff ffd9 	bl	1a001fcc <pcf8574TGpioPortWrite>
}
1a00201a:	bd08      	pop	{r3, pc}
      portValue &= ~(1<<pin);
1a00201c:	2101      	movs	r1, #1
1a00201e:	fa01 f000 	lsl.w	r0, r1, r0
1a002022:	ea23 0000 	bic.w	r0, r3, r0
1a002026:	e7f6      	b.n	1a002016 <pcf8574TGpioWrite+0x12>
1a002028:	1000007b 	.word	0x1000007b

1a00202c <lcdPinSet>:



static void lcdPinSet( uint8_t pin, bool_t status )
{
1a00202c:	b508      	push	{r3, lr}
#ifdef LCD_HD44780_I2C_PCF8574T
   pcf8574TGpioWrite( pin, status );
1a00202e:	f7ff ffe9 	bl	1a002004 <pcf8574TGpioWrite>
#else
   gpioWrite( pin, status );
#endif
}
1a002032:	bd08      	pop	{r3, pc}

1a002034 <lcdSendNibble>:
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
   //lcdDelay_us(50); // commands need > 37us to settle
}

static void lcdSendNibble( uint8_t nibble )
{
1a002034:	b510      	push	{r4, lr}
1a002036:	4604      	mov	r4, r0
   lcdPinSet( LCD_HD44780_D7, ( nibble & 0x80 ) );
1a002038:	f000 0180 	and.w	r1, r0, #128	; 0x80
1a00203c:	2007      	movs	r0, #7
1a00203e:	f7ff fff5 	bl	1a00202c <lcdPinSet>
   lcdPinSet( LCD_HD44780_D6, ( nibble & 0x40 ) );
1a002042:	f004 0140 	and.w	r1, r4, #64	; 0x40
1a002046:	2006      	movs	r0, #6
1a002048:	f7ff fff0 	bl	1a00202c <lcdPinSet>
   lcdPinSet( LCD_HD44780_D5, ( nibble & 0x20 ) );
1a00204c:	f004 0120 	and.w	r1, r4, #32
1a002050:	2005      	movs	r0, #5
1a002052:	f7ff ffeb 	bl	1a00202c <lcdPinSet>
   lcdPinSet( LCD_HD44780_D4, ( nibble & 0x10 ) );
1a002056:	f004 0110 	and.w	r1, r4, #16
1a00205a:	2004      	movs	r0, #4
1a00205c:	f7ff ffe6 	bl	1a00202c <lcdPinSet>
}
1a002060:	bd10      	pop	{r4, pc}

1a002062 <lcdEnablePulse>:
{
1a002062:	b508      	push	{r3, lr}
   lcdPinSet( LCD_HD44780_EN, ON );       // EN = 1 for H-to-L pulse
1a002064:	2101      	movs	r1, #1
1a002066:	2002      	movs	r0, #2
1a002068:	f7ff ffe0 	bl	1a00202c <lcdPinSet>
   lcdDelay_us( LCD_EN_PULSE_WAIT_US );   // Wait to make EN wider //lcdDelay_us(1);
1a00206c:	2019      	movs	r0, #25
1a00206e:	2100      	movs	r1, #0
1a002070:	f7ff ff09 	bl	1a001e86 <delayInaccurateUs>
   lcdPinSet( LCD_HD44780_EN, OFF );      // EN = 0 for H-to-L pulse
1a002074:	2100      	movs	r1, #0
1a002076:	2002      	movs	r0, #2
1a002078:	f7ff ffd8 	bl	1a00202c <lcdPinSet>
}
1a00207c:	bd08      	pop	{r3, pc}
1a00207e:	Address 0x000000001a00207e is out of bounds.


1a002080 <pcf8574TGpioPortInit>:
{
1a002080:	b500      	push	{lr}
1a002082:	b085      	sub	sp, #20
1a002084:	f88d 000f 	strb.w	r0, [sp, #15]
   pcf8574TGpioPortDirections = directions;
1a002088:	4b06      	ldr	r3, [pc, #24]	; (1a0020a4 <pcf8574TGpioPortInit+0x24>)
1a00208a:	7018      	strb	r0, [r3, #0]
   i2cWrite( I2C0, pcf8574TI2cAddress, &directions, 1, TRUE );
1a00208c:	2301      	movs	r3, #1
1a00208e:	9300      	str	r3, [sp, #0]
1a002090:	f10d 020f 	add.w	r2, sp, #15
1a002094:	4904      	ldr	r1, [pc, #16]	; (1a0020a8 <pcf8574TGpioPortInit+0x28>)
1a002096:	7809      	ldrb	r1, [r1, #0]
1a002098:	2000      	movs	r0, #0
1a00209a:	f7ff fd18 	bl	1a001ace <i2cWrite>
}
1a00209e:	b005      	add	sp, #20
1a0020a0:	f85d fb04 	ldr.w	pc, [sp], #4
1a0020a4:	1000007a 	.word	0x1000007a
1a0020a8:	10000048 	.word	0x10000048

1a0020ac <pcf8574TInit>:
{
1a0020ac:	b508      	push	{r3, lr}
   pcf8574TI2cAddress = i2cAddress;
1a0020ae:	4b04      	ldr	r3, [pc, #16]	; (1a0020c0 <pcf8574TInit+0x14>)
1a0020b0:	7019      	strb	r1, [r3, #0]
   pcf8574TGpioPortInit( 0x00 ); // Init all GPIOs as outputs
1a0020b2:	2000      	movs	r0, #0
1a0020b4:	f7ff ffe4 	bl	1a002080 <pcf8574TGpioPortInit>
   pcf8574TGpioPortWrite( 0x00 ); // Init all as zeros
1a0020b8:	2000      	movs	r0, #0
1a0020ba:	f7ff ff87 	bl	1a001fcc <pcf8574TGpioPortWrite>
}
1a0020be:	bd08      	pop	{r3, pc}
1a0020c0:	10000048 	.word	0x10000048

1a0020c4 <lcdCommand>:

/*==================[definiciones de funciones externas]=====================*/

void lcdCommand( uint8_t cmd )
{
1a0020c4:	b510      	push	{r4, lr}
1a0020c6:	4604      	mov	r4, r0
   lcdSendNibble( cmd & 0xF0 );          // Send high nibble to D7-D4
1a0020c8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a0020cc:	f7ff ffb2 	bl	1a002034 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, OFF );   // RS = 0 for command
1a0020d0:	2100      	movs	r1, #0
1a0020d2:	4608      	mov	r0, r1
1a0020d4:	f7ff ffaa 	bl	1a00202c <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a0020d8:	2100      	movs	r1, #0
1a0020da:	2001      	movs	r0, #1
1a0020dc:	f7ff ffa6 	bl	1a00202c <lcdPinSet>

   lcdEnablePulse();
1a0020e0:	f7ff ffbf 	bl	1a002062 <lcdEnablePulse>
   lcdDelay_us( LCD_LOW_WAIT_US );       // Wait
1a0020e4:	2019      	movs	r0, #25
1a0020e6:	2100      	movs	r1, #0
1a0020e8:	f7ff fecd 	bl	1a001e86 <delayInaccurateUs>

   lcdSendNibble( cmd << 4 );            // Send low nibble to D7-D4
1a0020ec:	0120      	lsls	r0, r4, #4
1a0020ee:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a0020f2:	f7ff ff9f 	bl	1a002034 <lcdSendNibble>
   lcdEnablePulse();
1a0020f6:	f7ff ffb4 	bl	1a002062 <lcdEnablePulse>
}
1a0020fa:	bd10      	pop	{r4, pc}

1a0020fc <lcdData>:

void lcdData( uint8_t data )
{
1a0020fc:	b510      	push	{r4, lr}
1a0020fe:	4604      	mov	r4, r0
   lcdSendNibble( data & 0xF0 );         // Send high nibble to D7-D4
1a002100:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a002104:	f7ff ff96 	bl	1a002034 <lcdSendNibble>

   lcdPinSet( LCD_HD44780_RS, ON );    // RS = 1 for data
1a002108:	2101      	movs	r1, #1
1a00210a:	2000      	movs	r0, #0
1a00210c:	f7ff ff8e 	bl	1a00202c <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );   // RW = 0 for write
1a002110:	2100      	movs	r1, #0
1a002112:	2001      	movs	r0, #1
1a002114:	f7ff ff8a 	bl	1a00202c <lcdPinSet>

   lcdEnablePulse();
1a002118:	f7ff ffa3 	bl	1a002062 <lcdEnablePulse>

   lcdSendNibble( data << 4 );           // Send low nibble to D7-D4
1a00211c:	0120      	lsls	r0, r4, #4
1a00211e:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
1a002122:	f7ff ff87 	bl	1a002034 <lcdSendNibble>
   lcdEnablePulse();
1a002126:	f7ff ff9c 	bl	1a002062 <lcdEnablePulse>
}
1a00212a:	bd10      	pop	{r4, pc}

1a00212c <lcdGoToXY>:
   lcdGoToXY( 0, 0 );
}

void lcdGoToXY( uint8_t x, uint8_t y )
{
   if( x >= lcd.lineWidth || y >= lcd.amountOfLines ) {
1a00212c:	b282      	uxth	r2, r0
1a00212e:	4b11      	ldr	r3, [pc, #68]	; (1a002174 <lcdGoToXY+0x48>)
1a002130:	881b      	ldrh	r3, [r3, #0]
1a002132:	429a      	cmp	r2, r3
1a002134:	d204      	bcs.n	1a002140 <lcdGoToXY+0x14>
1a002136:	b28b      	uxth	r3, r1
1a002138:	4a0e      	ldr	r2, [pc, #56]	; (1a002174 <lcdGoToXY+0x48>)
1a00213a:	8852      	ldrh	r2, [r2, #2]
1a00213c:	4293      	cmp	r3, r2
1a00213e:	d300      	bcc.n	1a002142 <lcdGoToXY+0x16>
1a002140:	4770      	bx	lr
{
1a002142:	b530      	push	{r4, r5, lr}
1a002144:	b083      	sub	sp, #12
1a002146:	460d      	mov	r5, r1
1a002148:	4604      	mov	r4, r0
      return;
   }
   uint8_t firstCharAdress[] = { 0x80, 0xC0, 0x94, 0xD4 };   // See table 12-5
1a00214a:	4b0b      	ldr	r3, [pc, #44]	; (1a002178 <lcdGoToXY+0x4c>)
1a00214c:	681b      	ldr	r3, [r3, #0]
1a00214e:	9301      	str	r3, [sp, #4]
   //lcdCommand( firstCharAdress[ y - 1 ] + x - 1 ); // Start in {x,y} = {1,1}
   lcdCommand( firstCharAdress[y] + x );             // Start in {x,y} = {0,0}
1a002150:	ab02      	add	r3, sp, #8
1a002152:	440b      	add	r3, r1
1a002154:	f813 0c04 	ldrb.w	r0, [r3, #-4]
1a002158:	4420      	add	r0, r4
1a00215a:	b2c0      	uxtb	r0, r0
1a00215c:	f7ff ffb2 	bl	1a0020c4 <lcdCommand>
   lcdDelay_us( LCD_HIGH_WAIT_US );      // Wait
1a002160:	2064      	movs	r0, #100	; 0x64
1a002162:	2100      	movs	r1, #0
1a002164:	f7ff fe8f 	bl	1a001e86 <delayInaccurateUs>
   lcd.x = x;
1a002168:	4b02      	ldr	r3, [pc, #8]	; (1a002174 <lcdGoToXY+0x48>)
1a00216a:	721c      	strb	r4, [r3, #8]
   lcd.y = y;
1a00216c:	725d      	strb	r5, [r3, #9]
}
1a00216e:	b003      	add	sp, #12
1a002170:	bd30      	pop	{r4, r5, pc}
1a002172:	bf00      	nop
1a002174:	10000070 	.word	0x10000070
1a002178:	1a002a58 	.word	0x1a002a58

1a00217c <lcdClear>:

void lcdClear( void )
{
1a00217c:	b508      	push	{r3, lr}
   lcdCommand( 0x01 );                   // Command 0x01 for clear LCD
1a00217e:	2001      	movs	r0, #1
1a002180:	f7ff ffa0 	bl	1a0020c4 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS);    // Wait
1a002184:	2003      	movs	r0, #3
1a002186:	2100      	movs	r1, #0
1a002188:	f7ff fe50 	bl	1a001e2c <delayInaccurateMs>
}
1a00218c:	bd08      	pop	{r3, pc}
1a00218e:	Address 0x000000001a00218e is out of bounds.


1a002190 <lcdInit>:
{
1a002190:	b538      	push	{r3, r4, r5, lr}
   lcd.lineWidth = lineWidth;
1a002192:	4d25      	ldr	r5, [pc, #148]	; (1a002228 <lcdInit+0x98>)
1a002194:	8028      	strh	r0, [r5, #0]
   lcd.amountOfLines = amountOfLines;
1a002196:	8069      	strh	r1, [r5, #2]
   lcd.charWidth = charWidth;
1a002198:	80aa      	strh	r2, [r5, #4]
   lcd.charHeight = charHeight;
1a00219a:	80eb      	strh	r3, [r5, #6]
   lcd.x = 0;
1a00219c:	2400      	movs	r4, #0
1a00219e:	722c      	strb	r4, [r5, #8]
   lcd.y = 0;
1a0021a0:	726c      	strb	r4, [r5, #9]
   pcf8574TInit( I2C0, PCF8574T_I2C_ADDRESS );
1a0021a2:	2127      	movs	r1, #39	; 0x27
1a0021a4:	4620      	mov	r0, r4
1a0021a6:	f7ff ff81 	bl	1a0020ac <pcf8574TInit>
   lcdPinSet( LCD_HD44780_BACKLIGHT, ON );
1a0021aa:	2101      	movs	r1, #1
1a0021ac:	2003      	movs	r0, #3
1a0021ae:	f7ff ff3d 	bl	1a00202c <lcdPinSet>
   lcdPinSet( LCD_HD44780_RW, OFF );     // RW = 0
1a0021b2:	4621      	mov	r1, r4
1a0021b4:	2001      	movs	r0, #1
1a0021b6:	f7ff ff39 	bl	1a00202c <lcdPinSet>
   lcdPinSet( LCD_HD44780_RS, OFF );     // RS = 0
1a0021ba:	4621      	mov	r1, r4
1a0021bc:	4620      	mov	r0, r4
1a0021be:	f7ff ff35 	bl	1a00202c <lcdPinSet>
   lcdPinSet( LCD_HD44780_EN, OFF );     // EN = 0
1a0021c2:	4621      	mov	r1, r4
1a0021c4:	2002      	movs	r0, #2
1a0021c6:	f7ff ff31 	bl	1a00202c <lcdPinSet>
   lcdCommand( 0x33 );                   // Command 0x33 for 4-bit mode
1a0021ca:	2033      	movs	r0, #51	; 0x33
1a0021cc:	f7ff ff7a 	bl	1a0020c4 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a0021d0:	202d      	movs	r0, #45	; 0x2d
1a0021d2:	2100      	movs	r1, #0
1a0021d4:	f7ff fe57 	bl	1a001e86 <delayInaccurateUs>
   lcdCommand( 0x32 );                   // Command 0x32 for 4-bit mode
1a0021d8:	2032      	movs	r0, #50	; 0x32
1a0021da:	f7ff ff73 	bl	1a0020c4 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a0021de:	202d      	movs	r0, #45	; 0x2d
1a0021e0:	2100      	movs	r1, #0
1a0021e2:	f7ff fe50 	bl	1a001e86 <delayInaccurateUs>
   lcdCommand( 0x28 );                   // Command 0x28 for 4-bit mode
1a0021e6:	2028      	movs	r0, #40	; 0x28
1a0021e8:	f7ff ff6c 	bl	1a0020c4 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a0021ec:	202d      	movs	r0, #45	; 0x2d
1a0021ee:	2100      	movs	r1, #0
1a0021f0:	f7ff fe49 	bl	1a001e86 <delayInaccurateUs>
   lcdCommand( 0x0E );                   // Command 0x0E for display on, cursor on
1a0021f4:	200e      	movs	r0, #14
1a0021f6:	f7ff ff65 	bl	1a0020c4 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a0021fa:	202d      	movs	r0, #45	; 0x2d
1a0021fc:	2100      	movs	r1, #0
1a0021fe:	f7ff fe42 	bl	1a001e86 <delayInaccurateUs>
   lcdClear();                           // Command for clear LCD
1a002202:	f7ff ffbb 	bl	1a00217c <lcdClear>
   lcdCommand( 0x06 );                   // Command 0x06 for Shift cursor right
1a002206:	2006      	movs	r0, #6
1a002208:	f7ff ff5c 	bl	1a0020c4 <lcdCommand>
   lcdCommandDelay();                    // Wait
1a00220c:	202d      	movs	r0, #45	; 0x2d
1a00220e:	2100      	movs	r1, #0
1a002210:	f7ff fe39 	bl	1a001e86 <delayInaccurateUs>
   lcdDelay_ms( 1 );                     // Wait
1a002214:	2001      	movs	r0, #1
1a002216:	2100      	movs	r1, #0
1a002218:	f7ff fe08 	bl	1a001e2c <delayInaccurateMs>
   lcdGoToXY( 0, 0 );
1a00221c:	4621      	mov	r1, r4
1a00221e:	4620      	mov	r0, r4
1a002220:	f7ff ff84 	bl	1a00212c <lcdGoToXY>
}
1a002224:	bd38      	pop	{r3, r4, r5, pc}
1a002226:	bf00      	nop
1a002228:	10000070 	.word	0x10000070

1a00222c <lcdCursorSet>:

void lcdCursorSet( LCDCursorModes_t mode )
{
1a00222c:	b508      	push	{r3, lr}
   lcdCommand( 0b00001100 | mode );
1a00222e:	f040 000c 	orr.w	r0, r0, #12
1a002232:	f7ff ff47 	bl	1a0020c4 <lcdCommand>
   lcdDelay_ms(LCD_CLR_DISP_WAIT_MS); // Wait
1a002236:	2003      	movs	r0, #3
1a002238:	2100      	movs	r1, #0
1a00223a:	f7ff fdf7 	bl	1a001e2c <delayInaccurateMs>
}
1a00223e:	bd08      	pop	{r3, pc}

1a002240 <lcdSendStringRaw>:

void lcdSendStringRaw( char* str )
{
1a002240:	b538      	push	{r3, r4, r5, lr}
1a002242:	4605      	mov	r5, r0
   uint8_t i = 0;
1a002244:	2400      	movs	r4, #0
   while( str[i] != 0 ) {
1a002246:	5d28      	ldrb	r0, [r5, r4]
1a002248:	b120      	cbz	r0, 1a002254 <lcdSendStringRaw+0x14>
      lcdData( str[i] );
1a00224a:	f7ff ff57 	bl	1a0020fc <lcdData>
      i++;
1a00224e:	3401      	adds	r4, #1
1a002250:	b2e4      	uxtb	r4, r4
1a002252:	e7f8      	b.n	1a002246 <lcdSendStringRaw+0x6>
   }
}
1a002254:	bd38      	pop	{r3, r4, r5, pc}
1a002256:	Address 0x000000001a002256 is out of bounds.


1a002258 <lcdSendEnter>:
      lcd.x++;
   }
}

void lcdSendEnter( void )
{
1a002258:	b508      	push	{r3, lr}
   // Si llego abajo no hace nada
   if( lcd.y >= lcd.amountOfLines ) {
1a00225a:	4b08      	ldr	r3, [pc, #32]	; (1a00227c <lcdSendEnter+0x24>)
1a00225c:	7a59      	ldrb	r1, [r3, #9]
1a00225e:	b28a      	uxth	r2, r1
1a002260:	885b      	ldrh	r3, [r3, #2]
1a002262:	429a      	cmp	r2, r3
1a002264:	d300      	bcc.n	1a002268 <lcdSendEnter+0x10>
   } else {
      lcd.x = 0;
      lcd.y++;
      lcdGoToXY( lcd.x, lcd.y );
   }
}
1a002266:	bd08      	pop	{r3, pc}
      lcd.x = 0;
1a002268:	4b04      	ldr	r3, [pc, #16]	; (1a00227c <lcdSendEnter+0x24>)
1a00226a:	2000      	movs	r0, #0
1a00226c:	7218      	strb	r0, [r3, #8]
      lcd.y++;
1a00226e:	3101      	adds	r1, #1
1a002270:	b2c9      	uxtb	r1, r1
1a002272:	7259      	strb	r1, [r3, #9]
      lcdGoToXY( lcd.x, lcd.y );
1a002274:	f7ff ff5a 	bl	1a00212c <lcdGoToXY>
1a002278:	e7f5      	b.n	1a002266 <lcdSendEnter+0xe>
1a00227a:	bf00      	nop
1a00227c:	10000070 	.word	0x10000070

1a002280 <lcdSendChar>:
   if( character == '\r' ) {        // Ignore '\r'
1a002280:	280d      	cmp	r0, #13
1a002282:	d016      	beq.n	1a0022b2 <lcdSendChar+0x32>
{
1a002284:	b510      	push	{r4, lr}
1a002286:	4604      	mov	r4, r0
   } else if( character == '\n' ) { // Mando enter
1a002288:	280a      	cmp	r0, #10
1a00228a:	d00c      	beq.n	1a0022a6 <lcdSendChar+0x26>
      if( lcd.x >= lcd.lineWidth ) {
1a00228c:	4b09      	ldr	r3, [pc, #36]	; (1a0022b4 <lcdSendChar+0x34>)
1a00228e:	7a1a      	ldrb	r2, [r3, #8]
1a002290:	881b      	ldrh	r3, [r3, #0]
1a002292:	429a      	cmp	r2, r3
1a002294:	d20a      	bcs.n	1a0022ac <lcdSendChar+0x2c>
      lcdData( character );
1a002296:	4620      	mov	r0, r4
1a002298:	f7ff ff30 	bl	1a0020fc <lcdData>
      lcd.x++;
1a00229c:	4a05      	ldr	r2, [pc, #20]	; (1a0022b4 <lcdSendChar+0x34>)
1a00229e:	7a13      	ldrb	r3, [r2, #8]
1a0022a0:	3301      	adds	r3, #1
1a0022a2:	7213      	strb	r3, [r2, #8]
}
1a0022a4:	bd10      	pop	{r4, pc}
      lcdSendEnter();
1a0022a6:	f7ff ffd7 	bl	1a002258 <lcdSendEnter>
1a0022aa:	e7fb      	b.n	1a0022a4 <lcdSendChar+0x24>
         lcdSendEnter();
1a0022ac:	f7ff ffd4 	bl	1a002258 <lcdSendEnter>
1a0022b0:	e7f1      	b.n	1a002296 <lcdSendChar+0x16>
1a0022b2:	4770      	bx	lr
1a0022b4:	10000070 	.word	0x10000070

1a0022b8 <lcdSendString>:
   lcdSendString( str );
   lcdClearLineFrom( lcd.y, lcd.x );
}

void lcdSendString( char* str )
{
1a0022b8:	b538      	push	{r3, r4, r5, lr}
1a0022ba:	4605      	mov	r5, r0
   uint32_t i = 0;
1a0022bc:	2400      	movs	r4, #0
   while( str[i] != 0 ) {
1a0022be:	5d28      	ldrb	r0, [r5, r4]
1a0022c0:	b118      	cbz	r0, 1a0022ca <lcdSendString+0x12>
      lcdSendChar( str[i] );
1a0022c2:	f7ff ffdd 	bl	1a002280 <lcdSendChar>
      i++;
1a0022c6:	3401      	adds	r4, #1
1a0022c8:	e7f9      	b.n	1a0022be <lcdSendString+0x6>
   }
}
1a0022ca:	bd38      	pop	{r3, r4, r5, pc}

1a0022cc <lcdSendInt>:
   lcdSendStringFormXY( str, x, y );
   lcdClearLineFrom( lcd.y, lcd.x );
}

void lcdSendInt( int64_t value )
{
1a0022cc:	b508      	push	{r3, lr}
   lcdSendString( intToStringGlobal(value) );
1a0022ce:	f7ff fe69 	bl	1a001fa4 <intToStringGlobal>
1a0022d2:	f7ff fff1 	bl	1a0022b8 <lcdSendString>
}
1a0022d6:	bd08      	pop	{r3, pc}

1a0022d8 <lcdSendIntFormXY>:
   lcdSendInt( value );
   lcdClearLineFrom( lcd.y, lcd.x );
}

void lcdSendIntFormXY( int64_t value, uint8_t x, uint8_t y )
{
1a0022d8:	b538      	push	{r3, r4, r5, lr}
1a0022da:	4604      	mov	r4, r0
1a0022dc:	460d      	mov	r5, r1
   lcdGoToXY( x, y );
1a0022de:	4619      	mov	r1, r3
1a0022e0:	4610      	mov	r0, r2
1a0022e2:	f7ff ff23 	bl	1a00212c <lcdGoToXY>
   lcdSendInt( value );
1a0022e6:	4620      	mov	r0, r4
1a0022e8:	4629      	mov	r1, r5
1a0022ea:	f7ff ffef 	bl	1a0022cc <lcdSendInt>
}
1a0022ee:	bd38      	pop	{r3, r4, r5, pc}

1a0022f0 <__aeabi_ldivmod>:
1a0022f0:	b97b      	cbnz	r3, 1a002312 <__aeabi_ldivmod+0x22>
1a0022f2:	b972      	cbnz	r2, 1a002312 <__aeabi_ldivmod+0x22>
1a0022f4:	2900      	cmp	r1, #0
1a0022f6:	bfbe      	ittt	lt
1a0022f8:	2000      	movlt	r0, #0
1a0022fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a0022fe:	e006      	blt.n	1a00230e <__aeabi_ldivmod+0x1e>
1a002300:	bf08      	it	eq
1a002302:	2800      	cmpeq	r0, #0
1a002304:	bf1c      	itt	ne
1a002306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a00230a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00230e:	f000 b9bf 	b.w	1a002690 <__aeabi_idiv0>
1a002312:	f1ad 0c08 	sub.w	ip, sp, #8
1a002316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00231a:	2900      	cmp	r1, #0
1a00231c:	db09      	blt.n	1a002332 <__aeabi_ldivmod+0x42>
1a00231e:	2b00      	cmp	r3, #0
1a002320:	db1a      	blt.n	1a002358 <__aeabi_ldivmod+0x68>
1a002322:	f000 f84d 	bl	1a0023c0 <__udivmoddi4>
1a002326:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00232a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00232e:	b004      	add	sp, #16
1a002330:	4770      	bx	lr
1a002332:	4240      	negs	r0, r0
1a002334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002338:	2b00      	cmp	r3, #0
1a00233a:	db1b      	blt.n	1a002374 <__aeabi_ldivmod+0x84>
1a00233c:	f000 f840 	bl	1a0023c0 <__udivmoddi4>
1a002340:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002348:	b004      	add	sp, #16
1a00234a:	4240      	negs	r0, r0
1a00234c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002350:	4252      	negs	r2, r2
1a002352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002356:	4770      	bx	lr
1a002358:	4252      	negs	r2, r2
1a00235a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00235e:	f000 f82f 	bl	1a0023c0 <__udivmoddi4>
1a002362:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00236a:	b004      	add	sp, #16
1a00236c:	4240      	negs	r0, r0
1a00236e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002372:	4770      	bx	lr
1a002374:	4252      	negs	r2, r2
1a002376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00237a:	f000 f821 	bl	1a0023c0 <__udivmoddi4>
1a00237e:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002386:	b004      	add	sp, #16
1a002388:	4252      	negs	r2, r2
1a00238a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00238e:	4770      	bx	lr

1a002390 <__aeabi_uldivmod>:
1a002390:	b953      	cbnz	r3, 1a0023a8 <__aeabi_uldivmod+0x18>
1a002392:	b94a      	cbnz	r2, 1a0023a8 <__aeabi_uldivmod+0x18>
1a002394:	2900      	cmp	r1, #0
1a002396:	bf08      	it	eq
1a002398:	2800      	cmpeq	r0, #0
1a00239a:	bf1c      	itt	ne
1a00239c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0023a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0023a4:	f000 b974 	b.w	1a002690 <__aeabi_idiv0>
1a0023a8:	f1ad 0c08 	sub.w	ip, sp, #8
1a0023ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0023b0:	f000 f806 	bl	1a0023c0 <__udivmoddi4>
1a0023b4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0023b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0023bc:	b004      	add	sp, #16
1a0023be:	4770      	bx	lr

1a0023c0 <__udivmoddi4>:
1a0023c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0023c4:	9e08      	ldr	r6, [sp, #32]
1a0023c6:	4604      	mov	r4, r0
1a0023c8:	4688      	mov	r8, r1
1a0023ca:	2b00      	cmp	r3, #0
1a0023cc:	f040 8085 	bne.w	1a0024da <__udivmoddi4+0x11a>
1a0023d0:	428a      	cmp	r2, r1
1a0023d2:	4615      	mov	r5, r2
1a0023d4:	d948      	bls.n	1a002468 <__udivmoddi4+0xa8>
1a0023d6:	fab2 f282 	clz	r2, r2
1a0023da:	b14a      	cbz	r2, 1a0023f0 <__udivmoddi4+0x30>
1a0023dc:	f1c2 0720 	rsb	r7, r2, #32
1a0023e0:	fa01 f302 	lsl.w	r3, r1, r2
1a0023e4:	fa20 f707 	lsr.w	r7, r0, r7
1a0023e8:	4095      	lsls	r5, r2
1a0023ea:	ea47 0803 	orr.w	r8, r7, r3
1a0023ee:	4094      	lsls	r4, r2
1a0023f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0023f4:	0c23      	lsrs	r3, r4, #16
1a0023f6:	fbb8 f7fe 	udiv	r7, r8, lr
1a0023fa:	fa1f fc85 	uxth.w	ip, r5
1a0023fe:	fb0e 8817 	mls	r8, lr, r7, r8
1a002402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002406:	fb07 f10c 	mul.w	r1, r7, ip
1a00240a:	4299      	cmp	r1, r3
1a00240c:	d909      	bls.n	1a002422 <__udivmoddi4+0x62>
1a00240e:	18eb      	adds	r3, r5, r3
1a002410:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a002414:	f080 80e3 	bcs.w	1a0025de <__udivmoddi4+0x21e>
1a002418:	4299      	cmp	r1, r3
1a00241a:	f240 80e0 	bls.w	1a0025de <__udivmoddi4+0x21e>
1a00241e:	3f02      	subs	r7, #2
1a002420:	442b      	add	r3, r5
1a002422:	1a5b      	subs	r3, r3, r1
1a002424:	b2a4      	uxth	r4, r4
1a002426:	fbb3 f0fe 	udiv	r0, r3, lr
1a00242a:	fb0e 3310 	mls	r3, lr, r0, r3
1a00242e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002432:	fb00 fc0c 	mul.w	ip, r0, ip
1a002436:	45a4      	cmp	ip, r4
1a002438:	d909      	bls.n	1a00244e <__udivmoddi4+0x8e>
1a00243a:	192c      	adds	r4, r5, r4
1a00243c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002440:	f080 80cb 	bcs.w	1a0025da <__udivmoddi4+0x21a>
1a002444:	45a4      	cmp	ip, r4
1a002446:	f240 80c8 	bls.w	1a0025da <__udivmoddi4+0x21a>
1a00244a:	3802      	subs	r0, #2
1a00244c:	442c      	add	r4, r5
1a00244e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002452:	eba4 040c 	sub.w	r4, r4, ip
1a002456:	2700      	movs	r7, #0
1a002458:	b11e      	cbz	r6, 1a002462 <__udivmoddi4+0xa2>
1a00245a:	40d4      	lsrs	r4, r2
1a00245c:	2300      	movs	r3, #0
1a00245e:	e9c6 4300 	strd	r4, r3, [r6]
1a002462:	4639      	mov	r1, r7
1a002464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002468:	2a00      	cmp	r2, #0
1a00246a:	d053      	beq.n	1a002514 <__udivmoddi4+0x154>
1a00246c:	fab2 f282 	clz	r2, r2
1a002470:	2a00      	cmp	r2, #0
1a002472:	f040 80b6 	bne.w	1a0025e2 <__udivmoddi4+0x222>
1a002476:	1b49      	subs	r1, r1, r5
1a002478:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00247c:	fa1f f885 	uxth.w	r8, r5
1a002480:	2701      	movs	r7, #1
1a002482:	fbb1 fcfe 	udiv	ip, r1, lr
1a002486:	0c23      	lsrs	r3, r4, #16
1a002488:	fb0e 111c 	mls	r1, lr, ip, r1
1a00248c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002490:	fb08 f10c 	mul.w	r1, r8, ip
1a002494:	4299      	cmp	r1, r3
1a002496:	d907      	bls.n	1a0024a8 <__udivmoddi4+0xe8>
1a002498:	18eb      	adds	r3, r5, r3
1a00249a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00249e:	d202      	bcs.n	1a0024a6 <__udivmoddi4+0xe6>
1a0024a0:	4299      	cmp	r1, r3
1a0024a2:	f200 80ec 	bhi.w	1a00267e <__udivmoddi4+0x2be>
1a0024a6:	4684      	mov	ip, r0
1a0024a8:	1a59      	subs	r1, r3, r1
1a0024aa:	b2a3      	uxth	r3, r4
1a0024ac:	fbb1 f0fe 	udiv	r0, r1, lr
1a0024b0:	fb0e 1410 	mls	r4, lr, r0, r1
1a0024b4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0024b8:	fb08 f800 	mul.w	r8, r8, r0
1a0024bc:	45a0      	cmp	r8, r4
1a0024be:	d907      	bls.n	1a0024d0 <__udivmoddi4+0x110>
1a0024c0:	192c      	adds	r4, r5, r4
1a0024c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0024c6:	d202      	bcs.n	1a0024ce <__udivmoddi4+0x10e>
1a0024c8:	45a0      	cmp	r8, r4
1a0024ca:	f200 80dc 	bhi.w	1a002686 <__udivmoddi4+0x2c6>
1a0024ce:	4618      	mov	r0, r3
1a0024d0:	eba4 0408 	sub.w	r4, r4, r8
1a0024d4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0024d8:	e7be      	b.n	1a002458 <__udivmoddi4+0x98>
1a0024da:	428b      	cmp	r3, r1
1a0024dc:	d908      	bls.n	1a0024f0 <__udivmoddi4+0x130>
1a0024de:	2e00      	cmp	r6, #0
1a0024e0:	d078      	beq.n	1a0025d4 <__udivmoddi4+0x214>
1a0024e2:	2700      	movs	r7, #0
1a0024e4:	e9c6 0100 	strd	r0, r1, [r6]
1a0024e8:	4638      	mov	r0, r7
1a0024ea:	4639      	mov	r1, r7
1a0024ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0024f0:	fab3 f783 	clz	r7, r3
1a0024f4:	b97f      	cbnz	r7, 1a002516 <__udivmoddi4+0x156>
1a0024f6:	428b      	cmp	r3, r1
1a0024f8:	d302      	bcc.n	1a002500 <__udivmoddi4+0x140>
1a0024fa:	4282      	cmp	r2, r0
1a0024fc:	f200 80bd 	bhi.w	1a00267a <__udivmoddi4+0x2ba>
1a002500:	1a84      	subs	r4, r0, r2
1a002502:	eb61 0303 	sbc.w	r3, r1, r3
1a002506:	2001      	movs	r0, #1
1a002508:	4698      	mov	r8, r3
1a00250a:	2e00      	cmp	r6, #0
1a00250c:	d0a9      	beq.n	1a002462 <__udivmoddi4+0xa2>
1a00250e:	e9c6 4800 	strd	r4, r8, [r6]
1a002512:	e7a6      	b.n	1a002462 <__udivmoddi4+0xa2>
1a002514:	deff      	udf	#255	; 0xff
1a002516:	f1c7 0520 	rsb	r5, r7, #32
1a00251a:	40bb      	lsls	r3, r7
1a00251c:	fa22 fc05 	lsr.w	ip, r2, r5
1a002520:	ea4c 0c03 	orr.w	ip, ip, r3
1a002524:	fa01 f407 	lsl.w	r4, r1, r7
1a002528:	fa20 f805 	lsr.w	r8, r0, r5
1a00252c:	fa21 f305 	lsr.w	r3, r1, r5
1a002530:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002534:	ea48 0404 	orr.w	r4, r8, r4
1a002538:	fbb3 f9fe 	udiv	r9, r3, lr
1a00253c:	0c21      	lsrs	r1, r4, #16
1a00253e:	fb0e 3319 	mls	r3, lr, r9, r3
1a002542:	fa1f f88c 	uxth.w	r8, ip
1a002546:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a00254a:	fb09 fa08 	mul.w	sl, r9, r8
1a00254e:	459a      	cmp	sl, r3
1a002550:	fa02 f207 	lsl.w	r2, r2, r7
1a002554:	fa00 f107 	lsl.w	r1, r0, r7
1a002558:	d90b      	bls.n	1a002572 <__udivmoddi4+0x1b2>
1a00255a:	eb1c 0303 	adds.w	r3, ip, r3
1a00255e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002562:	f080 8088 	bcs.w	1a002676 <__udivmoddi4+0x2b6>
1a002566:	459a      	cmp	sl, r3
1a002568:	f240 8085 	bls.w	1a002676 <__udivmoddi4+0x2b6>
1a00256c:	f1a9 0902 	sub.w	r9, r9, #2
1a002570:	4463      	add	r3, ip
1a002572:	eba3 030a 	sub.w	r3, r3, sl
1a002576:	b2a4      	uxth	r4, r4
1a002578:	fbb3 f0fe 	udiv	r0, r3, lr
1a00257c:	fb0e 3310 	mls	r3, lr, r0, r3
1a002580:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002584:	fb00 f808 	mul.w	r8, r0, r8
1a002588:	45a0      	cmp	r8, r4
1a00258a:	d908      	bls.n	1a00259e <__udivmoddi4+0x1de>
1a00258c:	eb1c 0404 	adds.w	r4, ip, r4
1a002590:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002594:	d26b      	bcs.n	1a00266e <__udivmoddi4+0x2ae>
1a002596:	45a0      	cmp	r8, r4
1a002598:	d969      	bls.n	1a00266e <__udivmoddi4+0x2ae>
1a00259a:	3802      	subs	r0, #2
1a00259c:	4464      	add	r4, ip
1a00259e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0025a2:	eba4 0408 	sub.w	r4, r4, r8
1a0025a6:	fba0 8902 	umull	r8, r9, r0, r2
1a0025aa:	454c      	cmp	r4, r9
1a0025ac:	46c6      	mov	lr, r8
1a0025ae:	464b      	mov	r3, r9
1a0025b0:	d354      	bcc.n	1a00265c <__udivmoddi4+0x29c>
1a0025b2:	d051      	beq.n	1a002658 <__udivmoddi4+0x298>
1a0025b4:	2e00      	cmp	r6, #0
1a0025b6:	d069      	beq.n	1a00268c <__udivmoddi4+0x2cc>
1a0025b8:	ebb1 020e 	subs.w	r2, r1, lr
1a0025bc:	eb64 0403 	sbc.w	r4, r4, r3
1a0025c0:	fa04 f505 	lsl.w	r5, r4, r5
1a0025c4:	fa22 f307 	lsr.w	r3, r2, r7
1a0025c8:	40fc      	lsrs	r4, r7
1a0025ca:	431d      	orrs	r5, r3
1a0025cc:	e9c6 5400 	strd	r5, r4, [r6]
1a0025d0:	2700      	movs	r7, #0
1a0025d2:	e746      	b.n	1a002462 <__udivmoddi4+0xa2>
1a0025d4:	4637      	mov	r7, r6
1a0025d6:	4630      	mov	r0, r6
1a0025d8:	e743      	b.n	1a002462 <__udivmoddi4+0xa2>
1a0025da:	4618      	mov	r0, r3
1a0025dc:	e737      	b.n	1a00244e <__udivmoddi4+0x8e>
1a0025de:	4607      	mov	r7, r0
1a0025e0:	e71f      	b.n	1a002422 <__udivmoddi4+0x62>
1a0025e2:	f1c2 0320 	rsb	r3, r2, #32
1a0025e6:	fa20 f703 	lsr.w	r7, r0, r3
1a0025ea:	4095      	lsls	r5, r2
1a0025ec:	fa01 f002 	lsl.w	r0, r1, r2
1a0025f0:	fa21 f303 	lsr.w	r3, r1, r3
1a0025f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0025f8:	4338      	orrs	r0, r7
1a0025fa:	0c01      	lsrs	r1, r0, #16
1a0025fc:	fbb3 f7fe 	udiv	r7, r3, lr
1a002600:	fa1f f885 	uxth.w	r8, r5
1a002604:	fb0e 3317 	mls	r3, lr, r7, r3
1a002608:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00260c:	fb07 f308 	mul.w	r3, r7, r8
1a002610:	428b      	cmp	r3, r1
1a002612:	fa04 f402 	lsl.w	r4, r4, r2
1a002616:	d907      	bls.n	1a002628 <__udivmoddi4+0x268>
1a002618:	1869      	adds	r1, r5, r1
1a00261a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a00261e:	d228      	bcs.n	1a002672 <__udivmoddi4+0x2b2>
1a002620:	428b      	cmp	r3, r1
1a002622:	d926      	bls.n	1a002672 <__udivmoddi4+0x2b2>
1a002624:	3f02      	subs	r7, #2
1a002626:	4429      	add	r1, r5
1a002628:	1acb      	subs	r3, r1, r3
1a00262a:	b281      	uxth	r1, r0
1a00262c:	fbb3 f0fe 	udiv	r0, r3, lr
1a002630:	fb0e 3310 	mls	r3, lr, r0, r3
1a002634:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002638:	fb00 f308 	mul.w	r3, r0, r8
1a00263c:	428b      	cmp	r3, r1
1a00263e:	d907      	bls.n	1a002650 <__udivmoddi4+0x290>
1a002640:	1869      	adds	r1, r5, r1
1a002642:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002646:	d210      	bcs.n	1a00266a <__udivmoddi4+0x2aa>
1a002648:	428b      	cmp	r3, r1
1a00264a:	d90e      	bls.n	1a00266a <__udivmoddi4+0x2aa>
1a00264c:	3802      	subs	r0, #2
1a00264e:	4429      	add	r1, r5
1a002650:	1ac9      	subs	r1, r1, r3
1a002652:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002656:	e714      	b.n	1a002482 <__udivmoddi4+0xc2>
1a002658:	4541      	cmp	r1, r8
1a00265a:	d2ab      	bcs.n	1a0025b4 <__udivmoddi4+0x1f4>
1a00265c:	ebb8 0e02 	subs.w	lr, r8, r2
1a002660:	eb69 020c 	sbc.w	r2, r9, ip
1a002664:	3801      	subs	r0, #1
1a002666:	4613      	mov	r3, r2
1a002668:	e7a4      	b.n	1a0025b4 <__udivmoddi4+0x1f4>
1a00266a:	4660      	mov	r0, ip
1a00266c:	e7f0      	b.n	1a002650 <__udivmoddi4+0x290>
1a00266e:	4618      	mov	r0, r3
1a002670:	e795      	b.n	1a00259e <__udivmoddi4+0x1de>
1a002672:	4667      	mov	r7, ip
1a002674:	e7d8      	b.n	1a002628 <__udivmoddi4+0x268>
1a002676:	4681      	mov	r9, r0
1a002678:	e77b      	b.n	1a002572 <__udivmoddi4+0x1b2>
1a00267a:	4638      	mov	r0, r7
1a00267c:	e745      	b.n	1a00250a <__udivmoddi4+0x14a>
1a00267e:	f1ac 0c02 	sub.w	ip, ip, #2
1a002682:	442b      	add	r3, r5
1a002684:	e710      	b.n	1a0024a8 <__udivmoddi4+0xe8>
1a002686:	3802      	subs	r0, #2
1a002688:	442c      	add	r4, r5
1a00268a:	e721      	b.n	1a0024d0 <__udivmoddi4+0x110>
1a00268c:	4637      	mov	r7, r6
1a00268e:	e6e8      	b.n	1a002462 <__udivmoddi4+0xa2>

1a002690 <__aeabi_idiv0>:
1a002690:	4770      	bx	lr
1a002692:	bf00      	nop

1a002694 <__libc_init_array>:
1a002694:	b570      	push	{r4, r5, r6, lr}
1a002696:	4d0d      	ldr	r5, [pc, #52]	; (1a0026cc <__libc_init_array+0x38>)
1a002698:	4c0d      	ldr	r4, [pc, #52]	; (1a0026d0 <__libc_init_array+0x3c>)
1a00269a:	1b64      	subs	r4, r4, r5
1a00269c:	10a4      	asrs	r4, r4, #2
1a00269e:	2600      	movs	r6, #0
1a0026a0:	42a6      	cmp	r6, r4
1a0026a2:	d109      	bne.n	1a0026b8 <__libc_init_array+0x24>
1a0026a4:	4d0b      	ldr	r5, [pc, #44]	; (1a0026d4 <__libc_init_array+0x40>)
1a0026a6:	4c0c      	ldr	r4, [pc, #48]	; (1a0026d8 <__libc_init_array+0x44>)
1a0026a8:	f7fe f96b 	bl	1a000982 <_init>
1a0026ac:	1b64      	subs	r4, r4, r5
1a0026ae:	10a4      	asrs	r4, r4, #2
1a0026b0:	2600      	movs	r6, #0
1a0026b2:	42a6      	cmp	r6, r4
1a0026b4:	d105      	bne.n	1a0026c2 <__libc_init_array+0x2e>
1a0026b6:	bd70      	pop	{r4, r5, r6, pc}
1a0026b8:	f855 3b04 	ldr.w	r3, [r5], #4
1a0026bc:	4798      	blx	r3
1a0026be:	3601      	adds	r6, #1
1a0026c0:	e7ee      	b.n	1a0026a0 <__libc_init_array+0xc>
1a0026c2:	f855 3b04 	ldr.w	r3, [r5], #4
1a0026c6:	4798      	blx	r3
1a0026c8:	3601      	adds	r6, #1
1a0026ca:	e7f2      	b.n	1a0026b2 <__libc_init_array+0x1e>
1a0026cc:	1a002a5c 	.word	0x1a002a5c
1a0026d0:	1a002a5c 	.word	0x1a002a5c
1a0026d4:	1a002a5c 	.word	0x1a002a5c
1a0026d8:	1a002a60 	.word	0x1a002a60

1a0026dc <memset>:
1a0026dc:	4402      	add	r2, r0
1a0026de:	4603      	mov	r3, r0
1a0026e0:	4293      	cmp	r3, r2
1a0026e2:	d100      	bne.n	1a0026e6 <memset+0xa>
1a0026e4:	4770      	bx	lr
1a0026e6:	f803 1b01 	strb.w	r1, [r3], #1
1a0026ea:	e7f9      	b.n	1a0026e0 <memset+0x4>
1a0026ec:	206c6156 	.word	0x206c6156
1a0026f0:	7365754d 	.word	0x7365754d
1a0026f4:	00617274 	.word	0x00617274
1a0026f8:	207a756c 	.word	0x207a756c
1a0026fc:	72746c75 	.word	0x72746c75
1a002700:	6f697661 	.word	0x6f697661
1a002704:	6174656c 	.word	0x6174656c
1a002708:	00000000 	.word	0x00000000
1a00270c:	207a756c 	.word	0x207a756c
1a002710:	69736976 	.word	0x69736976
1a002714:	00656c62 	.word	0x00656c62
1a002718:	696c6153 	.word	0x696c6153
1a00271c:	ffff0072 	.word	0xffff0072
1a002720:	656c6553 	.word	0x656c6553
1a002724:	6c206363 	.word	0x6c206363
1a002728:	61706d61 	.word	0x61706d61
1a00272c:	00006172 	.word	0x00006172
1a002730:	00202020 	.word	0x00202020
1a002734:	6d656954 	.word	0x6d656954
1a002738:	65206f70 	.word	0x65206f70
1a00273c:	7961736e 	.word	0x7961736e
1a002740:	0000006f 	.word	0x0000006f
1a002744:	63696e49 	.word	0x63696e49
1a002748:	45206f69 	.word	0x45206f69
1a00274c:	7961736e 	.word	0x7961736e
1a002750:	0000006f 	.word	0x0000006f
1a002754:	20202020 	.word	0x20202020
1a002758:	20202020 	.word	0x20202020
1a00275c:	ffffff00 	.word	0xffffff00
1a002760:	6f6c6156 	.word	0x6f6c6156
1a002764:	6e412072 	.word	0x6e412072
1a002768:	676f6c61 	.word	0x676f6c61
1a00276c:	006f6369 	.word	0x006f6369
1a002770:	61727544 	.word	0x61727544
1a002774:	6e6f6963 	.word	0x6e6f6963
1a002778:	00000000 	.word	0x00000000
1a00277c:	63696e49 	.word	0x63696e49
1a002780:	ff006f69 	.word	0xff006f69
1a002784:	694d2031 	.word	0x694d2031
1a002788:	6f74756e 	.word	0x6f74756e
1a00278c:	00000000 	.word	0x00000000
1a002790:	20202020 	.word	0x20202020
1a002794:	20202020 	.word	0x20202020
1a002798:	00002020 	.word	0x00002020
1a00279c:	694d2032 	.word	0x694d2032
1a0027a0:	6f74756e 	.word	0x6f74756e
1a0027a4:	ffff0073 	.word	0xffff0073
1a0027a8:	ff003e2d 	.word	0xff003e2d
1a0027ac:	ffff002d 	.word	0xffff002d

1a0027b0 <ExtRateIn>:
1a0027b0:	00000000                                ....

1a0027b4 <GpioButtons>:
1a0027b4:	08000400 09010900                       ........

1a0027bc <GpioLeds>:
1a0027bc:	01050005 0e000205 0c010b01              ............

1a0027c8 <GpioPorts>:
1a0027c8:	03030003 0f050403 05031005 07030603     ................
1a0027d8:	ffff0802                                ....

1a0027dc <OscRateIn>:
1a0027dc:	00b71b00                                ....

1a0027e0 <InitClkStates>:
1a0027e0:	01010f01                                ....

1a0027e4 <pinmuxing>:
1a0027e4:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0027f4:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002804:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002814:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002824:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002834:	00d50301 00d50401 00160107 00560207     ..............V.
1a002844:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002854:	00570206                                ..W.

1a002858 <UART_BClock>:
1a002858:	01a201c2 01620182                       ......b.

1a002860 <UART_PClock>:
1a002860:	00820081 00a200a1 08040201 0f0f0f03     ................
1a002870:	ffff00ff                                ....

1a002874 <periph_to_base>:
1a002874:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002884:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002894:	000100e0 01000100 01200003 00060120     .......... . ...
1a0028a4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0028b4:	01820013 00120182 01a201a2 01c20011     ................
1a0028c4:	001001c2 01e201e2 0202000f 000e0202     ................
1a0028d4:	02220222 0223000d 001c0223              "."...#.#...

1a0028e0 <InitClkStates>:
1a0028e0:	00010100 00010909 0001090a 01010701     ................
1a0028f0:	00010902 00010906 0101090c 0001090d     ................
1a002900:	0001090e 0001090f 00010910 00010911     ................
1a002910:	00010912 00010913 00011114 00011119     ................
1a002920:	0001111a 0001111b                       ........

1a002928 <gpioPinsInit>:
1a002928:	02000104 00050701 05010d03 04080100     ................
1a002938:	02020002 02000304 00000403 04070002     ................
1a002948:	030c0300 09050402 05040103 04030208     ................
1a002958:	04020305 06040504 0802000c 03000b06     ................
1a002968:	00090607 07060503 060f0504 03030004     ................
1a002978:	02000404 00050404 06040502 04060200     ................
1a002988:	0c050408 05040a04 0003010e 14010a00     ................
1a002998:	010f0000 0d000012 00001101 0010010c     ................
1a0029a8:	07070300 000f0300 01000001 00000000     ................
1a0029b8:	000a0600 08060603 06100504 04030005     ................
1a0029c8:	03000106 04090400 04010d05 010b0000     ................
1a0029d8:	0200000f 00000001 00010104 02010800     ................
1a0029e8:	01090000 09010006 05040002 04010200     ................
1a0029f8:	02020105 02020504 0e00000a 01000b02     ................
1a002a08:	000c020b ffff0c01 7778797a 73747576     ........zyxwvuts
1a002a18:	6f707172 6b6c6d6e 6768696a 63646566     rqponmlkjihgfedc
1a002a28:	38396162 34353637 30313233 34333231     ba98765432101234
1a002a38:	38373635 63626139 67666564 6b6a6968     56789abcdefghijk
1a002a48:	6f6e6d6c 73727170 77767574 007a7978     lmnopqrstuvwxyz.
1a002a58:	d494c080                                ....
