
misProgramas/pruebauart/out/pruebauart.elf:     file format elf32-littlearm
misProgramas/pruebauart/out/pruebauart.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00032d

Program Header:
0x70000001 off    0x00013534 vaddr 0x1a003534 paddr 0x1a003534 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000908 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000353c memsz 0x0000353c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00353c align 2**16
         filesz 0x00000888 memsz 0x00000888 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003530  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000888  10000000  1a00353c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020888  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020888  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020888  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020888  2**2
                  CONTENTS
  6 .bss          00000080  10000888  10000888  00000888  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020888  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020888  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020888  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020888  2**2
                  CONTENTS
 11 .init_array   00000004  1a003530  1a003530  00013530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a003534  1a003534  00013534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020888  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020888  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020888  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020888  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020888  2**2
                  CONTENTS
 18 .noinit       00000000  10000908  10000908  00020888  2**2
                  CONTENTS
 19 .debug_info   0001977f  00000000  00000000  00020888  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00003c3d  00000000  00000000  0003a007  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 000008c8  00000000  00000000  0003dc44  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000918  00000000  00000000  0003e50c  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000bc9e  00000000  00000000  0003ee24  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000e3d8  00000000  00000000  0004aac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    000277b8  00000000  00000000  00058e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000068  00000000  00000000  00080652  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  000806ba  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001be4  00000000  00000000  000806ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_loc    00006faa  00000000  00000000  000822d0  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000888 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003530 l    d  .init_array	00000000 .init_array
1a003534 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000908 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 pruebauart.c
00000000 l    df *ABS*	00000000 system.c
10000888 l     O .bss	00000004 heap_end.5864
00000000 l    df *ABS*	00000000 board.c
1a000480 l     F .text	00000044 Board_LED_Init
1a0004c4 l     F .text	00000040 Board_TEC_Init
1a000504 l     F .text	00000040 Board_GPIO_Init
1a000544 l     F .text	00000030 Board_ADC_Init
1a000574 l     F .text	00000038 Board_SPI_Init
1a0005ac l     F .text	00000024 Board_I2C_Init
1a0032d0 l     O .text	00000008 GpioButtons
1a0032d8 l     O .text	0000000c GpioLeds
1a0032e4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0032fc l     O .text	00000004 InitClkStates
1a003300 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000720 l     F .text	0000002c Chip_UART_GetIndex
1a003374 l     O .text	00000008 UART_BClock
1a00337c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a00087c l     F .text	00000014 Chip_ADC_GetClockIndex
1a000890 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000944 l     F .text	000000a0 pll_calc_divs
1a0009e4 l     F .text	0000010c pll_get_frac
1a000af0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000d64 l     F .text	00000022 Chip_Clock_GetDivRate
1000088c l     O .bss	00000008 audio_usb_pll_freq
1a003390 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0033fc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001040 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001054 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
10000894 l     O .bss	00000004 callBackFuncParams
10000898 l     O .bss	00000008 tickCounter
100008a0 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001290 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100008a4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
1a001cdc l     F .text	00000050 std
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 impure.c
10000050 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a003534 l       .init_array	00000000 __init_array_end
1a003530 l       .bss_RAM5	00000000 __preinit_array_end
1a003530 l       .init_array	00000000 __init_array_start
1a003530 l       .bss_RAM5	00000000 __preinit_array_start
1a000b88 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0003cc g     F .text	00000012 _isatty_r
1a001b40 g     F .text	0000009c _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a0003de g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000666 g     F .text	00000008 __stdio_init
100008e4 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a002bd8 g     F .text	00000020 __sseek
1a001d38 g     F .text	00000054 __sinit
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000936 g     F .text	0000000c Chip_ADC_SetResolution
1a0027fc g     F .text	0000000c __malloc_unlock
1a001264 g     F .text	0000002c SysTick_Handler
100008e8 g     O .bss	00000001 __lock___arc4random_mutex
1a000328  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a000608 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a002720 g     F .text	000000ce memmove
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a00353c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a0003c2 g     F .text	0000000a _fstat_r
53ff7562 g       *ABS*	00000000 __valid_user_code_checksum
1a00353c g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a000e06 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a00196c g     F .text	00000134 memcpy
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001d2c g     F .text	0000000c _cleanup_r
1a001620 g     F .text	00000000 .hidden __aeabi_uldivmod
10000908 g       .noinit	00000000 _noinit
1a001bdc g     F .text	00000010 puts
100008dc g     O .bss	00000004 SystemCoreClock
1a00074c g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000e84 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
100008d8 g     O .bss	00000004 __malloc_top_pad
1a0006a8 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001da4 g     F .text	00000308 __sfvwrite_r
1a001650 g     F .text	000002d0 .hidden __udivmoddi4
1a000460 g     F .text	00000020 _sbrk_r
1a0032cc g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0003e8 g     F .text	0000004e _read_r
1a002cd0 g     F .text	000000ce _fclose_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
100008d0 g     O .bss	00000004 __malloc_max_sbrked_mem
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a003534 g       .ARM.exidx	00000000 __exidx_start
100008ec g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
100008f0 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a002808 g     F .text	0000036c _realloc_r
1a001924 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000624 g     F .text	00000030 Board_Init
1a0003b6  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000908 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00032c g     F .text	00000088 Reset_Handler
1a0011e8 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001138 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000b3c g     F .text	0000004c Chip_Clock_EnableCrystal
100008f4 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a001114 g     F .text	00000024 Chip_I2C_Init
1a00210c g     F .text	00000002 __retarget_lock_release_recursive
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000cf8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a003444 g     O .text	000000e6 gpioPinsInit
1a00106c g     F .text	00000012 Chip_SSP_SetClockRate
1a001542 g     F .text	00000016 gpioToggle
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a001d8c g     F .text	0000000c __sfp_lock_acquire
1a002680 g     F .text	00000000 memchr
1a002fe8 g     F .text	000001ec _free_r
1a000de0 g     F .text	00000026 Chip_Clock_GetBaseClock
10000888 g       .bss	00000000 _bss
1a000904 g     F .text	00000032 Chip_ADC_SetSampleRate
10000880 g     O .data	00000004 __malloc_sbrk_base
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00107e g     F .text	0000003e Chip_SSP_SetBitRate
1a000ee4 g     F .text	00000002 Chip_GPIO_Init
1a0032f8 g     O .text	00000004 OscRateIn
10000908 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
100008a8 g     O .bss	00000028 __malloc_current_mallinfo
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a0003b8 g     F .text	0000000a _close_r
1a0012c4 g     F .text	000001ac gpioInit
1a002104 g     F .text	00000002 __retarget_lock_close_recursive
1a002c00 g     F .text	000000d0 __swsetup_r
1a001920  w    F .text	00000002 .hidden __aeabi_ldiv0
10000478 g     O .data	00000408 __malloc_av_
1a002b74 g     F .text	00000022 __sread
1a001558 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0027f0 g     F .text	0000000c __malloc_lock
1a0005f4 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a002eec g     F .text	0000005a _fflush_r
1a000ba4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002108 g     F .text	00000002 __retarget_lock_acquire_recursive
1a001aa0 g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000028 main
100008d4 g     O .bss	00000004 __malloc_max_total_mem
1a002100 g     F .text	00000002 __retarget_lock_init_recursive
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a002bf8 g     F .text	00000008 __sclose
1a002110 g     F .text	00000570 _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a000e14 g     F .text	0000003c Chip_Clock_EnableOpts
1a00065e g     F .text	00000008 __stdio_getchar
1a002f48 g     F .text	000000a0 _malloc_trim_r
1a000bc0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000c78 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001170 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0015e8 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001470 g     F .text	0000006a gpioWrite
1a0003b4  w    F .text	00000002 _fini
1a0008c4 g     F .text	00000040 Chip_ADC_Init
100008e0 g     O .bss	00000004 g_pUsbApi
1a000670 g     F .text	00000038 Board_SetupMuxing
1a0007a0 g     F .text	000000dc Chip_UART_SetBaudFDR
1a0011c4 g     F .text	0000000c tickRead
1a000436 g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000048 g     O .data	00000004 _impure_ptr
1a002da0 g     F .text	0000014a __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000908 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0010bc g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0031d4 g     F .text	0000005c __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0005d0 g     F .text	00000024 Board_Debug_Init
1a000654 g     F .text	0000000a __stdio_putchar
10000888 g       .data	00000000 _edata
1a0010f4 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
100008f8 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a000ee8 g     F .text	00000158 Chip_SetupCoreClock
1a002b98 g     F .text	0000003e __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
10000884 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000040 g_pfnVectors
1a0020ac g     F .text	00000052 _fwalk_reent
1a000ed0 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001d98 g     F .text	0000000c __sfp_lock_release
1a001920  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
100008fc g     O .bss	00000001 __lock___dd_hash_mutex
1a003230 g     F .text	00000094 __smakebuf_r
10000900 g     O .bss	00000001 __lock___tz_mutex
1a001c00 g     F .text	000000dc strlen
1a000e50 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0014da g     F .text	00000068 gpioRead
1a001574 g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0011d0 g     F .text	00000018 tickPowerSet
1a000d88 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0011a8 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
10000904 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a000714 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 2d 03 00 1a 79 01 00 1a 7b 01 00 1a     ....-...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 62 75 ff 53     }...........bu.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	65 12 00 1a                                         e...

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	59 15 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     Y...............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00353c 	.word	0x1a00353c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000888 	.word	0x00000888
1a000120:	1a00353c 	.word	0x1a00353c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00353c 	.word	0x1a00353c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00353c 	.word	0x1a00353c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00353c 	.word	0x1a00353c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000888 	.word	0x10000888
1a000154:	00000080 	.word	0x00000080
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
/*=====[Definitions of private global variables]=============================*/

/*=====[Main function, program entry point after power on or reset]==========*/

int main( void )
{
1a000300:	b508      	push	{r3, lr}
   printf("hola\r\n"); // Recordar poner el \r\n para que envíe
1a000302:	4808      	ldr	r0, [pc, #32]	; (1a000324 <main+0x24>)
1a000304:	f001 fc6a 	bl	1a001bdc <puts>
   boardInit();
1a000308:	f001 f934 	bl	1a001574 <boardInit>
   while(true){
      gpioToggle( LEDB );
1a00030c:	202a      	movs	r0, #42	; 0x2a
1a00030e:	f001 f918 	bl	1a001542 <gpioToggle>
      printf("hola\r\n");
1a000312:	4804      	ldr	r0, [pc, #16]	; (1a000324 <main+0x24>)
1a000314:	f001 fc62 	bl	1a001bdc <puts>
      delay(100); // tiempo en ms
1a000318:	2064      	movs	r0, #100	; 0x64
1a00031a:	2100      	movs	r1, #0
1a00031c:	f001 f964 	bl	1a0015e8 <delay>
1a000320:	e7f4      	b.n	1a00030c <main+0xc>
1a000322:	bf00      	nop
1a000324:	1a0032c4 	.word	0x1a0032c4

1a000328 <initialise_monitor_handles>:
}
1a000328:	4770      	bx	lr
1a00032a:	Address 0x000000001a00032a is out of bounds.


1a00032c <Reset_Handler>:
void Reset_Handler(void) {
1a00032c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00032e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000330:	4b19      	ldr	r3, [pc, #100]	; (1a000398 <Reset_Handler+0x6c>)
1a000332:	4a1a      	ldr	r2, [pc, #104]	; (1a00039c <Reset_Handler+0x70>)
1a000334:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000336:	3304      	adds	r3, #4
1a000338:	4a19      	ldr	r2, [pc, #100]	; (1a0003a0 <Reset_Handler+0x74>)
1a00033a:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00033c:	2300      	movs	r3, #0
1a00033e:	e005      	b.n	1a00034c <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000340:	4a18      	ldr	r2, [pc, #96]	; (1a0003a4 <Reset_Handler+0x78>)
1a000342:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000346:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00034a:	3301      	adds	r3, #1
1a00034c:	2b07      	cmp	r3, #7
1a00034e:	d9f7      	bls.n	1a000340 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000350:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000352:	4b15      	ldr	r3, [pc, #84]	; (1a0003a8 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000354:	e007      	b.n	1a000366 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000356:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00035a:	689a      	ldr	r2, [r3, #8]
1a00035c:	6859      	ldr	r1, [r3, #4]
1a00035e:	6818      	ldr	r0, [r3, #0]
1a000360:	f7ff ff13 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000364:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000366:	4a11      	ldr	r2, [pc, #68]	; (1a0003ac <Reset_Handler+0x80>)
1a000368:	4293      	cmp	r3, r2
1a00036a:	d3f4      	bcc.n	1a000356 <Reset_Handler+0x2a>
1a00036c:	e006      	b.n	1a00037c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00036e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000370:	6859      	ldr	r1, [r3, #4]
1a000372:	f854 0b08 	ldr.w	r0, [r4], #8
1a000376:	f7ff ff17 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00037a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00037c:	4a0c      	ldr	r2, [pc, #48]	; (1a0003b0 <Reset_Handler+0x84>)
1a00037e:	4293      	cmp	r3, r2
1a000380:	d3f5      	bcc.n	1a00036e <Reset_Handler+0x42>
    SystemInit();
1a000382:	f000 fef5 	bl	1a001170 <SystemInit>
    __libc_init_array();
1a000386:	f001 facd 	bl	1a001924 <__libc_init_array>
    initialise_monitor_handles();
1a00038a:	f7ff ffcd 	bl	1a000328 <initialise_monitor_handles>
    main();
1a00038e:	f7ff ffb7 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a000392:	bf30      	wfi
1a000394:	e7fd      	b.n	1a000392 <Reset_Handler+0x66>
1a000396:	bf00      	nop
1a000398:	40053100 	.word	0x40053100
1a00039c:	10df1000 	.word	0x10df1000
1a0003a0:	01dff7ff 	.word	0x01dff7ff
1a0003a4:	e000e280 	.word	0xe000e280
1a0003a8:	1a000114 	.word	0x1a000114
1a0003ac:	1a000150 	.word	0x1a000150
1a0003b0:	1a000178 	.word	0x1a000178

1a0003b4 <_fini>:
void _fini(void) {}
1a0003b4:	4770      	bx	lr

1a0003b6 <_init>:
void _init(void) {}
1a0003b6:	4770      	bx	lr

1a0003b8 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0003b8:	2309      	movs	r3, #9
1a0003ba:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0003bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003c0:	4770      	bx	lr

1a0003c2 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0003c2:	2358      	movs	r3, #88	; 0x58
1a0003c4:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0003c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003ca:	4770      	bx	lr

1a0003cc <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0003cc:	2902      	cmp	r1, #2
1a0003ce:	d904      	bls.n	1a0003da <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a0003d0:	2309      	movs	r3, #9
1a0003d2:	6003      	str	r3, [r0, #0]
       return -1;
1a0003d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003d8:	4770      	bx	lr
       return 1;
1a0003da:	2001      	movs	r0, #1
   }
}
1a0003dc:	4770      	bx	lr

1a0003de <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0003de:	2358      	movs	r3, #88	; 0x58
1a0003e0:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0003e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0003e6:	4770      	bx	lr

1a0003e8 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0003e8:	2902      	cmp	r1, #2
1a0003ea:	d81f      	bhi.n	1a00042c <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0003ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0003f0:	461d      	mov	r5, r3
1a0003f2:	4617      	mov	r7, r2
1a0003f4:	4606      	mov	r6, r0
  size_t i = 0;
1a0003f6:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0003f8:	42ac      	cmp	r4, r5
1a0003fa:	d211      	bcs.n	1a000420 <_read_r+0x38>
         int c = __stdio_getchar();
1a0003fc:	f000 f92f 	bl	1a00065e <__stdio_getchar>
         if( c != -1 ){
1a000400:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000404:	d0f8      	beq.n	1a0003f8 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000406:	f104 0801 	add.w	r8, r4, #1
1a00040a:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a00040c:	280d      	cmp	r0, #13
1a00040e:	d003      	beq.n	1a000418 <_read_r+0x30>
1a000410:	280a      	cmp	r0, #10
1a000412:	d001      	beq.n	1a000418 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000414:	4644      	mov	r4, r8
1a000416:	e7ef      	b.n	1a0003f8 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000418:	f000 f921 	bl	1a00065e <__stdio_getchar>
               return i;
1a00041c:	4640      	mov	r0, r8
1a00041e:	e003      	b.n	1a000428 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000420:	2313      	movs	r3, #19
1a000422:	6033      	str	r3, [r6, #0]
      return -1;
1a000424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a00042c:	2313      	movs	r3, #19
1a00042e:	6003      	str	r3, [r0, #0]
      return -1;
1a000430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000434:	4770      	bx	lr

1a000436 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000436:	2902      	cmp	r1, #2
1a000438:	d80c      	bhi.n	1a000454 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00043a:	b570      	push	{r4, r5, r6, lr}
1a00043c:	461d      	mov	r5, r3
1a00043e:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000440:	2400      	movs	r4, #0
1a000442:	42ac      	cmp	r4, r5
1a000444:	d204      	bcs.n	1a000450 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a000446:	5d30      	ldrb	r0, [r6, r4]
1a000448:	f000 f904 	bl	1a000654 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a00044c:	3401      	adds	r4, #1
1a00044e:	e7f8      	b.n	1a000442 <_write_r+0xc>
       return n;
1a000450:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000452:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000454:	2313      	movs	r3, #19
1a000456:	6003      	str	r3, [r0, #0]
       return -1;
1a000458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00045c:	4770      	bx	lr
1a00045e:	Address 0x000000001a00045e is out of bounds.


1a000460 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000460:	4b05      	ldr	r3, [pc, #20]	; (1a000478 <_sbrk_r+0x18>)
1a000462:	681b      	ldr	r3, [r3, #0]
1a000464:	b123      	cbz	r3, 1a000470 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000466:	4b04      	ldr	r3, [pc, #16]	; (1a000478 <_sbrk_r+0x18>)
1a000468:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00046a:	4401      	add	r1, r0
1a00046c:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a00046e:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000470:	4b01      	ldr	r3, [pc, #4]	; (1a000478 <_sbrk_r+0x18>)
1a000472:	4a02      	ldr	r2, [pc, #8]	; (1a00047c <_sbrk_r+0x1c>)
1a000474:	601a      	str	r2, [r3, #0]
1a000476:	e7f6      	b.n	1a000466 <_sbrk_r+0x6>
1a000478:	10000888 	.word	0x10000888
1a00047c:	10000908 	.word	0x10000908

1a000480 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000480:	2200      	movs	r2, #0
1a000482:	2a05      	cmp	r2, #5
1a000484:	d819      	bhi.n	1a0004ba <Board_LED_Init+0x3a>
{
1a000486:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000488:	490c      	ldr	r1, [pc, #48]	; (1a0004bc <Board_LED_Init+0x3c>)
1a00048a:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00048e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000492:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000494:	4b0a      	ldr	r3, [pc, #40]	; (1a0004c0 <Board_LED_Init+0x40>)
1a000496:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00049a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00049e:	2001      	movs	r0, #1
1a0004a0:	40a0      	lsls	r0, r4
1a0004a2:	4301      	orrs	r1, r0
1a0004a4:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0004a8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0004ac:	2100      	movs	r1, #0
1a0004ae:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0004b0:	3201      	adds	r2, #1
1a0004b2:	2a05      	cmp	r2, #5
1a0004b4:	d9e8      	bls.n	1a000488 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0004b6:	bc70      	pop	{r4, r5, r6}
1a0004b8:	4770      	bx	lr
1a0004ba:	4770      	bx	lr
1a0004bc:	1a0032d8 	.word	0x1a0032d8
1a0004c0:	400f4000 	.word	0x400f4000

1a0004c4 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0004c4:	2300      	movs	r3, #0
1a0004c6:	2b03      	cmp	r3, #3
1a0004c8:	d816      	bhi.n	1a0004f8 <Board_TEC_Init+0x34>
{
1a0004ca:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0004cc:	490b      	ldr	r1, [pc, #44]	; (1a0004fc <Board_TEC_Init+0x38>)
1a0004ce:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0004d2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0004d6:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0004d8:	4c09      	ldr	r4, [pc, #36]	; (1a000500 <Board_TEC_Init+0x3c>)
1a0004da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0004de:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0004e2:	2001      	movs	r0, #1
1a0004e4:	40a8      	lsls	r0, r5
1a0004e6:	ea21 0100 	bic.w	r1, r1, r0
1a0004ea:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0004ee:	3301      	adds	r3, #1
1a0004f0:	2b03      	cmp	r3, #3
1a0004f2:	d9eb      	bls.n	1a0004cc <Board_TEC_Init+0x8>
   }
}
1a0004f4:	bc30      	pop	{r4, r5}
1a0004f6:	4770      	bx	lr
1a0004f8:	4770      	bx	lr
1a0004fa:	bf00      	nop
1a0004fc:	1a0032d0 	.word	0x1a0032d0
1a000500:	400f4000 	.word	0x400f4000

1a000504 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000504:	2300      	movs	r3, #0
1a000506:	2b08      	cmp	r3, #8
1a000508:	d816      	bhi.n	1a000538 <Board_GPIO_Init+0x34>
{
1a00050a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00050c:	490b      	ldr	r1, [pc, #44]	; (1a00053c <Board_GPIO_Init+0x38>)
1a00050e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000512:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000516:	784d      	ldrb	r5, [r1, #1]
1a000518:	4c09      	ldr	r4, [pc, #36]	; (1a000540 <Board_GPIO_Init+0x3c>)
1a00051a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00051e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000522:	2001      	movs	r0, #1
1a000524:	40a8      	lsls	r0, r5
1a000526:	ea21 0100 	bic.w	r1, r1, r0
1a00052a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00052e:	3301      	adds	r3, #1
1a000530:	2b08      	cmp	r3, #8
1a000532:	d9eb      	bls.n	1a00050c <Board_GPIO_Init+0x8>
   }
}
1a000534:	bc30      	pop	{r4, r5}
1a000536:	4770      	bx	lr
1a000538:	4770      	bx	lr
1a00053a:	bf00      	nop
1a00053c:	1a0032e4 	.word	0x1a0032e4
1a000540:	400f4000 	.word	0x400f4000

1a000544 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000544:	b510      	push	{r4, lr}
1a000546:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000548:	4c08      	ldr	r4, [pc, #32]	; (1a00056c <Board_ADC_Init+0x28>)
1a00054a:	4669      	mov	r1, sp
1a00054c:	4620      	mov	r0, r4
1a00054e:	f000 f9b9 	bl	1a0008c4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000552:	4a07      	ldr	r2, [pc, #28]	; (1a000570 <Board_ADC_Init+0x2c>)
1a000554:	4669      	mov	r1, sp
1a000556:	4620      	mov	r0, r4
1a000558:	f000 f9d4 	bl	1a000904 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a00055c:	2200      	movs	r2, #0
1a00055e:	4669      	mov	r1, sp
1a000560:	4620      	mov	r0, r4
1a000562:	f000 f9e8 	bl	1a000936 <Chip_ADC_SetResolution>
}
1a000566:	b002      	add	sp, #8
1a000568:	bd10      	pop	{r4, pc}
1a00056a:	bf00      	nop
1a00056c:	400e3000 	.word	0x400e3000
1a000570:	00061a80 	.word	0x00061a80

1a000574 <Board_SPI_Init>:
{
1a000574:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000576:	4c0b      	ldr	r4, [pc, #44]	; (1a0005a4 <Board_SPI_Init+0x30>)
1a000578:	4620      	mov	r0, r4
1a00057a:	f000 fd9f 	bl	1a0010bc <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00057e:	6863      	ldr	r3, [r4, #4]
1a000580:	f023 0304 	bic.w	r3, r3, #4
1a000584:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000586:	6823      	ldr	r3, [r4, #0]
1a000588:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00058c:	f043 0307 	orr.w	r3, r3, #7
1a000590:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000592:	4905      	ldr	r1, [pc, #20]	; (1a0005a8 <Board_SPI_Init+0x34>)
1a000594:	4620      	mov	r0, r4
1a000596:	f000 fd72 	bl	1a00107e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00059a:	6863      	ldr	r3, [r4, #4]
1a00059c:	f043 0302 	orr.w	r3, r3, #2
1a0005a0:	6063      	str	r3, [r4, #4]
}
1a0005a2:	bd10      	pop	{r4, pc}
1a0005a4:	400c5000 	.word	0x400c5000
1a0005a8:	000186a0 	.word	0x000186a0

1a0005ac <Board_I2C_Init>:
{
1a0005ac:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0005ae:	2000      	movs	r0, #0
1a0005b0:	f000 fdb0 	bl	1a001114 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0005b4:	4b04      	ldr	r3, [pc, #16]	; (1a0005c8 <Board_I2C_Init+0x1c>)
1a0005b6:	f640 0208 	movw	r2, #2056	; 0x808
1a0005ba:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0005be:	4903      	ldr	r1, [pc, #12]	; (1a0005cc <Board_I2C_Init+0x20>)
1a0005c0:	2000      	movs	r0, #0
1a0005c2:	f000 fdb9 	bl	1a001138 <Chip_I2C_SetClockRate>
}
1a0005c6:	bd08      	pop	{r3, pc}
1a0005c8:	40086000 	.word	0x40086000
1a0005cc:	000f4240 	.word	0x000f4240

1a0005d0 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0005d0:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0005d2:	4c07      	ldr	r4, [pc, #28]	; (1a0005f0 <Board_Debug_Init+0x20>)
1a0005d4:	4620      	mov	r0, r4
1a0005d6:	f000 f8b9 	bl	1a00074c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0005da:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0005de:	4620      	mov	r0, r4
1a0005e0:	f000 f8de 	bl	1a0007a0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0005e4:	2303      	movs	r3, #3
1a0005e6:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0005e8:	2301      	movs	r3, #1
1a0005ea:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0005ec:	bd10      	pop	{r4, pc}
1a0005ee:	bf00      	nop
1a0005f0:	400c1000 	.word	0x400c1000

1a0005f4 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0005f4:	4b03      	ldr	r3, [pc, #12]	; (1a000604 <Board_UARTPutChar+0x10>)
1a0005f6:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0005f8:	f013 0f20 	tst.w	r3, #32
1a0005fc:	d0fa      	beq.n	1a0005f4 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0005fe:	4b01      	ldr	r3, [pc, #4]	; (1a000604 <Board_UARTPutChar+0x10>)
1a000600:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a000602:	4770      	bx	lr
1a000604:	400c1000 	.word	0x400c1000

1a000608 <Board_UARTGetChar>:
	return pUART->LSR;
1a000608:	4b05      	ldr	r3, [pc, #20]	; (1a000620 <Board_UARTGetChar+0x18>)
1a00060a:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a00060c:	f013 0f01 	tst.w	r3, #1
1a000610:	d003      	beq.n	1a00061a <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000612:	4b03      	ldr	r3, [pc, #12]	; (1a000620 <Board_UARTGetChar+0x18>)
1a000614:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000616:	b2c0      	uxtb	r0, r0
1a000618:	4770      	bx	lr
   }
   return EOF;
1a00061a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00061e:	4770      	bx	lr
1a000620:	400c1000 	.word	0x400c1000

1a000624 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000624:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000626:	f7ff ffd3 	bl	1a0005d0 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00062a:	4809      	ldr	r0, [pc, #36]	; (1a000650 <Board_Init+0x2c>)
1a00062c:	f000 fc5a 	bl	1a000ee4 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000630:	f7ff ff68 	bl	1a000504 <Board_GPIO_Init>
   Board_ADC_Init();
1a000634:	f7ff ff86 	bl	1a000544 <Board_ADC_Init>
   Board_SPI_Init();
1a000638:	f7ff ff9c 	bl	1a000574 <Board_SPI_Init>
   Board_I2C_Init();
1a00063c:	f7ff ffb6 	bl	1a0005ac <Board_I2C_Init>

   Board_LED_Init();
1a000640:	f7ff ff1e 	bl	1a000480 <Board_LED_Init>
   Board_TEC_Init();
1a000644:	f7ff ff3e 	bl	1a0004c4 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000648:	f000 fc42 	bl	1a000ed0 <SystemCoreClockUpdate>
}
1a00064c:	bd08      	pop	{r3, pc}
1a00064e:	bf00      	nop
1a000650:	400f4000 	.word	0x400f4000

1a000654 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a000654:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a000656:	b2c0      	uxtb	r0, r0
1a000658:	f7ff ffcc 	bl	1a0005f4 <Board_UARTPutChar>
}
1a00065c:	bd08      	pop	{r3, pc}

1a00065e <__stdio_getchar>:

int __stdio_getchar()
{
1a00065e:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a000660:	f7ff ffd2 	bl	1a000608 <Board_UARTGetChar>
}
1a000664:	bd08      	pop	{r3, pc}

1a000666 <__stdio_init>:

void __stdio_init()
{
1a000666:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000668:	f7ff ffb2 	bl	1a0005d0 <Board_Debug_Init>
1a00066c:	bd08      	pop	{r3, pc}
1a00066e:	Address 0x000000001a00066e is out of bounds.


1a000670 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000670:	2300      	movs	r3, #0
1a000672:	2b1c      	cmp	r3, #28
1a000674:	d812      	bhi.n	1a00069c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000676:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000678:	4a09      	ldr	r2, [pc, #36]	; (1a0006a0 <Board_SetupMuxing+0x30>)
1a00067a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00067e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000682:	784a      	ldrb	r2, [r1, #1]
1a000684:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000686:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00068a:	4906      	ldr	r1, [pc, #24]	; (1a0006a4 <Board_SetupMuxing+0x34>)
1a00068c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000690:	3301      	adds	r3, #1
1a000692:	2b1c      	cmp	r3, #28
1a000694:	d9f0      	bls.n	1a000678 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000696:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00069a:	4770      	bx	lr
1a00069c:	4770      	bx	lr
1a00069e:	bf00      	nop
1a0006a0:	1a003300 	.word	0x1a003300
1a0006a4:	40086000 	.word	0x40086000

1a0006a8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0006a8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0006aa:	4a17      	ldr	r2, [pc, #92]	; (1a000708 <Board_SetupClocking+0x60>)
1a0006ac:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0006b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0006b4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0006b8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0006bc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0006c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0006c4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0006c8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0006cc:	2201      	movs	r2, #1
1a0006ce:	490f      	ldr	r1, [pc, #60]	; (1a00070c <Board_SetupClocking+0x64>)
1a0006d0:	2006      	movs	r0, #6
1a0006d2:	f000 fc09 	bl	1a000ee8 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0006d6:	2400      	movs	r4, #0
1a0006d8:	b14c      	cbz	r4, 1a0006ee <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0006da:	4b0b      	ldr	r3, [pc, #44]	; (1a000708 <Board_SetupClocking+0x60>)
1a0006dc:	685a      	ldr	r2, [r3, #4]
1a0006de:	f022 020c 	bic.w	r2, r2, #12
1a0006e2:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0006e4:	685a      	ldr	r2, [r3, #4]
1a0006e6:	f042 0203 	orr.w	r2, r2, #3
1a0006ea:	605a      	str	r2, [r3, #4]
}
1a0006ec:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0006ee:	4808      	ldr	r0, [pc, #32]	; (1a000710 <Board_SetupClocking+0x68>)
1a0006f0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0006f4:	2301      	movs	r3, #1
1a0006f6:	788a      	ldrb	r2, [r1, #2]
1a0006f8:	7849      	ldrb	r1, [r1, #1]
1a0006fa:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0006fe:	f000 fb43 	bl	1a000d88 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000702:	3401      	adds	r4, #1
1a000704:	e7e8      	b.n	1a0006d8 <Board_SetupClocking+0x30>
1a000706:	bf00      	nop
1a000708:	40043000 	.word	0x40043000
1a00070c:	0c28cb00 	.word	0x0c28cb00
1a000710:	1a0032fc 	.word	0x1a0032fc

1a000714 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000714:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000716:	f7ff ffab 	bl	1a000670 <Board_SetupMuxing>
    Board_SetupClocking();
1a00071a:	f7ff ffc5 	bl	1a0006a8 <Board_SetupClocking>
}
1a00071e:	bd08      	pop	{r3, pc}

1a000720 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000720:	4b09      	ldr	r3, [pc, #36]	; (1a000748 <Chip_UART_GetIndex+0x28>)
1a000722:	4298      	cmp	r0, r3
1a000724:	d009      	beq.n	1a00073a <Chip_UART_GetIndex+0x1a>
1a000726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00072a:	4298      	cmp	r0, r3
1a00072c:	d007      	beq.n	1a00073e <Chip_UART_GetIndex+0x1e>
1a00072e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000732:	4298      	cmp	r0, r3
1a000734:	d005      	beq.n	1a000742 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000736:	2000      	movs	r0, #0
1a000738:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00073a:	2002      	movs	r0, #2
1a00073c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00073e:	2003      	movs	r0, #3
1a000740:	4770      	bx	lr
			return 1;
1a000742:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000744:	4770      	bx	lr
1a000746:	bf00      	nop
1a000748:	400c1000 	.word	0x400c1000

1a00074c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00074c:	b530      	push	{r4, r5, lr}
1a00074e:	b083      	sub	sp, #12
1a000750:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000752:	f7ff ffe5 	bl	1a000720 <Chip_UART_GetIndex>
1a000756:	2301      	movs	r3, #1
1a000758:	461a      	mov	r2, r3
1a00075a:	4619      	mov	r1, r3
1a00075c:	4d0e      	ldr	r5, [pc, #56]	; (1a000798 <Chip_UART_Init+0x4c>)
1a00075e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000762:	f000 fb57 	bl	1a000e14 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000766:	2307      	movs	r3, #7
1a000768:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00076a:	2300      	movs	r3, #0
1a00076c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00076e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000770:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000772:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000774:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000776:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000778:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00077a:	4b08      	ldr	r3, [pc, #32]	; (1a00079c <Chip_UART_Init+0x50>)
1a00077c:	429c      	cmp	r4, r3
1a00077e:	d006      	beq.n	1a00078e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000780:	2303      	movs	r3, #3
1a000782:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000784:	2310      	movs	r3, #16
1a000786:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000788:	9b01      	ldr	r3, [sp, #4]
}
1a00078a:	b003      	add	sp, #12
1a00078c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00078e:	2300      	movs	r3, #0
1a000790:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000792:	69a3      	ldr	r3, [r4, #24]
1a000794:	9301      	str	r3, [sp, #4]
1a000796:	e7f3      	b.n	1a000780 <Chip_UART_Init+0x34>
1a000798:	1a00337c 	.word	0x1a00337c
1a00079c:	40082000 	.word	0x40082000

1a0007a0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0007a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0007a4:	b083      	sub	sp, #12
1a0007a6:	9001      	str	r0, [sp, #4]
1a0007a8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0007aa:	f7ff ffb9 	bl	1a000720 <Chip_UART_GetIndex>
1a0007ae:	4b32      	ldr	r3, [pc, #200]	; (1a000878 <Chip_UART_SetBaudFDR+0xd8>)
1a0007b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0007b4:	f000 fb66 	bl	1a000e84 <Chip_Clock_GetRate>
1a0007b8:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0007ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0007be:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0007c0:	f04f 0b00 	mov.w	fp, #0
1a0007c4:	46a2      	mov	sl, r4
1a0007c6:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0007c8:	e02a      	b.n	1a000820 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0007ca:	4242      	negs	r2, r0
				div ++;
1a0007cc:	1c4b      	adds	r3, r1, #1
1a0007ce:	e017      	b.n	1a000800 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0007d0:	b30a      	cbz	r2, 1a000816 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0007d2:	4617      	mov	r7, r2
			sd = d;
1a0007d4:	46ab      	mov	fp, r5
			sm = m;
1a0007d6:	46a2      	mov	sl, r4
			sdiv = div;
1a0007d8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0007da:	3501      	adds	r5, #1
1a0007dc:	42ac      	cmp	r4, r5
1a0007de:	d91e      	bls.n	1a00081e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0007e0:	0933      	lsrs	r3, r6, #4
1a0007e2:	0730      	lsls	r0, r6, #28
1a0007e4:	fba4 0100 	umull	r0, r1, r4, r0
1a0007e8:	fb04 1103 	mla	r1, r4, r3, r1
1a0007ec:	1962      	adds	r2, r4, r5
1a0007ee:	fb08 f202 	mul.w	r2, r8, r2
1a0007f2:	2300      	movs	r3, #0
1a0007f4:	f000 ff14 	bl	1a001620 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0007f8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0007fa:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0007fc:	2800      	cmp	r0, #0
1a0007fe:	dbe4      	blt.n	1a0007ca <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000800:	4297      	cmp	r7, r2
1a000802:	d3ea      	bcc.n	1a0007da <Chip_UART_SetBaudFDR+0x3a>
1a000804:	2b00      	cmp	r3, #0
1a000806:	d0e8      	beq.n	1a0007da <Chip_UART_SetBaudFDR+0x3a>
1a000808:	0c19      	lsrs	r1, r3, #16
1a00080a:	d1e6      	bne.n	1a0007da <Chip_UART_SetBaudFDR+0x3a>
1a00080c:	2b02      	cmp	r3, #2
1a00080e:	d8df      	bhi.n	1a0007d0 <Chip_UART_SetBaudFDR+0x30>
1a000810:	2d00      	cmp	r5, #0
1a000812:	d0dd      	beq.n	1a0007d0 <Chip_UART_SetBaudFDR+0x30>
1a000814:	e7e1      	b.n	1a0007da <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a000816:	4617      	mov	r7, r2
			sd = d;
1a000818:	46ab      	mov	fp, r5
			sm = m;
1a00081a:	46a2      	mov	sl, r4
			sdiv = div;
1a00081c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00081e:	3401      	adds	r4, #1
1a000820:	b11f      	cbz	r7, 1a00082a <Chip_UART_SetBaudFDR+0x8a>
1a000822:	2c0f      	cmp	r4, #15
1a000824:	d801      	bhi.n	1a00082a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a000826:	2500      	movs	r5, #0
1a000828:	e7d8      	b.n	1a0007dc <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00082a:	f1b9 0f00 	cmp.w	r9, #0
1a00082e:	d01e      	beq.n	1a00086e <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000830:	9a01      	ldr	r2, [sp, #4]
1a000832:	4611      	mov	r1, r2
1a000834:	68d3      	ldr	r3, [r2, #12]
1a000836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00083a:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a00083c:	fa5f f389 	uxtb.w	r3, r9
1a000840:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a000842:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000846:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000848:	68d3      	ldr	r3, [r2, #12]
1a00084a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00084e:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000850:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000854:	b2db      	uxtb	r3, r3
1a000856:	f00b 020f 	and.w	r2, fp, #15
1a00085a:	4313      	orrs	r3, r2
1a00085c:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00085e:	0933      	lsrs	r3, r6, #4
1a000860:	fb0a f303 	mul.w	r3, sl, r3
1a000864:	44da      	add	sl, fp
1a000866:	fb09 f90a 	mul.w	r9, r9, sl
1a00086a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00086e:	4648      	mov	r0, r9
1a000870:	b003      	add	sp, #12
1a000872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000876:	bf00      	nop
1a000878:	1a003374 	.word	0x1a003374

1a00087c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a00087c:	4b03      	ldr	r3, [pc, #12]	; (1a00088c <Chip_ADC_GetClockIndex+0x10>)
1a00087e:	4298      	cmp	r0, r3
1a000880:	d001      	beq.n	1a000886 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000882:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000884:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000886:	2004      	movs	r0, #4
1a000888:	4770      	bx	lr
1a00088a:	bf00      	nop
1a00088c:	400e4000 	.word	0x400e4000

1a000890 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000890:	b570      	push	{r4, r5, r6, lr}
1a000892:	460d      	mov	r5, r1
1a000894:	4614      	mov	r4, r2
1a000896:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000898:	f7ff fff0 	bl	1a00087c <Chip_ADC_GetClockIndex>
1a00089c:	f000 faf2 	bl	1a000e84 <Chip_Clock_GetRate>
	if (burstMode) {
1a0008a0:	b155      	cbz	r5, 1a0008b8 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a0008a2:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0008a6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0008aa:	0064      	lsls	r4, r4, #1
1a0008ac:	fbb0 f0f4 	udiv	r0, r0, r4
1a0008b0:	b2c0      	uxtb	r0, r0
1a0008b2:	3801      	subs	r0, #1
	return div;
}
1a0008b4:	b2c0      	uxtb	r0, r0
1a0008b6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a0008b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0008bc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0008c0:	e7f1      	b.n	1a0008a6 <getClkDiv+0x16>
1a0008c2:	Address 0x000000001a0008c2 is out of bounds.


1a0008c4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0008c4:	b538      	push	{r3, r4, r5, lr}
1a0008c6:	4605      	mov	r5, r0
1a0008c8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0008ca:	f7ff ffd7 	bl	1a00087c <Chip_ADC_GetClockIndex>
1a0008ce:	2301      	movs	r3, #1
1a0008d0:	461a      	mov	r2, r3
1a0008d2:	4619      	mov	r1, r3
1a0008d4:	f000 fa9e 	bl	1a000e14 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0008d8:	2100      	movs	r1, #0
1a0008da:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0008dc:	4a08      	ldr	r2, [pc, #32]	; (1a000900 <Chip_ADC_Init+0x3c>)
1a0008de:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0008e0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0008e2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0008e4:	230b      	movs	r3, #11
1a0008e6:	4628      	mov	r0, r5
1a0008e8:	f7ff ffd2 	bl	1a000890 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0008ec:	0200      	lsls	r0, r0, #8
1a0008ee:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0008f2:	7920      	ldrb	r0, [r4, #4]
1a0008f4:	0440      	lsls	r0, r0, #17
1a0008f6:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0008fa:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0008fc:	6028      	str	r0, [r5, #0]
}
1a0008fe:	bd38      	pop	{r3, r4, r5, pc}
1a000900:	00061a80 	.word	0x00061a80

1a000904 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000904:	b570      	push	{r4, r5, r6, lr}
1a000906:	4605      	mov	r5, r0
1a000908:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00090a:	6804      	ldr	r4, [r0, #0]
1a00090c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000910:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000914:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000916:	790b      	ldrb	r3, [r1, #4]
1a000918:	f1c3 030b 	rsb	r3, r3, #11
1a00091c:	b2db      	uxtb	r3, r3
1a00091e:	7949      	ldrb	r1, [r1, #5]
1a000920:	f7ff ffb6 	bl	1a000890 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000924:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000928:	7933      	ldrb	r3, [r6, #4]
1a00092a:	045b      	lsls	r3, r3, #17
1a00092c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000930:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000932:	602b      	str	r3, [r5, #0]
}
1a000934:	bd70      	pop	{r4, r5, r6, pc}

1a000936 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000936:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000938:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00093a:	680a      	ldr	r2, [r1, #0]
1a00093c:	f7ff ffe2 	bl	1a000904 <Chip_ADC_SetSampleRate>
}
1a000940:	bd08      	pop	{r3, pc}
1a000942:	Address 0x000000001a000942 is out of bounds.


1a000944 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000944:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000946:	680b      	ldr	r3, [r1, #0]
1a000948:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00094c:	d002      	beq.n	1a000954 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00094e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000952:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000954:	4607      	mov	r7, r0
1a000956:	2501      	movs	r5, #1
1a000958:	e03a      	b.n	1a0009d0 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00095a:	694b      	ldr	r3, [r1, #20]
1a00095c:	fb03 f302 	mul.w	r3, r3, r2
1a000960:	fbb3 f3f5 	udiv	r3, r3, r5
1a000964:	e01c      	b.n	1a0009a0 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000966:	461c      	mov	r4, r3
	if (val < 0)
1a000968:	ebb0 0c04 	subs.w	ip, r0, r4
1a00096c:	d427      	bmi.n	1a0009be <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a00096e:	4567      	cmp	r7, ip
1a000970:	d906      	bls.n	1a000980 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000972:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000974:	1c77      	adds	r7, r6, #1
1a000976:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000978:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00097a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00097c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00097e:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000980:	3201      	adds	r2, #1
1a000982:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000986:	dc1d      	bgt.n	1a0009c4 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000988:	680c      	ldr	r4, [r1, #0]
1a00098a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00098e:	d0e4      	beq.n	1a00095a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000990:	1c73      	adds	r3, r6, #1
1a000992:	fa02 fc03 	lsl.w	ip, r2, r3
1a000996:	694b      	ldr	r3, [r1, #20]
1a000998:	fb03 f30c 	mul.w	r3, r3, ip
1a00099c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0009a0:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a0009dc <pll_calc_divs+0x98>
1a0009a4:	4563      	cmp	r3, ip
1a0009a6:	d9eb      	bls.n	1a000980 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0009a8:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a0009e0 <pll_calc_divs+0x9c>
1a0009ac:	4563      	cmp	r3, ip
1a0009ae:	d809      	bhi.n	1a0009c4 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a0009b0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0009b4:	d1d7      	bne.n	1a000966 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a0009b6:	1c74      	adds	r4, r6, #1
1a0009b8:	fa23 f404 	lsr.w	r4, r3, r4
1a0009bc:	e7d4      	b.n	1a000968 <pll_calc_divs+0x24>
		return -val;
1a0009be:	f1cc 0c00 	rsb	ip, ip, #0
1a0009c2:	e7d4      	b.n	1a00096e <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a0009c4:	3601      	adds	r6, #1
1a0009c6:	2e03      	cmp	r6, #3
1a0009c8:	dc01      	bgt.n	1a0009ce <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a0009ca:	2201      	movs	r2, #1
1a0009cc:	e7d9      	b.n	1a000982 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a0009ce:	3501      	adds	r5, #1
1a0009d0:	2d04      	cmp	r5, #4
1a0009d2:	dc01      	bgt.n	1a0009d8 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a0009d4:	2600      	movs	r6, #0
1a0009d6:	e7f6      	b.n	1a0009c6 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a0009d8:	bcf0      	pop	{r4, r5, r6, r7}
1a0009da:	4770      	bx	lr
1a0009dc:	094c5eff 	.word	0x094c5eff
1a0009e0:	1312d000 	.word	0x1312d000

1a0009e4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0009e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0009e6:	b099      	sub	sp, #100	; 0x64
1a0009e8:	4605      	mov	r5, r0
1a0009ea:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0009ec:	225c      	movs	r2, #92	; 0x5c
1a0009ee:	2100      	movs	r1, #0
1a0009f0:	a801      	add	r0, sp, #4
1a0009f2:	f001 f855 	bl	1a001aa0 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0009f6:	2380      	movs	r3, #128	; 0x80
1a0009f8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0009fa:	6963      	ldr	r3, [r4, #20]
1a0009fc:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0009fe:	7923      	ldrb	r3, [r4, #4]
1a000a00:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000a04:	4669      	mov	r1, sp
1a000a06:	4628      	mov	r0, r5
1a000a08:	f7ff ff9c 	bl	1a000944 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000a0c:	9b06      	ldr	r3, [sp, #24]
1a000a0e:	42ab      	cmp	r3, r5
1a000a10:	d027      	beq.n	1a000a62 <pll_get_frac+0x7e>
	if (val < 0)
1a000a12:	1aeb      	subs	r3, r5, r3
1a000a14:	d42e      	bmi.n	1a000a74 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000a16:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000a18:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000a1e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000a20:	6963      	ldr	r3, [r4, #20]
1a000a22:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000a24:	7923      	ldrb	r3, [r4, #4]
1a000a26:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000a2a:	a910      	add	r1, sp, #64	; 0x40
1a000a2c:	4628      	mov	r0, r5
1a000a2e:	f7ff ff89 	bl	1a000944 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000a32:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000a34:	42ab      	cmp	r3, r5
1a000a36:	d01f      	beq.n	1a000a78 <pll_get_frac+0x94>
	if (val < 0)
1a000a38:	1aeb      	subs	r3, r5, r3
1a000a3a:	d425      	bmi.n	1a000a88 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000a3c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000a3e:	4b2b      	ldr	r3, [pc, #172]	; (1a000aec <pll_get_frac+0x108>)
1a000a40:	429d      	cmp	r5, r3
1a000a42:	d923      	bls.n	1a000a8c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000a44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000a46:	1aed      	subs	r5, r5, r3
1a000a48:	d433      	bmi.n	1a000ab2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000a4a:	42ae      	cmp	r6, r5
1a000a4c:	dc3b      	bgt.n	1a000ac6 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000a4e:	42be      	cmp	r6, r7
1a000a50:	dc31      	bgt.n	1a000ab6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000a52:	466d      	mov	r5, sp
1a000a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a60:	e006      	b.n	1a000a70 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000a62:	466d      	mov	r5, sp
1a000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000a70:	b019      	add	sp, #100	; 0x64
1a000a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000a74:	425b      	negs	r3, r3
1a000a76:	e7ce      	b.n	1a000a16 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000a78:	ad10      	add	r5, sp, #64	; 0x40
1a000a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000a86:	e7f3      	b.n	1a000a70 <pll_get_frac+0x8c>
		return -val;
1a000a88:	425b      	negs	r3, r3
1a000a8a:	e7d7      	b.n	1a000a3c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000a8c:	2340      	movs	r3, #64	; 0x40
1a000a8e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000a90:	6963      	ldr	r3, [r4, #20]
1a000a92:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000a94:	a908      	add	r1, sp, #32
1a000a96:	4628      	mov	r0, r5
1a000a98:	f7ff ff54 	bl	1a000944 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000a9e:	42ab      	cmp	r3, r5
1a000aa0:	d1d0      	bne.n	1a000a44 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000aa2:	ad08      	add	r5, sp, #32
1a000aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000aa8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000ab0:	e7de      	b.n	1a000a70 <pll_get_frac+0x8c>
		return -val;
1a000ab2:	426d      	negs	r5, r5
1a000ab4:	e7c9      	b.n	1a000a4a <pll_get_frac+0x66>
			*ppll = pll[2];
1a000ab6:	ad10      	add	r5, sp, #64	; 0x40
1a000ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000abc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ac4:	e7d4      	b.n	1a000a70 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000ac6:	42af      	cmp	r7, r5
1a000ac8:	db07      	blt.n	1a000ada <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000aca:	ad08      	add	r5, sp, #32
1a000acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ad0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ad4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ad8:	e7ca      	b.n	1a000a70 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000ada:	ad10      	add	r5, sp, #64	; 0x40
1a000adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000ae0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000ae8:	e7c2      	b.n	1a000a70 <pll_get_frac+0x8c>
1a000aea:	bf00      	nop
1a000aec:	068e7780 	.word	0x068e7780

1a000af0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000af0:	b430      	push	{r4, r5}
1a000af2:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000af4:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000af6:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000af8:	e000      	b.n	1a000afc <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000afa:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000afc:	281c      	cmp	r0, #28
1a000afe:	d118      	bne.n	1a000b32 <Chip_Clock_FindBaseClock+0x42>
1a000b00:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000b04:	0051      	lsls	r1, r2, #1
1a000b06:	4a0c      	ldr	r2, [pc, #48]	; (1a000b38 <Chip_Clock_FindBaseClock+0x48>)
1a000b08:	440a      	add	r2, r1
1a000b0a:	7914      	ldrb	r4, [r2, #4]
1a000b0c:	4284      	cmp	r4, r0
1a000b0e:	d010      	beq.n	1a000b32 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000b10:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000b14:	004a      	lsls	r2, r1, #1
1a000b16:	4908      	ldr	r1, [pc, #32]	; (1a000b38 <Chip_Clock_FindBaseClock+0x48>)
1a000b18:	5a8a      	ldrh	r2, [r1, r2]
1a000b1a:	42aa      	cmp	r2, r5
1a000b1c:	d8ed      	bhi.n	1a000afa <Chip_Clock_FindBaseClock+0xa>
1a000b1e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000b22:	0051      	lsls	r1, r2, #1
1a000b24:	4a04      	ldr	r2, [pc, #16]	; (1a000b38 <Chip_Clock_FindBaseClock+0x48>)
1a000b26:	440a      	add	r2, r1
1a000b28:	8852      	ldrh	r2, [r2, #2]
1a000b2a:	42aa      	cmp	r2, r5
1a000b2c:	d3e5      	bcc.n	1a000afa <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000b2e:	4620      	mov	r0, r4
1a000b30:	e7e4      	b.n	1a000afc <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000b32:	bc30      	pop	{r4, r5}
1a000b34:	4770      	bx	lr
1a000b36:	bf00      	nop
1a000b38:	1a003390 	.word	0x1a003390

1a000b3c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000b3c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000b42:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000b44:	4a0d      	ldr	r2, [pc, #52]	; (1a000b7c <Chip_Clock_EnableCrystal+0x40>)
1a000b46:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000b48:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000b4c:	6992      	ldr	r2, [r2, #24]
1a000b4e:	428a      	cmp	r2, r1
1a000b50:	d001      	beq.n	1a000b56 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000b52:	4a0a      	ldr	r2, [pc, #40]	; (1a000b7c <Chip_Clock_EnableCrystal+0x40>)
1a000b54:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000b56:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000b5a:	4a09      	ldr	r2, [pc, #36]	; (1a000b80 <Chip_Clock_EnableCrystal+0x44>)
1a000b5c:	6811      	ldr	r1, [r2, #0]
1a000b5e:	4a09      	ldr	r2, [pc, #36]	; (1a000b84 <Chip_Clock_EnableCrystal+0x48>)
1a000b60:	4291      	cmp	r1, r2
1a000b62:	d901      	bls.n	1a000b68 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000b64:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000b68:	4a04      	ldr	r2, [pc, #16]	; (1a000b7c <Chip_Clock_EnableCrystal+0x40>)
1a000b6a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000b6c:	9b01      	ldr	r3, [sp, #4]
1a000b6e:	1e5a      	subs	r2, r3, #1
1a000b70:	9201      	str	r2, [sp, #4]
1a000b72:	2b00      	cmp	r3, #0
1a000b74:	d1fa      	bne.n	1a000b6c <Chip_Clock_EnableCrystal+0x30>
}
1a000b76:	b002      	add	sp, #8
1a000b78:	4770      	bx	lr
1a000b7a:	bf00      	nop
1a000b7c:	40050000 	.word	0x40050000
1a000b80:	1a0032f8 	.word	0x1a0032f8
1a000b84:	01312cff 	.word	0x01312cff

1a000b88 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000b88:	3012      	adds	r0, #18
1a000b8a:	4b05      	ldr	r3, [pc, #20]	; (1a000ba0 <Chip_Clock_GetDividerSource+0x18>)
1a000b8c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000b90:	f010 0f01 	tst.w	r0, #1
1a000b94:	d102      	bne.n	1a000b9c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000b96:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000b9a:	4770      	bx	lr
		return CLKINPUT_PD;
1a000b9c:	2011      	movs	r0, #17
}
1a000b9e:	4770      	bx	lr
1a000ba0:	40050000 	.word	0x40050000

1a000ba4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000ba4:	f100 0212 	add.w	r2, r0, #18
1a000ba8:	4b03      	ldr	r3, [pc, #12]	; (1a000bb8 <Chip_Clock_GetDividerDivisor+0x14>)
1a000baa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000bae:	4b03      	ldr	r3, [pc, #12]	; (1a000bbc <Chip_Clock_GetDividerDivisor+0x18>)
1a000bb0:	5c18      	ldrb	r0, [r3, r0]
}
1a000bb2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000bb6:	4770      	bx	lr
1a000bb8:	40050000 	.word	0x40050000
1a000bbc:	1a003388 	.word	0x1a003388

1a000bc0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000bc0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000bc2:	2810      	cmp	r0, #16
1a000bc4:	d80a      	bhi.n	1a000bdc <Chip_Clock_GetClockInputHz+0x1c>
1a000bc6:	e8df f000 	tbb	[pc, r0]
1a000bca:	0b44      	.short	0x0b44
1a000bcc:	0921180d 	.word	0x0921180d
1a000bd0:	2d2a2724 	.word	0x2d2a2724
1a000bd4:	34300909 	.word	0x34300909
1a000bd8:	3c38      	.short	0x3c38
1a000bda:	40          	.byte	0x40
1a000bdb:	00          	.byte	0x00
	uint32_t rate = 0;
1a000bdc:	2000      	movs	r0, #0
1a000bde:	e03a      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000be0:	481e      	ldr	r0, [pc, #120]	; (1a000c5c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000be2:	e038      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000be4:	4b1e      	ldr	r3, [pc, #120]	; (1a000c60 <Chip_Clock_GetClockInputHz+0xa0>)
1a000be6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000bea:	f003 0307 	and.w	r3, r3, #7
1a000bee:	2b04      	cmp	r3, #4
1a000bf0:	d001      	beq.n	1a000bf6 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000bf2:	481c      	ldr	r0, [pc, #112]	; (1a000c64 <Chip_Clock_GetClockInputHz+0xa4>)
1a000bf4:	e02f      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a000bf6:	2000      	movs	r0, #0
1a000bf8:	e02d      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000bfa:	4b19      	ldr	r3, [pc, #100]	; (1a000c60 <Chip_Clock_GetClockInputHz+0xa0>)
1a000bfc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000c00:	f003 0307 	and.w	r3, r3, #7
1a000c04:	2b04      	cmp	r3, #4
1a000c06:	d027      	beq.n	1a000c58 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000c08:	4816      	ldr	r0, [pc, #88]	; (1a000c64 <Chip_Clock_GetClockInputHz+0xa4>)
1a000c0a:	e024      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000c0c:	4b16      	ldr	r3, [pc, #88]	; (1a000c68 <Chip_Clock_GetClockInputHz+0xa8>)
1a000c0e:	6818      	ldr	r0, [r3, #0]
		break;
1a000c10:	e021      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000c12:	4b16      	ldr	r3, [pc, #88]	; (1a000c6c <Chip_Clock_GetClockInputHz+0xac>)
1a000c14:	6818      	ldr	r0, [r3, #0]
		break;
1a000c16:	e01e      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000c18:	4b15      	ldr	r3, [pc, #84]	; (1a000c70 <Chip_Clock_GetClockInputHz+0xb0>)
1a000c1a:	6818      	ldr	r0, [r3, #0]
		break;
1a000c1c:	e01b      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000c1e:	4b14      	ldr	r3, [pc, #80]	; (1a000c70 <Chip_Clock_GetClockInputHz+0xb0>)
1a000c20:	6858      	ldr	r0, [r3, #4]
		break;
1a000c22:	e018      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000c24:	f000 f868 	bl	1a000cf8 <Chip_Clock_GetMainPLLHz>
		break;
1a000c28:	e015      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000c2a:	2100      	movs	r1, #0
1a000c2c:	f000 f89a 	bl	1a000d64 <Chip_Clock_GetDivRate>
		break;
1a000c30:	e011      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000c32:	2101      	movs	r1, #1
1a000c34:	f000 f896 	bl	1a000d64 <Chip_Clock_GetDivRate>
		break;
1a000c38:	e00d      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000c3a:	2102      	movs	r1, #2
1a000c3c:	f000 f892 	bl	1a000d64 <Chip_Clock_GetDivRate>
		break;
1a000c40:	e009      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000c42:	2103      	movs	r1, #3
1a000c44:	f000 f88e 	bl	1a000d64 <Chip_Clock_GetDivRate>
		break;
1a000c48:	e005      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000c4a:	2104      	movs	r1, #4
1a000c4c:	f000 f88a 	bl	1a000d64 <Chip_Clock_GetDivRate>
		break;
1a000c50:	e001      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a000c52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000c56:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000c58:	4806      	ldr	r0, [pc, #24]	; (1a000c74 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000c5a:	e7fc      	b.n	1a000c56 <Chip_Clock_GetClockInputHz+0x96>
1a000c5c:	00b71b00 	.word	0x00b71b00
1a000c60:	40043000 	.word	0x40043000
1a000c64:	017d7840 	.word	0x017d7840
1a000c68:	1a0032cc 	.word	0x1a0032cc
1a000c6c:	1a0032f8 	.word	0x1a0032f8
1a000c70:	1000088c 	.word	0x1000088c
1a000c74:	02faf080 	.word	0x02faf080

1a000c78 <Chip_Clock_CalcMainPLLValue>:
{
1a000c78:	b538      	push	{r3, r4, r5, lr}
1a000c7a:	4605      	mov	r5, r0
1a000c7c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000c7e:	7908      	ldrb	r0, [r1, #4]
1a000c80:	f7ff ff9e 	bl	1a000bc0 <Chip_Clock_GetClockInputHz>
1a000c84:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000c86:	4b19      	ldr	r3, [pc, #100]	; (1a000cec <Chip_Clock_CalcMainPLLValue+0x74>)
1a000c88:	442b      	add	r3, r5
1a000c8a:	4a19      	ldr	r2, [pc, #100]	; (1a000cf0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000c8c:	4293      	cmp	r3, r2
1a000c8e:	d821      	bhi.n	1a000cd4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000c90:	b318      	cbz	r0, 1a000cda <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000c92:	2380      	movs	r3, #128	; 0x80
1a000c94:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000c96:	2300      	movs	r3, #0
1a000c98:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000c9a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000c9c:	fbb5 f3f0 	udiv	r3, r5, r0
1a000ca0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000ca2:	4a14      	ldr	r2, [pc, #80]	; (1a000cf4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000ca4:	4295      	cmp	r5, r2
1a000ca6:	d903      	bls.n	1a000cb0 <Chip_Clock_CalcMainPLLValue+0x38>
1a000ca8:	fb03 f000 	mul.w	r0, r3, r0
1a000cac:	42a8      	cmp	r0, r5
1a000cae:	d007      	beq.n	1a000cc0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000cb0:	4621      	mov	r1, r4
1a000cb2:	4628      	mov	r0, r5
1a000cb4:	f7ff fe96 	bl	1a0009e4 <pll_get_frac>
		if (!ppll->nsel) {
1a000cb8:	68a3      	ldr	r3, [r4, #8]
1a000cba:	b18b      	cbz	r3, 1a000ce0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000cbc:	3b01      	subs	r3, #1
1a000cbe:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000cc0:	6923      	ldr	r3, [r4, #16]
1a000cc2:	b183      	cbz	r3, 1a000ce6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000cc4:	68e2      	ldr	r2, [r4, #12]
1a000cc6:	b10a      	cbz	r2, 1a000ccc <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000cc8:	3a01      	subs	r2, #1
1a000cca:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000ccc:	3b01      	subs	r3, #1
1a000cce:	6123      	str	r3, [r4, #16]
	return 0;
1a000cd0:	2000      	movs	r0, #0
}
1a000cd2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000cd8:	e7fb      	b.n	1a000cd2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000cde:	e7f8      	b.n	1a000cd2 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ce4:	e7f5      	b.n	1a000cd2 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000cea:	e7f2      	b.n	1a000cd2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000cec:	ff6b3a10 	.word	0xff6b3a10
1a000cf0:	0b940510 	.word	0x0b940510
1a000cf4:	094c5eff 	.word	0x094c5eff

1a000cf8 <Chip_Clock_GetMainPLLHz>:
{
1a000cf8:	b530      	push	{r4, r5, lr}
1a000cfa:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000cfc:	4d17      	ldr	r5, [pc, #92]	; (1a000d5c <Chip_Clock_GetMainPLLHz+0x64>)
1a000cfe:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000d00:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000d04:	f7ff ff5c 	bl	1a000bc0 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000d08:	4b15      	ldr	r3, [pc, #84]	; (1a000d60 <Chip_Clock_GetMainPLLHz+0x68>)
1a000d0a:	681b      	ldr	r3, [r3, #0]
1a000d0c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000d0e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000d10:	f013 0f01 	tst.w	r3, #1
1a000d14:	d020      	beq.n	1a000d58 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a000d16:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000d1a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000d1e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000d22:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000d26:	3301      	adds	r3, #1
	n = nsel + 1;
1a000d28:	3201      	adds	r2, #1
	p = ptab[psel];
1a000d2a:	f10d 0c08 	add.w	ip, sp, #8
1a000d2e:	4461      	add	r1, ip
1a000d30:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000d34:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000d38:	d108      	bne.n	1a000d4c <Chip_Clock_GetMainPLLHz+0x54>
1a000d3a:	b93d      	cbnz	r5, 1a000d4c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000d3c:	0049      	lsls	r1, r1, #1
1a000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
1a000d42:	fbb0 f0f2 	udiv	r0, r0, r2
1a000d46:	fb00 f003 	mul.w	r0, r0, r3
1a000d4a:	e003      	b.n	1a000d54 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a000d4c:	fbb0 f0f2 	udiv	r0, r0, r2
1a000d50:	fb03 f000 	mul.w	r0, r3, r0
}
1a000d54:	b003      	add	sp, #12
1a000d56:	bd30      	pop	{r4, r5, pc}
		return 0;
1a000d58:	2000      	movs	r0, #0
1a000d5a:	e7fb      	b.n	1a000d54 <Chip_Clock_GetMainPLLHz+0x5c>
1a000d5c:	40050000 	.word	0x40050000
1a000d60:	1a003384 	.word	0x1a003384

1a000d64 <Chip_Clock_GetDivRate>:
{
1a000d64:	b538      	push	{r3, r4, r5, lr}
1a000d66:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000d68:	4608      	mov	r0, r1
1a000d6a:	f7ff ff0d 	bl	1a000b88 <Chip_Clock_GetDividerSource>
1a000d6e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000d70:	4620      	mov	r0, r4
1a000d72:	f7ff ff17 	bl	1a000ba4 <Chip_Clock_GetDividerDivisor>
1a000d76:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000d78:	4628      	mov	r0, r5
1a000d7a:	f7ff ff21 	bl	1a000bc0 <Chip_Clock_GetClockInputHz>
1a000d7e:	3401      	adds	r4, #1
}
1a000d80:	fbb0 f0f4 	udiv	r0, r0, r4
1a000d84:	bd38      	pop	{r3, r4, r5, pc}
1a000d86:	Address 0x000000001a000d86 is out of bounds.


1a000d88 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000d88:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000d8a:	f100 0416 	add.w	r4, r0, #22
1a000d8e:	00a4      	lsls	r4, r4, #2
1a000d90:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000d94:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000d98:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000d9a:	281b      	cmp	r0, #27
1a000d9c:	d813      	bhi.n	1a000dc6 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000d9e:	2911      	cmp	r1, #17
1a000da0:	d01a      	beq.n	1a000dd8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000da2:	4d0e      	ldr	r5, [pc, #56]	; (1a000ddc <Chip_Clock_SetBaseClock+0x54>)
1a000da4:	4025      	ands	r5, r4

			if (autoblocken) {
1a000da6:	b10a      	cbz	r2, 1a000dac <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000da8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000dac:	b10b      	cbz	r3, 1a000db2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000dae:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000db2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000db6:	3016      	adds	r0, #22
1a000db8:	0080      	lsls	r0, r0, #2
1a000dba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000dbe:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000dc2:	6045      	str	r5, [r0, #4]
1a000dc4:	e008      	b.n	1a000dd8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000dc6:	f044 0401 	orr.w	r4, r4, #1
1a000dca:	3016      	adds	r0, #22
1a000dcc:	0080      	lsls	r0, r0, #2
1a000dce:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000dd2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000dd6:	6044      	str	r4, [r0, #4]
	}
}
1a000dd8:	bc30      	pop	{r4, r5}
1a000dda:	4770      	bx	lr
1a000ddc:	e0fff7fe 	.word	0xe0fff7fe

1a000de0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000de0:	281b      	cmp	r0, #27
1a000de2:	d80c      	bhi.n	1a000dfe <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000de4:	3016      	adds	r0, #22
1a000de6:	0080      	lsls	r0, r0, #2
1a000de8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000dec:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000df0:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000df2:	f010 0f01 	tst.w	r0, #1
1a000df6:	d104      	bne.n	1a000e02 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000df8:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000dfc:	4770      	bx	lr
		return CLKINPUT_PD;
1a000dfe:	2011      	movs	r0, #17
1a000e00:	4770      	bx	lr
		return CLKINPUT_PD;
1a000e02:	2011      	movs	r0, #17
}
1a000e04:	4770      	bx	lr

1a000e06 <Chip_Clock_GetBaseClocktHz>:
{
1a000e06:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000e08:	f7ff ffea 	bl	1a000de0 <Chip_Clock_GetBaseClock>
1a000e0c:	f7ff fed8 	bl	1a000bc0 <Chip_Clock_GetClockInputHz>
}
1a000e10:	bd08      	pop	{r3, pc}
1a000e12:	Address 0x000000001a000e12 is out of bounds.


1a000e14 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000e14:	b971      	cbnz	r1, 1a000e34 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a000e16:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000e18:	b10a      	cbz	r2, 1a000e1e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000e1a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000e1e:	2b02      	cmp	r3, #2
1a000e20:	d00a      	beq.n	1a000e38 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000e22:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000e26:	d30a      	bcc.n	1a000e3e <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000e28:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000e2c:	4b06      	ldr	r3, [pc, #24]	; (1a000e48 <Chip_Clock_EnableOpts+0x34>)
1a000e2e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000e32:	4770      	bx	lr
		reg |= (1 << 1);
1a000e34:	2103      	movs	r1, #3
1a000e36:	e7ef      	b.n	1a000e18 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000e38:	f041 0120 	orr.w	r1, r1, #32
1a000e3c:	e7f1      	b.n	1a000e22 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000e3e:	3020      	adds	r0, #32
1a000e40:	4b02      	ldr	r3, [pc, #8]	; (1a000e4c <Chip_Clock_EnableOpts+0x38>)
1a000e42:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000e46:	4770      	bx	lr
1a000e48:	40052000 	.word	0x40052000
1a000e4c:	40051000 	.word	0x40051000

1a000e50 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000e50:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000e54:	d309      	bcc.n	1a000e6a <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000e56:	4a09      	ldr	r2, [pc, #36]	; (1a000e7c <Chip_Clock_Enable+0x2c>)
1a000e58:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000e5c:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000e60:	f043 0301 	orr.w	r3, r3, #1
1a000e64:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000e68:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000e6a:	4a05      	ldr	r2, [pc, #20]	; (1a000e80 <Chip_Clock_Enable+0x30>)
1a000e6c:	3020      	adds	r0, #32
1a000e6e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000e72:	f043 0301 	orr.w	r3, r3, #1
1a000e76:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a000e7a:	4770      	bx	lr
1a000e7c:	40052000 	.word	0x40052000
1a000e80:	40051000 	.word	0x40051000

1a000e84 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000e84:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000e86:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000e8a:	d309      	bcc.n	1a000ea0 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000e8c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000e90:	4a0d      	ldr	r2, [pc, #52]	; (1a000ec8 <Chip_Clock_GetRate+0x44>)
1a000e92:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000e96:	f014 0f01 	tst.w	r4, #1
1a000e9a:	d107      	bne.n	1a000eac <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a000e9c:	2000      	movs	r0, #0
	}

	return rate;
}
1a000e9e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000ea0:	f100 0320 	add.w	r3, r0, #32
1a000ea4:	4a09      	ldr	r2, [pc, #36]	; (1a000ecc <Chip_Clock_GetRate+0x48>)
1a000ea6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000eaa:	e7f4      	b.n	1a000e96 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000eac:	f7ff fe20 	bl	1a000af0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000eb0:	f7ff ffa9 	bl	1a000e06 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a000eb4:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000eb8:	d103      	bne.n	1a000ec2 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a000eba:	2301      	movs	r3, #1
		rate = rate / div;
1a000ebc:	fbb0 f0f3 	udiv	r0, r0, r3
1a000ec0:	e7ed      	b.n	1a000e9e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a000ec2:	2302      	movs	r3, #2
1a000ec4:	e7fa      	b.n	1a000ebc <Chip_Clock_GetRate+0x38>
1a000ec6:	bf00      	nop
1a000ec8:	40052000 	.word	0x40052000
1a000ecc:	40051000 	.word	0x40051000

1a000ed0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000ed0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000ed2:	2069      	movs	r0, #105	; 0x69
1a000ed4:	f7ff ffd6 	bl	1a000e84 <Chip_Clock_GetRate>
1a000ed8:	4b01      	ldr	r3, [pc, #4]	; (1a000ee0 <SystemCoreClockUpdate+0x10>)
1a000eda:	6018      	str	r0, [r3, #0]
}
1a000edc:	bd08      	pop	{r3, pc}
1a000ede:	bf00      	nop
1a000ee0:	100008dc 	.word	0x100008dc

1a000ee4 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000ee4:	4770      	bx	lr
1a000ee6:	Address 0x000000001a000ee6 is out of bounds.


1a000ee8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000ee8:	b570      	push	{r4, r5, r6, lr}
1a000eea:	b08a      	sub	sp, #40	; 0x28
1a000eec:	4605      	mov	r5, r0
1a000eee:	460e      	mov	r6, r1
1a000ef0:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000ef2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000ef6:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000ef8:	2806      	cmp	r0, #6
1a000efa:	d018      	beq.n	1a000f2e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000efc:	2300      	movs	r3, #0
1a000efe:	2201      	movs	r2, #1
1a000f00:	4629      	mov	r1, r5
1a000f02:	2004      	movs	r0, #4
1a000f04:	f7ff ff40 	bl	1a000d88 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000f08:	4a4a      	ldr	r2, [pc, #296]	; (1a001034 <Chip_SetupCoreClock+0x14c>)
1a000f0a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000f0c:	f043 0301 	orr.w	r3, r3, #1
1a000f10:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000f12:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000f16:	a901      	add	r1, sp, #4
1a000f18:	4630      	mov	r0, r6
1a000f1a:	f7ff fead 	bl	1a000c78 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000f1e:	4b46      	ldr	r3, [pc, #280]	; (1a001038 <Chip_SetupCoreClock+0x150>)
1a000f20:	429e      	cmp	r6, r3
1a000f22:	d916      	bls.n	1a000f52 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000f24:	9b01      	ldr	r3, [sp, #4]
1a000f26:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000f2a:	d003      	beq.n	1a000f34 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a000f2c:	e7fe      	b.n	1a000f2c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000f2e:	f7ff fe05 	bl	1a000b3c <Chip_Clock_EnableCrystal>
1a000f32:	e7e3      	b.n	1a000efc <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a000f34:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000f38:	d005      	beq.n	1a000f46 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000f3e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000f40:	2500      	movs	r5, #0
			direct = 1;
1a000f42:	2601      	movs	r6, #1
1a000f44:	e007      	b.n	1a000f56 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000f46:	9b04      	ldr	r3, [sp, #16]
1a000f48:	3301      	adds	r3, #1
1a000f4a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000f4c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000f4e:	2600      	movs	r6, #0
1a000f50:	e001      	b.n	1a000f56 <Chip_SetupCoreClock+0x6e>
1a000f52:	2500      	movs	r5, #0
1a000f54:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000f56:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000f5a:	9b01      	ldr	r3, [sp, #4]
1a000f5c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000f60:	9a05      	ldr	r2, [sp, #20]
1a000f62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000f66:	9a03      	ldr	r2, [sp, #12]
1a000f68:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000f6c:	9a04      	ldr	r2, [sp, #16]
1a000f6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000f72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000f76:	4a2f      	ldr	r2, [pc, #188]	; (1a001034 <Chip_SetupCoreClock+0x14c>)
1a000f78:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000f7a:	4b2e      	ldr	r3, [pc, #184]	; (1a001034 <Chip_SetupCoreClock+0x14c>)
1a000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000f7e:	f013 0f01 	tst.w	r3, #1
1a000f82:	d0fa      	beq.n	1a000f7a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000f84:	2300      	movs	r3, #0
1a000f86:	2201      	movs	r2, #1
1a000f88:	2109      	movs	r1, #9
1a000f8a:	2004      	movs	r0, #4
1a000f8c:	f7ff fefc 	bl	1a000d88 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000f90:	b306      	cbz	r6, 1a000fd4 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000f92:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000f96:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000f9a:	1e5a      	subs	r2, r3, #1
1a000f9c:	9209      	str	r2, [sp, #36]	; 0x24
1a000f9e:	2b00      	cmp	r3, #0
1a000fa0:	d1fa      	bne.n	1a000f98 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000fa2:	9b01      	ldr	r3, [sp, #4]
1a000fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000fa8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000faa:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000fae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000fb2:	9a05      	ldr	r2, [sp, #20]
1a000fb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000fb8:	9a03      	ldr	r2, [sp, #12]
1a000fba:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000fbe:	9a04      	ldr	r2, [sp, #16]
1a000fc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000fc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000fc8:	4a1a      	ldr	r2, [pc, #104]	; (1a001034 <Chip_SetupCoreClock+0x14c>)
1a000fca:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a000fcc:	2c00      	cmp	r4, #0
1a000fce:	d12e      	bne.n	1a00102e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a000fd0:	b00a      	add	sp, #40	; 0x28
1a000fd2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a000fd4:	2d00      	cmp	r5, #0
1a000fd6:	d0f9      	beq.n	1a000fcc <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000fd8:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000fdc:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a000fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000fe0:	1e5a      	subs	r2, r3, #1
1a000fe2:	9209      	str	r2, [sp, #36]	; 0x24
1a000fe4:	2b00      	cmp	r3, #0
1a000fe6:	d1fa      	bne.n	1a000fde <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a000fe8:	9b04      	ldr	r3, [sp, #16]
1a000fea:	1e5a      	subs	r2, r3, #1
1a000fec:	9204      	str	r2, [sp, #16]
1a000fee:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a000ff2:	9b01      	ldr	r3, [sp, #4]
1a000ff4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000ff8:	9905      	ldr	r1, [sp, #20]
1a000ffa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a000ffe:	9903      	ldr	r1, [sp, #12]
1a001000:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001004:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001008:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00100c:	4a09      	ldr	r2, [pc, #36]	; (1a001034 <Chip_SetupCoreClock+0x14c>)
1a00100e:	6453      	str	r3, [r2, #68]	; 0x44
1a001010:	e7dc      	b.n	1a000fcc <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001012:	480a      	ldr	r0, [pc, #40]	; (1a00103c <Chip_SetupCoreClock+0x154>)
1a001014:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001018:	78cb      	ldrb	r3, [r1, #3]
1a00101a:	788a      	ldrb	r2, [r1, #2]
1a00101c:	7849      	ldrb	r1, [r1, #1]
1a00101e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001022:	f7ff feb1 	bl	1a000d88 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001026:	3401      	adds	r4, #1
1a001028:	2c11      	cmp	r4, #17
1a00102a:	d9f2      	bls.n	1a001012 <Chip_SetupCoreClock+0x12a>
1a00102c:	e7d0      	b.n	1a000fd0 <Chip_SetupCoreClock+0xe8>
1a00102e:	2400      	movs	r4, #0
1a001030:	e7fa      	b.n	1a001028 <Chip_SetupCoreClock+0x140>
1a001032:	bf00      	nop
1a001034:	40050000 	.word	0x40050000
1a001038:	068e7780 	.word	0x068e7780
1a00103c:	1a0033fc 	.word	0x1a0033fc

1a001040 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001040:	4b03      	ldr	r3, [pc, #12]	; (1a001050 <Chip_SSP_GetClockIndex+0x10>)
1a001042:	4298      	cmp	r0, r3
1a001044:	d001      	beq.n	1a00104a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001046:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001048:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00104a:	20a5      	movs	r0, #165	; 0xa5
1a00104c:	4770      	bx	lr
1a00104e:	bf00      	nop
1a001050:	400c5000 	.word	0x400c5000

1a001054 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001054:	4b04      	ldr	r3, [pc, #16]	; (1a001068 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001056:	4298      	cmp	r0, r3
1a001058:	d002      	beq.n	1a001060 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00105a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00105e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001060:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001064:	4770      	bx	lr
1a001066:	bf00      	nop
1a001068:	400c5000 	.word	0x400c5000

1a00106c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00106c:	6803      	ldr	r3, [r0, #0]
1a00106e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001072:	0209      	lsls	r1, r1, #8
1a001074:	b289      	uxth	r1, r1
1a001076:	4319      	orrs	r1, r3
1a001078:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00107a:	6102      	str	r2, [r0, #16]
}
1a00107c:	4770      	bx	lr

1a00107e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00107e:	b570      	push	{r4, r5, r6, lr}
1a001080:	4606      	mov	r6, r0
1a001082:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001084:	f7ff ffe6 	bl	1a001054 <Chip_SSP_GetPeriphClockIndex>
1a001088:	f7ff fefc 	bl	1a000e84 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00108c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00108e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001092:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001094:	e000      	b.n	1a001098 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001096:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001098:	42ab      	cmp	r3, r5
1a00109a:	d90b      	bls.n	1a0010b4 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00109c:	1c4c      	adds	r4, r1, #1
1a00109e:	fb02 f304 	mul.w	r3, r2, r4
1a0010a2:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0010a6:	429d      	cmp	r5, r3
1a0010a8:	d2f6      	bcs.n	1a001098 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0010aa:	2cff      	cmp	r4, #255	; 0xff
1a0010ac:	d9f3      	bls.n	1a001096 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0010ae:	3202      	adds	r2, #2
				cr0_div = 0;
1a0010b0:	2100      	movs	r1, #0
1a0010b2:	e7f1      	b.n	1a001098 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0010b4:	4630      	mov	r0, r6
1a0010b6:	f7ff ffd9 	bl	1a00106c <Chip_SSP_SetClockRate>
}
1a0010ba:	bd70      	pop	{r4, r5, r6, pc}

1a0010bc <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0010bc:	b510      	push	{r4, lr}
1a0010be:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0010c0:	f7ff ffbe 	bl	1a001040 <Chip_SSP_GetClockIndex>
1a0010c4:	f7ff fec4 	bl	1a000e50 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0010c8:	4620      	mov	r0, r4
1a0010ca:	f7ff ffc3 	bl	1a001054 <Chip_SSP_GetPeriphClockIndex>
1a0010ce:	f7ff febf 	bl	1a000e50 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0010d2:	6863      	ldr	r3, [r4, #4]
1a0010d4:	f023 0304 	bic.w	r3, r3, #4
1a0010d8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0010da:	6823      	ldr	r3, [r4, #0]
1a0010dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0010e0:	f043 0307 	orr.w	r3, r3, #7
1a0010e4:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0010e6:	4902      	ldr	r1, [pc, #8]	; (1a0010f0 <Chip_SSP_Init+0x34>)
1a0010e8:	4620      	mov	r0, r4
1a0010ea:	f7ff ffc8 	bl	1a00107e <Chip_SSP_SetBitRate>
}
1a0010ee:	bd10      	pop	{r4, pc}
1a0010f0:	000186a0 	.word	0x000186a0

1a0010f4 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0010f4:	2901      	cmp	r1, #1
1a0010f6:	d109      	bne.n	1a00110c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a0010f8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0010fc:	0082      	lsls	r2, r0, #2
1a0010fe:	4b04      	ldr	r3, [pc, #16]	; (1a001110 <Chip_I2C_EventHandler+0x1c>)
1a001100:	4413      	add	r3, r2
1a001102:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001104:	7d13      	ldrb	r3, [r2, #20]
1a001106:	b2db      	uxtb	r3, r3
1a001108:	2b04      	cmp	r3, #4
1a00110a:	d0fb      	beq.n	1a001104 <Chip_I2C_EventHandler+0x10>
}
1a00110c:	4770      	bx	lr
1a00110e:	bf00      	nop
1a001110:	10000000 	.word	0x10000000

1a001114 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001114:	b570      	push	{r4, r5, r6, lr}
1a001116:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001118:	4e06      	ldr	r6, [pc, #24]	; (1a001134 <Chip_I2C_Init+0x20>)
1a00111a:	00c4      	lsls	r4, r0, #3
1a00111c:	1a22      	subs	r2, r4, r0
1a00111e:	0093      	lsls	r3, r2, #2
1a001120:	4433      	add	r3, r6
1a001122:	8898      	ldrh	r0, [r3, #4]
1a001124:	f7ff fe94 	bl	1a000e50 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001128:	1b64      	subs	r4, r4, r5
1a00112a:	00a3      	lsls	r3, r4, #2
1a00112c:	58f3      	ldr	r3, [r6, r3]
1a00112e:	226c      	movs	r2, #108	; 0x6c
1a001130:	619a      	str	r2, [r3, #24]
}
1a001132:	bd70      	pop	{r4, r5, r6, pc}
1a001134:	10000000 	.word	0x10000000

1a001138 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00113c:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00113e:	4e0b      	ldr	r6, [pc, #44]	; (1a00116c <Chip_I2C_SetClockRate+0x34>)
1a001140:	00c5      	lsls	r5, r0, #3
1a001142:	1a2b      	subs	r3, r5, r0
1a001144:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001148:	eb06 0308 	add.w	r3, r6, r8
1a00114c:	8898      	ldrh	r0, [r3, #4]
1a00114e:	f7ff fe99 	bl	1a000e84 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a001152:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001156:	f856 3008 	ldr.w	r3, [r6, r8]
1a00115a:	0842      	lsrs	r2, r0, #1
1a00115c:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00115e:	f856 3008 	ldr.w	r3, [r6, r8]
1a001162:	691a      	ldr	r2, [r3, #16]
1a001164:	1a80      	subs	r0, r0, r2
1a001166:	6158      	str	r0, [r3, #20]
}
1a001168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00116c:	10000000 	.word	0x10000000

1a001170 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001170:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001172:	4a0b      	ldr	r2, [pc, #44]	; (1a0011a0 <SystemInit+0x30>)
1a001174:	4b0b      	ldr	r3, [pc, #44]	; (1a0011a4 <SystemInit+0x34>)
1a001176:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001178:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a00117c:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00117e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001182:	2b20      	cmp	r3, #32
1a001184:	d004      	beq.n	1a001190 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a001186:	f7ff fac5 	bl	1a000714 <Board_SystemInit>
   Board_Init();
1a00118a:	f7ff fa4b 	bl	1a000624 <Board_Init>
}
1a00118e:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001190:	4a04      	ldr	r2, [pc, #16]	; (1a0011a4 <SystemInit+0x34>)
1a001192:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001196:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00119a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00119e:	e7f2      	b.n	1a001186 <SystemInit+0x16>
1a0011a0:	1a000000 	.word	0x1a000000
1a0011a4:	e000ed00 	.word	0xe000ed00

1a0011a8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0011a8:	4b04      	ldr	r3, [pc, #16]	; (1a0011bc <cyclesCounterInit+0x14>)
1a0011aa:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0011ac:	4a04      	ldr	r2, [pc, #16]	; (1a0011c0 <cyclesCounterInit+0x18>)
1a0011ae:	6813      	ldr	r3, [r2, #0]
1a0011b0:	f043 0301 	orr.w	r3, r3, #1
1a0011b4:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0011b6:	2001      	movs	r0, #1
1a0011b8:	4770      	bx	lr
1a0011ba:	bf00      	nop
1a0011bc:	10000038 	.word	0x10000038
1a0011c0:	e0001000 	.word	0xe0001000

1a0011c4 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a0011c4:	4b01      	ldr	r3, [pc, #4]	; (1a0011cc <tickRead+0x8>)
1a0011c6:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0011ca:	4770      	bx	lr
1a0011cc:	10000898 	.word	0x10000898

1a0011d0 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a0011d0:	b118      	cbz	r0, 1a0011da <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0011d2:	4b04      	ldr	r3, [pc, #16]	; (1a0011e4 <tickPowerSet+0x14>)
1a0011d4:	2207      	movs	r2, #7
1a0011d6:	601a      	str	r2, [r3, #0]
1a0011d8:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a0011da:	4b02      	ldr	r3, [pc, #8]	; (1a0011e4 <tickPowerSet+0x14>)
1a0011dc:	2200      	movs	r2, #0
1a0011de:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a0011e0:	4770      	bx	lr
1a0011e2:	bf00      	nop
1a0011e4:	e000e010 	.word	0xe000e010

1a0011e8 <tickInit>:
{
1a0011e8:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0011ea:	ea50 0401 	orrs.w	r4, r0, r1
1a0011ee:	d02a      	beq.n	1a001246 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0011f0:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0011f4:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a0011f8:	2b00      	cmp	r3, #0
1a0011fa:	bf08      	it	eq
1a0011fc:	2a32      	cmpeq	r2, #50	; 0x32
1a0011fe:	d227      	bcs.n	1a001250 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001200:	4b14      	ldr	r3, [pc, #80]	; (1a001254 <tickInit+0x6c>)
1a001202:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001206:	4b14      	ldr	r3, [pc, #80]	; (1a001258 <tickInit+0x70>)
1a001208:	681b      	ldr	r3, [r3, #0]
1a00120a:	fba3 4500 	umull	r4, r5, r3, r0
1a00120e:	fb03 5501 	mla	r5, r3, r1, r5
1a001212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001216:	2300      	movs	r3, #0
1a001218:	4620      	mov	r0, r4
1a00121a:	4629      	mov	r1, r5
1a00121c:	f000 fa00 	bl	1a001620 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001220:	3801      	subs	r0, #1
1a001222:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001226:	d209      	bcs.n	1a00123c <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001228:	4b0c      	ldr	r3, [pc, #48]	; (1a00125c <tickInit+0x74>)
1a00122a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00122c:	4a0c      	ldr	r2, [pc, #48]	; (1a001260 <tickInit+0x78>)
1a00122e:	21e0      	movs	r1, #224	; 0xe0
1a001230:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001234:	2200      	movs	r2, #0
1a001236:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001238:	2207      	movs	r2, #7
1a00123a:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a00123c:	2001      	movs	r0, #1
1a00123e:	f7ff ffc7 	bl	1a0011d0 <tickPowerSet>
      bool_t ret_val = 1;
1a001242:	2001      	movs	r0, #1
}
1a001244:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001246:	2000      	movs	r0, #0
1a001248:	f7ff ffc2 	bl	1a0011d0 <tickPowerSet>
         ret_val = 0;
1a00124c:	2000      	movs	r0, #0
1a00124e:	e7f9      	b.n	1a001244 <tickInit+0x5c>
            ret_val = 0;
1a001250:	2000      	movs	r0, #0
1a001252:	e7f7      	b.n	1a001244 <tickInit+0x5c>
1a001254:	10000040 	.word	0x10000040
1a001258:	100008dc 	.word	0x100008dc
1a00125c:	e000e010 	.word	0xe000e010
1a001260:	e000ed00 	.word	0xe000ed00

1a001264 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001264:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001266:	4a07      	ldr	r2, [pc, #28]	; (1a001284 <SysTick_Handler+0x20>)
1a001268:	6813      	ldr	r3, [r2, #0]
1a00126a:	6851      	ldr	r1, [r2, #4]
1a00126c:	3301      	adds	r3, #1
1a00126e:	f141 0100 	adc.w	r1, r1, #0
1a001272:	6013      	str	r3, [r2, #0]
1a001274:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001276:	4b04      	ldr	r3, [pc, #16]	; (1a001288 <SysTick_Handler+0x24>)
1a001278:	681b      	ldr	r3, [r3, #0]
1a00127a:	b113      	cbz	r3, 1a001282 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a00127c:	4a03      	ldr	r2, [pc, #12]	; (1a00128c <SysTick_Handler+0x28>)
1a00127e:	6810      	ldr	r0, [r2, #0]
1a001280:	4798      	blx	r3
   }
}
1a001282:	bd08      	pop	{r3, pc}
1a001284:	10000898 	.word	0x10000898
1a001288:	100008a0 	.word	0x100008a0
1a00128c:	10000894 	.word	0x10000894

1a001290 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001290:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001292:	4d0b      	ldr	r5, [pc, #44]	; (1a0012c0 <gpioObtainPinInit+0x30>)
1a001294:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001298:	182c      	adds	r4, r5, r0
1a00129a:	5628      	ldrsb	r0, [r5, r0]
1a00129c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00129e:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0012a2:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0012a4:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0012a8:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0012aa:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0012ae:	9b02      	ldr	r3, [sp, #8]
1a0012b0:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0012b2:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0012b6:	9b03      	ldr	r3, [sp, #12]
1a0012b8:	701a      	strb	r2, [r3, #0]
}
1a0012ba:	bc30      	pop	{r4, r5}
1a0012bc:	4770      	bx	lr
1a0012be:	bf00      	nop
1a0012c0:	1a003444 	.word	0x1a003444

1a0012c4 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0012c4:	f110 0f02 	cmn.w	r0, #2
1a0012c8:	f000 80c7 	beq.w	1a00145a <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0012cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0012d0:	f000 80c5 	beq.w	1a00145e <gpioInit+0x19a>
{
1a0012d4:	b570      	push	{r4, r5, r6, lr}
1a0012d6:	b084      	sub	sp, #16
1a0012d8:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0012da:	2300      	movs	r3, #0
1a0012dc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0012e0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0012e4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0012e8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0012ec:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0012f0:	f10d 030b 	add.w	r3, sp, #11
1a0012f4:	9301      	str	r3, [sp, #4]
1a0012f6:	ab03      	add	r3, sp, #12
1a0012f8:	9300      	str	r3, [sp, #0]
1a0012fa:	f10d 030d 	add.w	r3, sp, #13
1a0012fe:	f10d 020e 	add.w	r2, sp, #14
1a001302:	f10d 010f 	add.w	r1, sp, #15
1a001306:	f7ff ffc3 	bl	1a001290 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00130a:	2c05      	cmp	r4, #5
1a00130c:	f200 80a9 	bhi.w	1a001462 <gpioInit+0x19e>
1a001310:	e8df f004 	tbb	[pc, r4]
1a001314:	45278109 	.word	0x45278109
1a001318:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00131a:	4853      	ldr	r0, [pc, #332]	; (1a001468 <gpioInit+0x1a4>)
1a00131c:	f7ff fde2 	bl	1a000ee4 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001320:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001322:	b004      	add	sp, #16
1a001324:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001326:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00132a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00132e:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001332:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001336:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00133a:	494c      	ldr	r1, [pc, #304]	; (1a00146c <gpioInit+0x1a8>)
1a00133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001340:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001344:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001348:	2001      	movs	r0, #1
1a00134a:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a00134e:	4c46      	ldr	r4, [pc, #280]	; (1a001468 <gpioInit+0x1a4>)
1a001350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001354:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001358:	ea22 0201 	bic.w	r2, r2, r1
1a00135c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001360:	e7df      	b.n	1a001322 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001362:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001366:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00136a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00136e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001372:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001376:	493d      	ldr	r1, [pc, #244]	; (1a00146c <gpioInit+0x1a8>)
1a001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00137c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001380:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001384:	2001      	movs	r0, #1
1a001386:	fa00 f102 	lsl.w	r1, r0, r2
1a00138a:	4c37      	ldr	r4, [pc, #220]	; (1a001468 <gpioInit+0x1a4>)
1a00138c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001390:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001394:	ea22 0201 	bic.w	r2, r2, r1
1a001398:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00139c:	e7c1      	b.n	1a001322 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00139e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0013a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0013a6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0013aa:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0013ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0013b2:	492e      	ldr	r1, [pc, #184]	; (1a00146c <gpioInit+0x1a8>)
1a0013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0013b8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0013bc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0013c0:	2001      	movs	r0, #1
1a0013c2:	fa00 f102 	lsl.w	r1, r0, r2
1a0013c6:	4c28      	ldr	r4, [pc, #160]	; (1a001468 <gpioInit+0x1a4>)
1a0013c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0013cc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0013d0:	ea22 0201 	bic.w	r2, r2, r1
1a0013d4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0013d8:	e7a3      	b.n	1a001322 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0013da:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0013de:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0013e2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0013e6:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0013ea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0013ee:	491f      	ldr	r1, [pc, #124]	; (1a00146c <gpioInit+0x1a8>)
1a0013f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0013f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0013f8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0013fc:	2001      	movs	r0, #1
1a0013fe:	fa00 f102 	lsl.w	r1, r0, r2
1a001402:	4c19      	ldr	r4, [pc, #100]	; (1a001468 <gpioInit+0x1a4>)
1a001404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001408:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00140c:	ea22 0201 	bic.w	r2, r2, r1
1a001410:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001414:	e785      	b.n	1a001322 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001416:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00141a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00141e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001422:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001426:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00142a:	4910      	ldr	r1, [pc, #64]	; (1a00146c <gpioInit+0x1a8>)
1a00142c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001430:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001434:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001438:	2001      	movs	r0, #1
1a00143a:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00143e:	4b0a      	ldr	r3, [pc, #40]	; (1a001468 <gpioInit+0x1a4>)
1a001440:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001444:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001448:	4331      	orrs	r1, r6
1a00144a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00144e:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001450:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001454:	2100      	movs	r1, #0
1a001456:	5499      	strb	r1, [r3, r2]
1a001458:	e763      	b.n	1a001322 <gpioInit+0x5e>
	  return FALSE;
1a00145a:	2000      	movs	r0, #0
1a00145c:	4770      	bx	lr
	  return FALSE;
1a00145e:	2000      	movs	r0, #0
}
1a001460:	4770      	bx	lr
      ret_val = 0;
1a001462:	2000      	movs	r0, #0
1a001464:	e75d      	b.n	1a001322 <gpioInit+0x5e>
1a001466:	bf00      	nop
1a001468:	400f4000 	.word	0x400f4000
1a00146c:	40086000 	.word	0x40086000

1a001470 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001470:	f110 0f02 	cmn.w	r0, #2
1a001474:	d02d      	beq.n	1a0014d2 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a001476:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00147a:	d02c      	beq.n	1a0014d6 <gpioWrite+0x66>
{
1a00147c:	b510      	push	{r4, lr}
1a00147e:	b084      	sub	sp, #16
1a001480:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001482:	2300      	movs	r3, #0
1a001484:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001488:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00148c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001490:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001494:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001498:	f10d 030b 	add.w	r3, sp, #11
1a00149c:	9301      	str	r3, [sp, #4]
1a00149e:	ab03      	add	r3, sp, #12
1a0014a0:	9300      	str	r3, [sp, #0]
1a0014a2:	f10d 030d 	add.w	r3, sp, #13
1a0014a6:	f10d 020e 	add.w	r2, sp, #14
1a0014aa:	f10d 010f 	add.w	r1, sp, #15
1a0014ae:	f7ff feef 	bl	1a001290 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0014b2:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0014b6:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0014ba:	1c21      	adds	r1, r4, #0
1a0014bc:	bf18      	it	ne
1a0014be:	2101      	movne	r1, #1
1a0014c0:	015b      	lsls	r3, r3, #5
1a0014c2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0014c6:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0014ca:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a0014cc:	2001      	movs	r0, #1
}
1a0014ce:	b004      	add	sp, #16
1a0014d0:	bd10      	pop	{r4, pc}
	  return FALSE;
1a0014d2:	2000      	movs	r0, #0
1a0014d4:	4770      	bx	lr
	  return FALSE;
1a0014d6:	2000      	movs	r0, #0
}
1a0014d8:	4770      	bx	lr

1a0014da <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a0014da:	f110 0f02 	cmn.w	r0, #2
1a0014de:	d02c      	beq.n	1a00153a <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a0014e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0014e4:	d02b      	beq.n	1a00153e <gpioRead+0x64>
{
1a0014e6:	b500      	push	{lr}
1a0014e8:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0014ea:	2300      	movs	r3, #0
1a0014ec:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0014f0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0014f4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0014f8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0014fc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001500:	f10d 030b 	add.w	r3, sp, #11
1a001504:	9301      	str	r3, [sp, #4]
1a001506:	ab03      	add	r3, sp, #12
1a001508:	9300      	str	r3, [sp, #0]
1a00150a:	f10d 030d 	add.w	r3, sp, #13
1a00150e:	f10d 020e 	add.w	r2, sp, #14
1a001512:	f10d 010f 	add.w	r1, sp, #15
1a001516:	f7ff febb 	bl	1a001290 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00151a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00151e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a001522:	015b      	lsls	r3, r3, #5
1a001524:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001528:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00152c:	5c98      	ldrb	r0, [r3, r2]
1a00152e:	3000      	adds	r0, #0
1a001530:	bf18      	it	ne
1a001532:	2001      	movne	r0, #1

   return ret_val;
}
1a001534:	b005      	add	sp, #20
1a001536:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a00153a:	2001      	movs	r0, #1
1a00153c:	4770      	bx	lr
      return FALSE;
1a00153e:	2000      	movs	r0, #0
}
1a001540:	4770      	bx	lr

1a001542 <gpioToggle>:
{
1a001542:	b510      	push	{r4, lr}
1a001544:	4604      	mov	r4, r0
   return gpioWrite( pin, !gpioRead(pin) );
1a001546:	f7ff ffc8 	bl	1a0014da <gpioRead>
1a00154a:	fab0 f180 	clz	r1, r0
1a00154e:	0949      	lsrs	r1, r1, #5
1a001550:	4620      	mov	r0, r4
1a001552:	f7ff ff8d 	bl	1a001470 <gpioWrite>
}
1a001556:	bd10      	pop	{r4, pc}

1a001558 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001558:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00155a:	4b04      	ldr	r3, [pc, #16]	; (1a00156c <USB0_IRQHandler+0x14>)
1a00155c:	681b      	ldr	r3, [r3, #0]
1a00155e:	681b      	ldr	r3, [r3, #0]
1a001560:	68db      	ldr	r3, [r3, #12]
1a001562:	4a03      	ldr	r2, [pc, #12]	; (1a001570 <USB0_IRQHandler+0x18>)
1a001564:	6810      	ldr	r0, [r2, #0]
1a001566:	4798      	blx	r3
}
1a001568:	bd08      	pop	{r3, pc}
1a00156a:	bf00      	nop
1a00156c:	100008e0 	.word	0x100008e0
1a001570:	100008a4 	.word	0x100008a4

1a001574 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001574:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001576:	f7ff fcab 	bl	1a000ed0 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00157a:	4b1a      	ldr	r3, [pc, #104]	; (1a0015e4 <boardInit+0x70>)
1a00157c:	6818      	ldr	r0, [r3, #0]
1a00157e:	f7ff fe13 	bl	1a0011a8 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001582:	2001      	movs	r0, #1
1a001584:	2100      	movs	r1, #0
1a001586:	f7ff fe2f 	bl	1a0011e8 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a00158a:	2105      	movs	r1, #5
1a00158c:	2000      	movs	r0, #0
1a00158e:	f7ff fe99 	bl	1a0012c4 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001592:	2100      	movs	r1, #0
1a001594:	2024      	movs	r0, #36	; 0x24
1a001596:	f7ff fe95 	bl	1a0012c4 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a00159a:	2100      	movs	r1, #0
1a00159c:	2025      	movs	r0, #37	; 0x25
1a00159e:	f7ff fe91 	bl	1a0012c4 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0015a2:	2100      	movs	r1, #0
1a0015a4:	2026      	movs	r0, #38	; 0x26
1a0015a6:	f7ff fe8d 	bl	1a0012c4 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0015aa:	2100      	movs	r1, #0
1a0015ac:	2027      	movs	r0, #39	; 0x27
1a0015ae:	f7ff fe89 	bl	1a0012c4 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0015b2:	2101      	movs	r1, #1
1a0015b4:	2028      	movs	r0, #40	; 0x28
1a0015b6:	f7ff fe85 	bl	1a0012c4 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0015ba:	2101      	movs	r1, #1
1a0015bc:	2029      	movs	r0, #41	; 0x29
1a0015be:	f7ff fe81 	bl	1a0012c4 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0015c2:	2101      	movs	r1, #1
1a0015c4:	202a      	movs	r0, #42	; 0x2a
1a0015c6:	f7ff fe7d 	bl	1a0012c4 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0015ca:	2101      	movs	r1, #1
1a0015cc:	202b      	movs	r0, #43	; 0x2b
1a0015ce:	f7ff fe79 	bl	1a0012c4 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0015d2:	2101      	movs	r1, #1
1a0015d4:	202c      	movs	r0, #44	; 0x2c
1a0015d6:	f7ff fe75 	bl	1a0012c4 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0015da:	2101      	movs	r1, #1
1a0015dc:	202d      	movs	r0, #45	; 0x2d
1a0015de:	f7ff fe71 	bl	1a0012c4 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0015e2:	bd08      	pop	{r3, pc}
1a0015e4:	100008dc 	.word	0x100008dc

1a0015e8 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a0015e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0015ec:	4680      	mov	r8, r0
1a0015ee:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0015f0:	f7ff fde8 	bl	1a0011c4 <tickRead>
1a0015f4:	4606      	mov	r6, r0
1a0015f6:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a0015f8:	f7ff fde4 	bl	1a0011c4 <tickRead>
1a0015fc:	1b84      	subs	r4, r0, r6
1a0015fe:	eb61 0507 	sbc.w	r5, r1, r7
1a001602:	4b06      	ldr	r3, [pc, #24]	; (1a00161c <delay+0x34>)
1a001604:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001608:	4640      	mov	r0, r8
1a00160a:	4649      	mov	r1, r9
1a00160c:	f000 f808 	bl	1a001620 <__aeabi_uldivmod>
1a001610:	428d      	cmp	r5, r1
1a001612:	bf08      	it	eq
1a001614:	4284      	cmpeq	r4, r0
1a001616:	d3ef      	bcc.n	1a0015f8 <delay+0x10>
}
1a001618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00161c:	10000040 	.word	0x10000040

1a001620 <__aeabi_uldivmod>:
1a001620:	b953      	cbnz	r3, 1a001638 <__aeabi_uldivmod+0x18>
1a001622:	b94a      	cbnz	r2, 1a001638 <__aeabi_uldivmod+0x18>
1a001624:	2900      	cmp	r1, #0
1a001626:	bf08      	it	eq
1a001628:	2800      	cmpeq	r0, #0
1a00162a:	bf1c      	itt	ne
1a00162c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001630:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001634:	f000 b974 	b.w	1a001920 <__aeabi_idiv0>
1a001638:	f1ad 0c08 	sub.w	ip, sp, #8
1a00163c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001640:	f000 f806 	bl	1a001650 <__udivmoddi4>
1a001644:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001648:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00164c:	b004      	add	sp, #16
1a00164e:	4770      	bx	lr

1a001650 <__udivmoddi4>:
1a001650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001654:	9e08      	ldr	r6, [sp, #32]
1a001656:	4604      	mov	r4, r0
1a001658:	4688      	mov	r8, r1
1a00165a:	2b00      	cmp	r3, #0
1a00165c:	f040 8085 	bne.w	1a00176a <__udivmoddi4+0x11a>
1a001660:	428a      	cmp	r2, r1
1a001662:	4615      	mov	r5, r2
1a001664:	d948      	bls.n	1a0016f8 <__udivmoddi4+0xa8>
1a001666:	fab2 f282 	clz	r2, r2
1a00166a:	b14a      	cbz	r2, 1a001680 <__udivmoddi4+0x30>
1a00166c:	f1c2 0720 	rsb	r7, r2, #32
1a001670:	fa01 f302 	lsl.w	r3, r1, r2
1a001674:	fa20 f707 	lsr.w	r7, r0, r7
1a001678:	4095      	lsls	r5, r2
1a00167a:	ea47 0803 	orr.w	r8, r7, r3
1a00167e:	4094      	lsls	r4, r2
1a001680:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001684:	0c23      	lsrs	r3, r4, #16
1a001686:	fbb8 f7fe 	udiv	r7, r8, lr
1a00168a:	fa1f fc85 	uxth.w	ip, r5
1a00168e:	fb0e 8817 	mls	r8, lr, r7, r8
1a001692:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001696:	fb07 f10c 	mul.w	r1, r7, ip
1a00169a:	4299      	cmp	r1, r3
1a00169c:	d909      	bls.n	1a0016b2 <__udivmoddi4+0x62>
1a00169e:	18eb      	adds	r3, r5, r3
1a0016a0:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0016a4:	f080 80e3 	bcs.w	1a00186e <__udivmoddi4+0x21e>
1a0016a8:	4299      	cmp	r1, r3
1a0016aa:	f240 80e0 	bls.w	1a00186e <__udivmoddi4+0x21e>
1a0016ae:	3f02      	subs	r7, #2
1a0016b0:	442b      	add	r3, r5
1a0016b2:	1a5b      	subs	r3, r3, r1
1a0016b4:	b2a4      	uxth	r4, r4
1a0016b6:	fbb3 f0fe 	udiv	r0, r3, lr
1a0016ba:	fb0e 3310 	mls	r3, lr, r0, r3
1a0016be:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0016c2:	fb00 fc0c 	mul.w	ip, r0, ip
1a0016c6:	45a4      	cmp	ip, r4
1a0016c8:	d909      	bls.n	1a0016de <__udivmoddi4+0x8e>
1a0016ca:	192c      	adds	r4, r5, r4
1a0016cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0016d0:	f080 80cb 	bcs.w	1a00186a <__udivmoddi4+0x21a>
1a0016d4:	45a4      	cmp	ip, r4
1a0016d6:	f240 80c8 	bls.w	1a00186a <__udivmoddi4+0x21a>
1a0016da:	3802      	subs	r0, #2
1a0016dc:	442c      	add	r4, r5
1a0016de:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0016e2:	eba4 040c 	sub.w	r4, r4, ip
1a0016e6:	2700      	movs	r7, #0
1a0016e8:	b11e      	cbz	r6, 1a0016f2 <__udivmoddi4+0xa2>
1a0016ea:	40d4      	lsrs	r4, r2
1a0016ec:	2300      	movs	r3, #0
1a0016ee:	e9c6 4300 	strd	r4, r3, [r6]
1a0016f2:	4639      	mov	r1, r7
1a0016f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0016f8:	2a00      	cmp	r2, #0
1a0016fa:	d053      	beq.n	1a0017a4 <__udivmoddi4+0x154>
1a0016fc:	fab2 f282 	clz	r2, r2
1a001700:	2a00      	cmp	r2, #0
1a001702:	f040 80b6 	bne.w	1a001872 <__udivmoddi4+0x222>
1a001706:	1b49      	subs	r1, r1, r5
1a001708:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00170c:	fa1f f885 	uxth.w	r8, r5
1a001710:	2701      	movs	r7, #1
1a001712:	fbb1 fcfe 	udiv	ip, r1, lr
1a001716:	0c23      	lsrs	r3, r4, #16
1a001718:	fb0e 111c 	mls	r1, lr, ip, r1
1a00171c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001720:	fb08 f10c 	mul.w	r1, r8, ip
1a001724:	4299      	cmp	r1, r3
1a001726:	d907      	bls.n	1a001738 <__udivmoddi4+0xe8>
1a001728:	18eb      	adds	r3, r5, r3
1a00172a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00172e:	d202      	bcs.n	1a001736 <__udivmoddi4+0xe6>
1a001730:	4299      	cmp	r1, r3
1a001732:	f200 80ec 	bhi.w	1a00190e <__udivmoddi4+0x2be>
1a001736:	4684      	mov	ip, r0
1a001738:	1a59      	subs	r1, r3, r1
1a00173a:	b2a3      	uxth	r3, r4
1a00173c:	fbb1 f0fe 	udiv	r0, r1, lr
1a001740:	fb0e 1410 	mls	r4, lr, r0, r1
1a001744:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001748:	fb08 f800 	mul.w	r8, r8, r0
1a00174c:	45a0      	cmp	r8, r4
1a00174e:	d907      	bls.n	1a001760 <__udivmoddi4+0x110>
1a001750:	192c      	adds	r4, r5, r4
1a001752:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001756:	d202      	bcs.n	1a00175e <__udivmoddi4+0x10e>
1a001758:	45a0      	cmp	r8, r4
1a00175a:	f200 80dc 	bhi.w	1a001916 <__udivmoddi4+0x2c6>
1a00175e:	4618      	mov	r0, r3
1a001760:	eba4 0408 	sub.w	r4, r4, r8
1a001764:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001768:	e7be      	b.n	1a0016e8 <__udivmoddi4+0x98>
1a00176a:	428b      	cmp	r3, r1
1a00176c:	d908      	bls.n	1a001780 <__udivmoddi4+0x130>
1a00176e:	2e00      	cmp	r6, #0
1a001770:	d078      	beq.n	1a001864 <__udivmoddi4+0x214>
1a001772:	2700      	movs	r7, #0
1a001774:	e9c6 0100 	strd	r0, r1, [r6]
1a001778:	4638      	mov	r0, r7
1a00177a:	4639      	mov	r1, r7
1a00177c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001780:	fab3 f783 	clz	r7, r3
1a001784:	b97f      	cbnz	r7, 1a0017a6 <__udivmoddi4+0x156>
1a001786:	428b      	cmp	r3, r1
1a001788:	d302      	bcc.n	1a001790 <__udivmoddi4+0x140>
1a00178a:	4282      	cmp	r2, r0
1a00178c:	f200 80bd 	bhi.w	1a00190a <__udivmoddi4+0x2ba>
1a001790:	1a84      	subs	r4, r0, r2
1a001792:	eb61 0303 	sbc.w	r3, r1, r3
1a001796:	2001      	movs	r0, #1
1a001798:	4698      	mov	r8, r3
1a00179a:	2e00      	cmp	r6, #0
1a00179c:	d0a9      	beq.n	1a0016f2 <__udivmoddi4+0xa2>
1a00179e:	e9c6 4800 	strd	r4, r8, [r6]
1a0017a2:	e7a6      	b.n	1a0016f2 <__udivmoddi4+0xa2>
1a0017a4:	deff      	udf	#255	; 0xff
1a0017a6:	f1c7 0520 	rsb	r5, r7, #32
1a0017aa:	40bb      	lsls	r3, r7
1a0017ac:	fa22 fc05 	lsr.w	ip, r2, r5
1a0017b0:	ea4c 0c03 	orr.w	ip, ip, r3
1a0017b4:	fa01 f407 	lsl.w	r4, r1, r7
1a0017b8:	fa20 f805 	lsr.w	r8, r0, r5
1a0017bc:	fa21 f305 	lsr.w	r3, r1, r5
1a0017c0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0017c4:	ea48 0404 	orr.w	r4, r8, r4
1a0017c8:	fbb3 f9fe 	udiv	r9, r3, lr
1a0017cc:	0c21      	lsrs	r1, r4, #16
1a0017ce:	fb0e 3319 	mls	r3, lr, r9, r3
1a0017d2:	fa1f f88c 	uxth.w	r8, ip
1a0017d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0017da:	fb09 fa08 	mul.w	sl, r9, r8
1a0017de:	459a      	cmp	sl, r3
1a0017e0:	fa02 f207 	lsl.w	r2, r2, r7
1a0017e4:	fa00 f107 	lsl.w	r1, r0, r7
1a0017e8:	d90b      	bls.n	1a001802 <__udivmoddi4+0x1b2>
1a0017ea:	eb1c 0303 	adds.w	r3, ip, r3
1a0017ee:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0017f2:	f080 8088 	bcs.w	1a001906 <__udivmoddi4+0x2b6>
1a0017f6:	459a      	cmp	sl, r3
1a0017f8:	f240 8085 	bls.w	1a001906 <__udivmoddi4+0x2b6>
1a0017fc:	f1a9 0902 	sub.w	r9, r9, #2
1a001800:	4463      	add	r3, ip
1a001802:	eba3 030a 	sub.w	r3, r3, sl
1a001806:	b2a4      	uxth	r4, r4
1a001808:	fbb3 f0fe 	udiv	r0, r3, lr
1a00180c:	fb0e 3310 	mls	r3, lr, r0, r3
1a001810:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001814:	fb00 f808 	mul.w	r8, r0, r8
1a001818:	45a0      	cmp	r8, r4
1a00181a:	d908      	bls.n	1a00182e <__udivmoddi4+0x1de>
1a00181c:	eb1c 0404 	adds.w	r4, ip, r4
1a001820:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001824:	d26b      	bcs.n	1a0018fe <__udivmoddi4+0x2ae>
1a001826:	45a0      	cmp	r8, r4
1a001828:	d969      	bls.n	1a0018fe <__udivmoddi4+0x2ae>
1a00182a:	3802      	subs	r0, #2
1a00182c:	4464      	add	r4, ip
1a00182e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001832:	eba4 0408 	sub.w	r4, r4, r8
1a001836:	fba0 8902 	umull	r8, r9, r0, r2
1a00183a:	454c      	cmp	r4, r9
1a00183c:	46c6      	mov	lr, r8
1a00183e:	464b      	mov	r3, r9
1a001840:	d354      	bcc.n	1a0018ec <__udivmoddi4+0x29c>
1a001842:	d051      	beq.n	1a0018e8 <__udivmoddi4+0x298>
1a001844:	2e00      	cmp	r6, #0
1a001846:	d069      	beq.n	1a00191c <__udivmoddi4+0x2cc>
1a001848:	ebb1 020e 	subs.w	r2, r1, lr
1a00184c:	eb64 0403 	sbc.w	r4, r4, r3
1a001850:	fa04 f505 	lsl.w	r5, r4, r5
1a001854:	fa22 f307 	lsr.w	r3, r2, r7
1a001858:	40fc      	lsrs	r4, r7
1a00185a:	431d      	orrs	r5, r3
1a00185c:	e9c6 5400 	strd	r5, r4, [r6]
1a001860:	2700      	movs	r7, #0
1a001862:	e746      	b.n	1a0016f2 <__udivmoddi4+0xa2>
1a001864:	4637      	mov	r7, r6
1a001866:	4630      	mov	r0, r6
1a001868:	e743      	b.n	1a0016f2 <__udivmoddi4+0xa2>
1a00186a:	4618      	mov	r0, r3
1a00186c:	e737      	b.n	1a0016de <__udivmoddi4+0x8e>
1a00186e:	4607      	mov	r7, r0
1a001870:	e71f      	b.n	1a0016b2 <__udivmoddi4+0x62>
1a001872:	f1c2 0320 	rsb	r3, r2, #32
1a001876:	fa20 f703 	lsr.w	r7, r0, r3
1a00187a:	4095      	lsls	r5, r2
1a00187c:	fa01 f002 	lsl.w	r0, r1, r2
1a001880:	fa21 f303 	lsr.w	r3, r1, r3
1a001884:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001888:	4338      	orrs	r0, r7
1a00188a:	0c01      	lsrs	r1, r0, #16
1a00188c:	fbb3 f7fe 	udiv	r7, r3, lr
1a001890:	fa1f f885 	uxth.w	r8, r5
1a001894:	fb0e 3317 	mls	r3, lr, r7, r3
1a001898:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00189c:	fb07 f308 	mul.w	r3, r7, r8
1a0018a0:	428b      	cmp	r3, r1
1a0018a2:	fa04 f402 	lsl.w	r4, r4, r2
1a0018a6:	d907      	bls.n	1a0018b8 <__udivmoddi4+0x268>
1a0018a8:	1869      	adds	r1, r5, r1
1a0018aa:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0018ae:	d228      	bcs.n	1a001902 <__udivmoddi4+0x2b2>
1a0018b0:	428b      	cmp	r3, r1
1a0018b2:	d926      	bls.n	1a001902 <__udivmoddi4+0x2b2>
1a0018b4:	3f02      	subs	r7, #2
1a0018b6:	4429      	add	r1, r5
1a0018b8:	1acb      	subs	r3, r1, r3
1a0018ba:	b281      	uxth	r1, r0
1a0018bc:	fbb3 f0fe 	udiv	r0, r3, lr
1a0018c0:	fb0e 3310 	mls	r3, lr, r0, r3
1a0018c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0018c8:	fb00 f308 	mul.w	r3, r0, r8
1a0018cc:	428b      	cmp	r3, r1
1a0018ce:	d907      	bls.n	1a0018e0 <__udivmoddi4+0x290>
1a0018d0:	1869      	adds	r1, r5, r1
1a0018d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0018d6:	d210      	bcs.n	1a0018fa <__udivmoddi4+0x2aa>
1a0018d8:	428b      	cmp	r3, r1
1a0018da:	d90e      	bls.n	1a0018fa <__udivmoddi4+0x2aa>
1a0018dc:	3802      	subs	r0, #2
1a0018de:	4429      	add	r1, r5
1a0018e0:	1ac9      	subs	r1, r1, r3
1a0018e2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0018e6:	e714      	b.n	1a001712 <__udivmoddi4+0xc2>
1a0018e8:	4541      	cmp	r1, r8
1a0018ea:	d2ab      	bcs.n	1a001844 <__udivmoddi4+0x1f4>
1a0018ec:	ebb8 0e02 	subs.w	lr, r8, r2
1a0018f0:	eb69 020c 	sbc.w	r2, r9, ip
1a0018f4:	3801      	subs	r0, #1
1a0018f6:	4613      	mov	r3, r2
1a0018f8:	e7a4      	b.n	1a001844 <__udivmoddi4+0x1f4>
1a0018fa:	4660      	mov	r0, ip
1a0018fc:	e7f0      	b.n	1a0018e0 <__udivmoddi4+0x290>
1a0018fe:	4618      	mov	r0, r3
1a001900:	e795      	b.n	1a00182e <__udivmoddi4+0x1de>
1a001902:	4667      	mov	r7, ip
1a001904:	e7d8      	b.n	1a0018b8 <__udivmoddi4+0x268>
1a001906:	4681      	mov	r9, r0
1a001908:	e77b      	b.n	1a001802 <__udivmoddi4+0x1b2>
1a00190a:	4638      	mov	r0, r7
1a00190c:	e745      	b.n	1a00179a <__udivmoddi4+0x14a>
1a00190e:	f1ac 0c02 	sub.w	ip, ip, #2
1a001912:	442b      	add	r3, r5
1a001914:	e710      	b.n	1a001738 <__udivmoddi4+0xe8>
1a001916:	3802      	subs	r0, #2
1a001918:	442c      	add	r4, r5
1a00191a:	e721      	b.n	1a001760 <__udivmoddi4+0x110>
1a00191c:	4637      	mov	r7, r6
1a00191e:	e6e8      	b.n	1a0016f2 <__udivmoddi4+0xa2>

1a001920 <__aeabi_idiv0>:
1a001920:	4770      	bx	lr
1a001922:	bf00      	nop

1a001924 <__libc_init_array>:
1a001924:	b570      	push	{r4, r5, r6, lr}
1a001926:	4e0d      	ldr	r6, [pc, #52]	; (1a00195c <__libc_init_array+0x38>)
1a001928:	4d0d      	ldr	r5, [pc, #52]	; (1a001960 <__libc_init_array+0x3c>)
1a00192a:	1b76      	subs	r6, r6, r5
1a00192c:	10b6      	asrs	r6, r6, #2
1a00192e:	d006      	beq.n	1a00193e <__libc_init_array+0x1a>
1a001930:	2400      	movs	r4, #0
1a001932:	3401      	adds	r4, #1
1a001934:	f855 3b04 	ldr.w	r3, [r5], #4
1a001938:	4798      	blx	r3
1a00193a:	42a6      	cmp	r6, r4
1a00193c:	d1f9      	bne.n	1a001932 <__libc_init_array+0xe>
1a00193e:	4e09      	ldr	r6, [pc, #36]	; (1a001964 <__libc_init_array+0x40>)
1a001940:	4d09      	ldr	r5, [pc, #36]	; (1a001968 <__libc_init_array+0x44>)
1a001942:	1b76      	subs	r6, r6, r5
1a001944:	f7fe fd37 	bl	1a0003b6 <_init>
1a001948:	10b6      	asrs	r6, r6, #2
1a00194a:	d006      	beq.n	1a00195a <__libc_init_array+0x36>
1a00194c:	2400      	movs	r4, #0
1a00194e:	3401      	adds	r4, #1
1a001950:	f855 3b04 	ldr.w	r3, [r5], #4
1a001954:	4798      	blx	r3
1a001956:	42a6      	cmp	r6, r4
1a001958:	d1f9      	bne.n	1a00194e <__libc_init_array+0x2a>
1a00195a:	bd70      	pop	{r4, r5, r6, pc}
1a00195c:	1a003530 	.word	0x1a003530
1a001960:	1a003530 	.word	0x1a003530
1a001964:	1a003534 	.word	0x1a003534
1a001968:	1a003530 	.word	0x1a003530

1a00196c <memcpy>:
1a00196c:	4684      	mov	ip, r0
1a00196e:	ea41 0300 	orr.w	r3, r1, r0
1a001972:	f013 0303 	ands.w	r3, r3, #3
1a001976:	d16d      	bne.n	1a001a54 <memcpy+0xe8>
1a001978:	3a40      	subs	r2, #64	; 0x40
1a00197a:	d341      	bcc.n	1a001a00 <memcpy+0x94>
1a00197c:	f851 3b04 	ldr.w	r3, [r1], #4
1a001980:	f840 3b04 	str.w	r3, [r0], #4
1a001984:	f851 3b04 	ldr.w	r3, [r1], #4
1a001988:	f840 3b04 	str.w	r3, [r0], #4
1a00198c:	f851 3b04 	ldr.w	r3, [r1], #4
1a001990:	f840 3b04 	str.w	r3, [r0], #4
1a001994:	f851 3b04 	ldr.w	r3, [r1], #4
1a001998:	f840 3b04 	str.w	r3, [r0], #4
1a00199c:	f851 3b04 	ldr.w	r3, [r1], #4
1a0019a0:	f840 3b04 	str.w	r3, [r0], #4
1a0019a4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0019a8:	f840 3b04 	str.w	r3, [r0], #4
1a0019ac:	f851 3b04 	ldr.w	r3, [r1], #4
1a0019b0:	f840 3b04 	str.w	r3, [r0], #4
1a0019b4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0019b8:	f840 3b04 	str.w	r3, [r0], #4
1a0019bc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0019c0:	f840 3b04 	str.w	r3, [r0], #4
1a0019c4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0019c8:	f840 3b04 	str.w	r3, [r0], #4
1a0019cc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0019d0:	f840 3b04 	str.w	r3, [r0], #4
1a0019d4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0019d8:	f840 3b04 	str.w	r3, [r0], #4
1a0019dc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0019e0:	f840 3b04 	str.w	r3, [r0], #4
1a0019e4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0019e8:	f840 3b04 	str.w	r3, [r0], #4
1a0019ec:	f851 3b04 	ldr.w	r3, [r1], #4
1a0019f0:	f840 3b04 	str.w	r3, [r0], #4
1a0019f4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0019f8:	f840 3b04 	str.w	r3, [r0], #4
1a0019fc:	3a40      	subs	r2, #64	; 0x40
1a0019fe:	d2bd      	bcs.n	1a00197c <memcpy+0x10>
1a001a00:	3230      	adds	r2, #48	; 0x30
1a001a02:	d311      	bcc.n	1a001a28 <memcpy+0xbc>
1a001a04:	f851 3b04 	ldr.w	r3, [r1], #4
1a001a08:	f840 3b04 	str.w	r3, [r0], #4
1a001a0c:	f851 3b04 	ldr.w	r3, [r1], #4
1a001a10:	f840 3b04 	str.w	r3, [r0], #4
1a001a14:	f851 3b04 	ldr.w	r3, [r1], #4
1a001a18:	f840 3b04 	str.w	r3, [r0], #4
1a001a1c:	f851 3b04 	ldr.w	r3, [r1], #4
1a001a20:	f840 3b04 	str.w	r3, [r0], #4
1a001a24:	3a10      	subs	r2, #16
1a001a26:	d2ed      	bcs.n	1a001a04 <memcpy+0x98>
1a001a28:	320c      	adds	r2, #12
1a001a2a:	d305      	bcc.n	1a001a38 <memcpy+0xcc>
1a001a2c:	f851 3b04 	ldr.w	r3, [r1], #4
1a001a30:	f840 3b04 	str.w	r3, [r0], #4
1a001a34:	3a04      	subs	r2, #4
1a001a36:	d2f9      	bcs.n	1a001a2c <memcpy+0xc0>
1a001a38:	3204      	adds	r2, #4
1a001a3a:	d008      	beq.n	1a001a4e <memcpy+0xe2>
1a001a3c:	07d2      	lsls	r2, r2, #31
1a001a3e:	bf1c      	itt	ne
1a001a40:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a001a44:	f800 3b01 	strbne.w	r3, [r0], #1
1a001a48:	d301      	bcc.n	1a001a4e <memcpy+0xe2>
1a001a4a:	880b      	ldrh	r3, [r1, #0]
1a001a4c:	8003      	strh	r3, [r0, #0]
1a001a4e:	4660      	mov	r0, ip
1a001a50:	4770      	bx	lr
1a001a52:	bf00      	nop
1a001a54:	2a08      	cmp	r2, #8
1a001a56:	d313      	bcc.n	1a001a80 <memcpy+0x114>
1a001a58:	078b      	lsls	r3, r1, #30
1a001a5a:	d08d      	beq.n	1a001978 <memcpy+0xc>
1a001a5c:	f010 0303 	ands.w	r3, r0, #3
1a001a60:	d08a      	beq.n	1a001978 <memcpy+0xc>
1a001a62:	f1c3 0304 	rsb	r3, r3, #4
1a001a66:	1ad2      	subs	r2, r2, r3
1a001a68:	07db      	lsls	r3, r3, #31
1a001a6a:	bf1c      	itt	ne
1a001a6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a001a70:	f800 3b01 	strbne.w	r3, [r0], #1
1a001a74:	d380      	bcc.n	1a001978 <memcpy+0xc>
1a001a76:	f831 3b02 	ldrh.w	r3, [r1], #2
1a001a7a:	f820 3b02 	strh.w	r3, [r0], #2
1a001a7e:	e77b      	b.n	1a001978 <memcpy+0xc>
1a001a80:	3a04      	subs	r2, #4
1a001a82:	d3d9      	bcc.n	1a001a38 <memcpy+0xcc>
1a001a84:	3a01      	subs	r2, #1
1a001a86:	f811 3b01 	ldrb.w	r3, [r1], #1
1a001a8a:	f800 3b01 	strb.w	r3, [r0], #1
1a001a8e:	d2f9      	bcs.n	1a001a84 <memcpy+0x118>
1a001a90:	780b      	ldrb	r3, [r1, #0]
1a001a92:	7003      	strb	r3, [r0, #0]
1a001a94:	784b      	ldrb	r3, [r1, #1]
1a001a96:	7043      	strb	r3, [r0, #1]
1a001a98:	788b      	ldrb	r3, [r1, #2]
1a001a9a:	7083      	strb	r3, [r0, #2]
1a001a9c:	4660      	mov	r0, ip
1a001a9e:	4770      	bx	lr

1a001aa0 <memset>:
1a001aa0:	b4f0      	push	{r4, r5, r6, r7}
1a001aa2:	0786      	lsls	r6, r0, #30
1a001aa4:	d046      	beq.n	1a001b34 <memset+0x94>
1a001aa6:	1e54      	subs	r4, r2, #1
1a001aa8:	2a00      	cmp	r2, #0
1a001aaa:	d03c      	beq.n	1a001b26 <memset+0x86>
1a001aac:	b2ca      	uxtb	r2, r1
1a001aae:	4603      	mov	r3, r0
1a001ab0:	e002      	b.n	1a001ab8 <memset+0x18>
1a001ab2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a001ab6:	d336      	bcc.n	1a001b26 <memset+0x86>
1a001ab8:	f803 2b01 	strb.w	r2, [r3], #1
1a001abc:	079d      	lsls	r5, r3, #30
1a001abe:	d1f8      	bne.n	1a001ab2 <memset+0x12>
1a001ac0:	2c03      	cmp	r4, #3
1a001ac2:	d929      	bls.n	1a001b18 <memset+0x78>
1a001ac4:	b2cd      	uxtb	r5, r1
1a001ac6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a001aca:	2c0f      	cmp	r4, #15
1a001acc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a001ad0:	d933      	bls.n	1a001b3a <memset+0x9a>
1a001ad2:	f1a4 0610 	sub.w	r6, r4, #16
1a001ad6:	0936      	lsrs	r6, r6, #4
1a001ad8:	f103 0720 	add.w	r7, r3, #32
1a001adc:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a001ae0:	f103 0210 	add.w	r2, r3, #16
1a001ae4:	e942 5504 	strd	r5, r5, [r2, #-16]
1a001ae8:	e942 5502 	strd	r5, r5, [r2, #-8]
1a001aec:	3210      	adds	r2, #16
1a001aee:	42ba      	cmp	r2, r7
1a001af0:	d1f8      	bne.n	1a001ae4 <memset+0x44>
1a001af2:	1c72      	adds	r2, r6, #1
1a001af4:	f014 0f0c 	tst.w	r4, #12
1a001af8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a001afc:	f004 060f 	and.w	r6, r4, #15
1a001b00:	d013      	beq.n	1a001b2a <memset+0x8a>
1a001b02:	1f33      	subs	r3, r6, #4
1a001b04:	f023 0303 	bic.w	r3, r3, #3
1a001b08:	3304      	adds	r3, #4
1a001b0a:	4413      	add	r3, r2
1a001b0c:	f842 5b04 	str.w	r5, [r2], #4
1a001b10:	4293      	cmp	r3, r2
1a001b12:	d1fb      	bne.n	1a001b0c <memset+0x6c>
1a001b14:	f006 0403 	and.w	r4, r6, #3
1a001b18:	b12c      	cbz	r4, 1a001b26 <memset+0x86>
1a001b1a:	b2c9      	uxtb	r1, r1
1a001b1c:	441c      	add	r4, r3
1a001b1e:	f803 1b01 	strb.w	r1, [r3], #1
1a001b22:	429c      	cmp	r4, r3
1a001b24:	d1fb      	bne.n	1a001b1e <memset+0x7e>
1a001b26:	bcf0      	pop	{r4, r5, r6, r7}
1a001b28:	4770      	bx	lr
1a001b2a:	4634      	mov	r4, r6
1a001b2c:	4613      	mov	r3, r2
1a001b2e:	2c00      	cmp	r4, #0
1a001b30:	d1f3      	bne.n	1a001b1a <memset+0x7a>
1a001b32:	e7f8      	b.n	1a001b26 <memset+0x86>
1a001b34:	4614      	mov	r4, r2
1a001b36:	4603      	mov	r3, r0
1a001b38:	e7c2      	b.n	1a001ac0 <memset+0x20>
1a001b3a:	461a      	mov	r2, r3
1a001b3c:	4626      	mov	r6, r4
1a001b3e:	e7e0      	b.n	1a001b02 <memset+0x62>

1a001b40 <_puts_r>:
1a001b40:	b570      	push	{r4, r5, r6, lr}
1a001b42:	4605      	mov	r5, r0
1a001b44:	b088      	sub	sp, #32
1a001b46:	4608      	mov	r0, r1
1a001b48:	460c      	mov	r4, r1
1a001b4a:	f000 f859 	bl	1a001c00 <strlen>
1a001b4e:	4a22      	ldr	r2, [pc, #136]	; (1a001bd8 <_puts_r+0x98>)
1a001b50:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a001b52:	9404      	str	r4, [sp, #16]
1a001b54:	2601      	movs	r6, #1
1a001b56:	1c44      	adds	r4, r0, #1
1a001b58:	a904      	add	r1, sp, #16
1a001b5a:	9206      	str	r2, [sp, #24]
1a001b5c:	2202      	movs	r2, #2
1a001b5e:	9403      	str	r4, [sp, #12]
1a001b60:	9005      	str	r0, [sp, #20]
1a001b62:	68ac      	ldr	r4, [r5, #8]
1a001b64:	9607      	str	r6, [sp, #28]
1a001b66:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a001b6a:	b31b      	cbz	r3, 1a001bb4 <_puts_r+0x74>
1a001b6c:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a001b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001b72:	07ce      	lsls	r6, r1, #31
1a001b74:	b29a      	uxth	r2, r3
1a001b76:	d401      	bmi.n	1a001b7c <_puts_r+0x3c>
1a001b78:	0590      	lsls	r0, r2, #22
1a001b7a:	d525      	bpl.n	1a001bc8 <_puts_r+0x88>
1a001b7c:	0491      	lsls	r1, r2, #18
1a001b7e:	d406      	bmi.n	1a001b8e <_puts_r+0x4e>
1a001b80:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a001b82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a001b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a001b8a:	81a3      	strh	r3, [r4, #12]
1a001b8c:	6662      	str	r2, [r4, #100]	; 0x64
1a001b8e:	4628      	mov	r0, r5
1a001b90:	aa01      	add	r2, sp, #4
1a001b92:	4621      	mov	r1, r4
1a001b94:	f000 f906 	bl	1a001da4 <__sfvwrite_r>
1a001b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a001b9a:	2800      	cmp	r0, #0
1a001b9c:	bf14      	ite	ne
1a001b9e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a001ba2:	250a      	moveq	r5, #10
1a001ba4:	07da      	lsls	r2, r3, #31
1a001ba6:	d402      	bmi.n	1a001bae <_puts_r+0x6e>
1a001ba8:	89a3      	ldrh	r3, [r4, #12]
1a001baa:	059b      	lsls	r3, r3, #22
1a001bac:	d506      	bpl.n	1a001bbc <_puts_r+0x7c>
1a001bae:	4628      	mov	r0, r5
1a001bb0:	b008      	add	sp, #32
1a001bb2:	bd70      	pop	{r4, r5, r6, pc}
1a001bb4:	4628      	mov	r0, r5
1a001bb6:	f000 f8bf 	bl	1a001d38 <__sinit>
1a001bba:	e7d7      	b.n	1a001b6c <_puts_r+0x2c>
1a001bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a001bbe:	f000 faa5 	bl	1a00210c <__retarget_lock_release_recursive>
1a001bc2:	4628      	mov	r0, r5
1a001bc4:	b008      	add	sp, #32
1a001bc6:	bd70      	pop	{r4, r5, r6, pc}
1a001bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a001bca:	f000 fa9d 	bl	1a002108 <__retarget_lock_acquire_recursive>
1a001bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001bd2:	b29a      	uxth	r2, r3
1a001bd4:	e7d2      	b.n	1a001b7c <_puts_r+0x3c>
1a001bd6:	bf00      	nop
1a001bd8:	1a00352c 	.word	0x1a00352c

1a001bdc <puts>:
1a001bdc:	4b02      	ldr	r3, [pc, #8]	; (1a001be8 <puts+0xc>)
1a001bde:	4601      	mov	r1, r0
1a001be0:	6818      	ldr	r0, [r3, #0]
1a001be2:	f7ff bfad 	b.w	1a001b40 <_puts_r>
1a001be6:	bf00      	nop
1a001be8:	10000048 	.word	0x10000048
1a001bec:	ffffffff 	.word	0xffffffff
1a001bf0:	ffffffff 	.word	0xffffffff
1a001bf4:	ffffffff 	.word	0xffffffff
1a001bf8:	ffffffff 	.word	0xffffffff
1a001bfc:	ffffffff 	.word	0xffffffff

1a001c00 <strlen>:
1a001c00:	f890 f000 	pld	[r0]
1a001c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a001c08:	f020 0107 	bic.w	r1, r0, #7
1a001c0c:	f06f 0c00 	mvn.w	ip, #0
1a001c10:	f010 0407 	ands.w	r4, r0, #7
1a001c14:	f891 f020 	pld	[r1, #32]
1a001c18:	f040 8049 	bne.w	1a001cae <strlen+0xae>
1a001c1c:	f04f 0400 	mov.w	r4, #0
1a001c20:	f06f 0007 	mvn.w	r0, #7
1a001c24:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001c28:	f891 f040 	pld	[r1, #64]	; 0x40
1a001c2c:	f100 0008 	add.w	r0, r0, #8
1a001c30:	fa82 f24c 	uadd8	r2, r2, ip
1a001c34:	faa4 f28c 	sel	r2, r4, ip
1a001c38:	fa83 f34c 	uadd8	r3, r3, ip
1a001c3c:	faa2 f38c 	sel	r3, r2, ip
1a001c40:	bb4b      	cbnz	r3, 1a001c96 <strlen+0x96>
1a001c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a001c46:	fa82 f24c 	uadd8	r2, r2, ip
1a001c4a:	f100 0008 	add.w	r0, r0, #8
1a001c4e:	faa4 f28c 	sel	r2, r4, ip
1a001c52:	fa83 f34c 	uadd8	r3, r3, ip
1a001c56:	faa2 f38c 	sel	r3, r2, ip
1a001c5a:	b9e3      	cbnz	r3, 1a001c96 <strlen+0x96>
1a001c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a001c60:	fa82 f24c 	uadd8	r2, r2, ip
1a001c64:	f100 0008 	add.w	r0, r0, #8
1a001c68:	faa4 f28c 	sel	r2, r4, ip
1a001c6c:	fa83 f34c 	uadd8	r3, r3, ip
1a001c70:	faa2 f38c 	sel	r3, r2, ip
1a001c74:	b97b      	cbnz	r3, 1a001c96 <strlen+0x96>
1a001c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a001c7a:	f101 0120 	add.w	r1, r1, #32
1a001c7e:	fa82 f24c 	uadd8	r2, r2, ip
1a001c82:	f100 0008 	add.w	r0, r0, #8
1a001c86:	faa4 f28c 	sel	r2, r4, ip
1a001c8a:	fa83 f34c 	uadd8	r3, r3, ip
1a001c8e:	faa2 f38c 	sel	r3, r2, ip
1a001c92:	2b00      	cmp	r3, #0
1a001c94:	d0c6      	beq.n	1a001c24 <strlen+0x24>
1a001c96:	2a00      	cmp	r2, #0
1a001c98:	bf04      	itt	eq
1a001c9a:	3004      	addeq	r0, #4
1a001c9c:	461a      	moveq	r2, r3
1a001c9e:	ba12      	rev	r2, r2
1a001ca0:	fab2 f282 	clz	r2, r2
1a001ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a001ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a001cac:	4770      	bx	lr
1a001cae:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001cb2:	f004 0503 	and.w	r5, r4, #3
1a001cb6:	f1c4 0000 	rsb	r0, r4, #0
1a001cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a001cbe:	f014 0f04 	tst.w	r4, #4
1a001cc2:	f891 f040 	pld	[r1, #64]	; 0x40
1a001cc6:	fa0c f505 	lsl.w	r5, ip, r5
1a001cca:	ea62 0205 	orn	r2, r2, r5
1a001cce:	bf1c      	itt	ne
1a001cd0:	ea63 0305 	ornne	r3, r3, r5
1a001cd4:	4662      	movne	r2, ip
1a001cd6:	f04f 0400 	mov.w	r4, #0
1a001cda:	e7a9      	b.n	1a001c30 <strlen+0x30>

1a001cdc <std>:
1a001cdc:	b510      	push	{r4, lr}
1a001cde:	2300      	movs	r3, #0
1a001ce0:	4604      	mov	r4, r0
1a001ce2:	8181      	strh	r1, [r0, #12]
1a001ce4:	81c2      	strh	r2, [r0, #14]
1a001ce6:	e9c0 3300 	strd	r3, r3, [r0]
1a001cea:	6083      	str	r3, [r0, #8]
1a001cec:	6643      	str	r3, [r0, #100]	; 0x64
1a001cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a001cf2:	6183      	str	r3, [r0, #24]
1a001cf4:	4619      	mov	r1, r3
1a001cf6:	2208      	movs	r2, #8
1a001cf8:	305c      	adds	r0, #92	; 0x5c
1a001cfa:	f7ff fed1 	bl	1a001aa0 <memset>
1a001cfe:	4807      	ldr	r0, [pc, #28]	; (1a001d1c <std+0x40>)
1a001d00:	4907      	ldr	r1, [pc, #28]	; (1a001d20 <std+0x44>)
1a001d02:	4a08      	ldr	r2, [pc, #32]	; (1a001d24 <std+0x48>)
1a001d04:	4b08      	ldr	r3, [pc, #32]	; (1a001d28 <std+0x4c>)
1a001d06:	62e3      	str	r3, [r4, #44]	; 0x2c
1a001d08:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a001d0c:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a001d10:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a001d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001d18:	f000 b9f2 	b.w	1a002100 <__retarget_lock_init_recursive>
1a001d1c:	1a002b75 	.word	0x1a002b75
1a001d20:	1a002b99 	.word	0x1a002b99
1a001d24:	1a002bd9 	.word	0x1a002bd9
1a001d28:	1a002bf9 	.word	0x1a002bf9

1a001d2c <_cleanup_r>:
1a001d2c:	4901      	ldr	r1, [pc, #4]	; (1a001d34 <_cleanup_r+0x8>)
1a001d2e:	f000 b9bd 	b.w	1a0020ac <_fwalk_reent>
1a001d32:	bf00      	nop
1a001d34:	1a002cd1 	.word	0x1a002cd1

1a001d38 <__sinit>:
1a001d38:	b510      	push	{r4, lr}
1a001d3a:	4604      	mov	r4, r0
1a001d3c:	4811      	ldr	r0, [pc, #68]	; (1a001d84 <__sinit+0x4c>)
1a001d3e:	f000 f9e3 	bl	1a002108 <__retarget_lock_acquire_recursive>
1a001d42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001d44:	b9c2      	cbnz	r2, 1a001d78 <__sinit+0x40>
1a001d46:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a001d4a:	480f      	ldr	r0, [pc, #60]	; (1a001d88 <__sinit+0x50>)
1a001d4c:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a001d50:	2103      	movs	r1, #3
1a001d52:	e9c4 13b9 	strd	r1, r3, [r4, #740]	; 0x2e4
1a001d56:	63e0      	str	r0, [r4, #60]	; 0x3c
1a001d58:	2104      	movs	r1, #4
1a001d5a:	6860      	ldr	r0, [r4, #4]
1a001d5c:	f7ff ffbe 	bl	1a001cdc <std>
1a001d60:	2201      	movs	r2, #1
1a001d62:	2109      	movs	r1, #9
1a001d64:	68a0      	ldr	r0, [r4, #8]
1a001d66:	f7ff ffb9 	bl	1a001cdc <std>
1a001d6a:	2202      	movs	r2, #2
1a001d6c:	2112      	movs	r1, #18
1a001d6e:	68e0      	ldr	r0, [r4, #12]
1a001d70:	f7ff ffb4 	bl	1a001cdc <std>
1a001d74:	2301      	movs	r3, #1
1a001d76:	63a3      	str	r3, [r4, #56]	; 0x38
1a001d78:	4802      	ldr	r0, [pc, #8]	; (1a001d84 <__sinit+0x4c>)
1a001d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001d7e:	f000 b9c5 	b.w	1a00210c <__retarget_lock_release_recursive>
1a001d82:	bf00      	nop
1a001d84:	100008f0 	.word	0x100008f0
1a001d88:	1a001d2d 	.word	0x1a001d2d

1a001d8c <__sfp_lock_acquire>:
1a001d8c:	4801      	ldr	r0, [pc, #4]	; (1a001d94 <__sfp_lock_acquire+0x8>)
1a001d8e:	f000 b9bb 	b.w	1a002108 <__retarget_lock_acquire_recursive>
1a001d92:	bf00      	nop
1a001d94:	10000904 	.word	0x10000904

1a001d98 <__sfp_lock_release>:
1a001d98:	4801      	ldr	r0, [pc, #4]	; (1a001da0 <__sfp_lock_release+0x8>)
1a001d9a:	f000 b9b7 	b.w	1a00210c <__retarget_lock_release_recursive>
1a001d9e:	bf00      	nop
1a001da0:	10000904 	.word	0x10000904

1a001da4 <__sfvwrite_r>:
1a001da4:	6893      	ldr	r3, [r2, #8]
1a001da6:	2b00      	cmp	r3, #0
1a001da8:	f000 8102 	beq.w	1a001fb0 <__sfvwrite_r+0x20c>
1a001dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001db0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a001db4:	b29b      	uxth	r3, r3
1a001db6:	460c      	mov	r4, r1
1a001db8:	0719      	lsls	r1, r3, #28
1a001dba:	b083      	sub	sp, #12
1a001dbc:	4682      	mov	sl, r0
1a001dbe:	4690      	mov	r8, r2
1a001dc0:	d535      	bpl.n	1a001e2e <__sfvwrite_r+0x8a>
1a001dc2:	6922      	ldr	r2, [r4, #16]
1a001dc4:	b39a      	cbz	r2, 1a001e2e <__sfvwrite_r+0x8a>
1a001dc6:	f013 0202 	ands.w	r2, r3, #2
1a001dca:	f8d8 6000 	ldr.w	r6, [r8]
1a001dce:	d03d      	beq.n	1a001e4c <__sfvwrite_r+0xa8>
1a001dd0:	2700      	movs	r7, #0
1a001dd2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a001dd6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a001dda:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1a0020a8 <__sfvwrite_r+0x304>
1a001dde:	463d      	mov	r5, r7
1a001de0:	454d      	cmp	r5, r9
1a001de2:	462b      	mov	r3, r5
1a001de4:	463a      	mov	r2, r7
1a001de6:	bf28      	it	cs
1a001de8:	464b      	movcs	r3, r9
1a001dea:	4661      	mov	r1, ip
1a001dec:	4650      	mov	r0, sl
1a001dee:	b1d5      	cbz	r5, 1a001e26 <__sfvwrite_r+0x82>
1a001df0:	47d8      	blx	fp
1a001df2:	2800      	cmp	r0, #0
1a001df4:	f340 80d2 	ble.w	1a001f9c <__sfvwrite_r+0x1f8>
1a001df8:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a001dfc:	1a1b      	subs	r3, r3, r0
1a001dfe:	4407      	add	r7, r0
1a001e00:	1a2d      	subs	r5, r5, r0
1a001e02:	f8c8 3008 	str.w	r3, [r8, #8]
1a001e06:	2b00      	cmp	r3, #0
1a001e08:	f000 80b7 	beq.w	1a001f7a <__sfvwrite_r+0x1d6>
1a001e0c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a001e10:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a001e14:	454d      	cmp	r5, r9
1a001e16:	462b      	mov	r3, r5
1a001e18:	463a      	mov	r2, r7
1a001e1a:	bf28      	it	cs
1a001e1c:	464b      	movcs	r3, r9
1a001e1e:	4661      	mov	r1, ip
1a001e20:	4650      	mov	r0, sl
1a001e22:	2d00      	cmp	r5, #0
1a001e24:	d1e4      	bne.n	1a001df0 <__sfvwrite_r+0x4c>
1a001e26:	e9d6 7500 	ldrd	r7, r5, [r6]
1a001e2a:	3608      	adds	r6, #8
1a001e2c:	e7d8      	b.n	1a001de0 <__sfvwrite_r+0x3c>
1a001e2e:	4621      	mov	r1, r4
1a001e30:	4650      	mov	r0, sl
1a001e32:	f000 fee5 	bl	1a002c00 <__swsetup_r>
1a001e36:	2800      	cmp	r0, #0
1a001e38:	f040 8130 	bne.w	1a00209c <__sfvwrite_r+0x2f8>
1a001e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001e40:	f8d8 6000 	ldr.w	r6, [r8]
1a001e44:	b29b      	uxth	r3, r3
1a001e46:	f013 0202 	ands.w	r2, r3, #2
1a001e4a:	d1c1      	bne.n	1a001dd0 <__sfvwrite_r+0x2c>
1a001e4c:	f013 0901 	ands.w	r9, r3, #1
1a001e50:	f040 80b0 	bne.w	1a001fb4 <__sfvwrite_r+0x210>
1a001e54:	68a7      	ldr	r7, [r4, #8]
1a001e56:	6820      	ldr	r0, [r4, #0]
1a001e58:	464d      	mov	r5, r9
1a001e5a:	2d00      	cmp	r5, #0
1a001e5c:	d054      	beq.n	1a001f08 <__sfvwrite_r+0x164>
1a001e5e:	059a      	lsls	r2, r3, #22
1a001e60:	f140 80bc 	bpl.w	1a001fdc <__sfvwrite_r+0x238>
1a001e64:	42af      	cmp	r7, r5
1a001e66:	46bb      	mov	fp, r7
1a001e68:	f200 80e7 	bhi.w	1a00203a <__sfvwrite_r+0x296>
1a001e6c:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a001e70:	d02f      	beq.n	1a001ed2 <__sfvwrite_r+0x12e>
1a001e72:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a001e76:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a001e7a:	eba0 0b01 	sub.w	fp, r0, r1
1a001e7e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a001e82:	1c68      	adds	r0, r5, #1
1a001e84:	107f      	asrs	r7, r7, #1
1a001e86:	4458      	add	r0, fp
1a001e88:	42b8      	cmp	r0, r7
1a001e8a:	463a      	mov	r2, r7
1a001e8c:	bf84      	itt	hi
1a001e8e:	4607      	movhi	r7, r0
1a001e90:	463a      	movhi	r2, r7
1a001e92:	055b      	lsls	r3, r3, #21
1a001e94:	f140 80e9 	bpl.w	1a00206a <__sfvwrite_r+0x2c6>
1a001e98:	4611      	mov	r1, r2
1a001e9a:	4650      	mov	r0, sl
1a001e9c:	f000 f938 	bl	1a002110 <_malloc_r>
1a001ea0:	2800      	cmp	r0, #0
1a001ea2:	f000 80f5 	beq.w	1a002090 <__sfvwrite_r+0x2ec>
1a001ea6:	465a      	mov	r2, fp
1a001ea8:	6921      	ldr	r1, [r4, #16]
1a001eaa:	9001      	str	r0, [sp, #4]
1a001eac:	f7ff fd5e 	bl	1a00196c <memcpy>
1a001eb0:	89a2      	ldrh	r2, [r4, #12]
1a001eb2:	9b01      	ldr	r3, [sp, #4]
1a001eb4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a001eb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001ebc:	81a2      	strh	r2, [r4, #12]
1a001ebe:	eba7 020b 	sub.w	r2, r7, fp
1a001ec2:	eb03 000b 	add.w	r0, r3, fp
1a001ec6:	6167      	str	r7, [r4, #20]
1a001ec8:	6123      	str	r3, [r4, #16]
1a001eca:	6020      	str	r0, [r4, #0]
1a001ecc:	60a2      	str	r2, [r4, #8]
1a001ece:	462f      	mov	r7, r5
1a001ed0:	46ab      	mov	fp, r5
1a001ed2:	465a      	mov	r2, fp
1a001ed4:	4649      	mov	r1, r9
1a001ed6:	f000 fc23 	bl	1a002720 <memmove>
1a001eda:	68a2      	ldr	r2, [r4, #8]
1a001edc:	6823      	ldr	r3, [r4, #0]
1a001ede:	1bd2      	subs	r2, r2, r7
1a001ee0:	445b      	add	r3, fp
1a001ee2:	462f      	mov	r7, r5
1a001ee4:	60a2      	str	r2, [r4, #8]
1a001ee6:	6023      	str	r3, [r4, #0]
1a001ee8:	2500      	movs	r5, #0
1a001eea:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a001eee:	1bdb      	subs	r3, r3, r7
1a001ef0:	44b9      	add	r9, r7
1a001ef2:	f8c8 3008 	str.w	r3, [r8, #8]
1a001ef6:	2b00      	cmp	r3, #0
1a001ef8:	d03f      	beq.n	1a001f7a <__sfvwrite_r+0x1d6>
1a001efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001efe:	68a7      	ldr	r7, [r4, #8]
1a001f00:	6820      	ldr	r0, [r4, #0]
1a001f02:	b29b      	uxth	r3, r3
1a001f04:	2d00      	cmp	r5, #0
1a001f06:	d1aa      	bne.n	1a001e5e <__sfvwrite_r+0xba>
1a001f08:	e9d6 9500 	ldrd	r9, r5, [r6]
1a001f0c:	3608      	adds	r6, #8
1a001f0e:	e7a4      	b.n	1a001e5a <__sfvwrite_r+0xb6>
1a001f10:	f10b 0308 	add.w	r3, fp, #8
1a001f14:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a001f18:	469b      	mov	fp, r3
1a001f1a:	3308      	adds	r3, #8
1a001f1c:	2f00      	cmp	r7, #0
1a001f1e:	d0f9      	beq.n	1a001f14 <__sfvwrite_r+0x170>
1a001f20:	463a      	mov	r2, r7
1a001f22:	210a      	movs	r1, #10
1a001f24:	4630      	mov	r0, r6
1a001f26:	f000 fbab 	bl	1a002680 <memchr>
1a001f2a:	2800      	cmp	r0, #0
1a001f2c:	d053      	beq.n	1a001fd6 <__sfvwrite_r+0x232>
1a001f2e:	3001      	adds	r0, #1
1a001f30:	eba0 0906 	sub.w	r9, r0, r6
1a001f34:	464b      	mov	r3, r9
1a001f36:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a001f3a:	6820      	ldr	r0, [r4, #0]
1a001f3c:	42bb      	cmp	r3, r7
1a001f3e:	bf28      	it	cs
1a001f40:	463b      	movcs	r3, r7
1a001f42:	4288      	cmp	r0, r1
1a001f44:	d903      	bls.n	1a001f4e <__sfvwrite_r+0x1aa>
1a001f46:	68a5      	ldr	r5, [r4, #8]
1a001f48:	4415      	add	r5, r2
1a001f4a:	42ab      	cmp	r3, r5
1a001f4c:	dc19      	bgt.n	1a001f82 <__sfvwrite_r+0x1de>
1a001f4e:	429a      	cmp	r2, r3
1a001f50:	dc7d      	bgt.n	1a00204e <__sfvwrite_r+0x2aa>
1a001f52:	4613      	mov	r3, r2
1a001f54:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a001f56:	69e1      	ldr	r1, [r4, #28]
1a001f58:	4632      	mov	r2, r6
1a001f5a:	4650      	mov	r0, sl
1a001f5c:	47a8      	blx	r5
1a001f5e:	1e05      	subs	r5, r0, #0
1a001f60:	dd1c      	ble.n	1a001f9c <__sfvwrite_r+0x1f8>
1a001f62:	ebb9 0905 	subs.w	r9, r9, r5
1a001f66:	d06b      	beq.n	1a002040 <__sfvwrite_r+0x29c>
1a001f68:	2001      	movs	r0, #1
1a001f6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a001f6e:	1b5b      	subs	r3, r3, r5
1a001f70:	442e      	add	r6, r5
1a001f72:	1b7f      	subs	r7, r7, r5
1a001f74:	f8c8 3008 	str.w	r3, [r8, #8]
1a001f78:	bb13      	cbnz	r3, 1a001fc0 <__sfvwrite_r+0x21c>
1a001f7a:	2000      	movs	r0, #0
1a001f7c:	b003      	add	sp, #12
1a001f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001f82:	4631      	mov	r1, r6
1a001f84:	462a      	mov	r2, r5
1a001f86:	f000 fbcb 	bl	1a002720 <memmove>
1a001f8a:	6823      	ldr	r3, [r4, #0]
1a001f8c:	442b      	add	r3, r5
1a001f8e:	6023      	str	r3, [r4, #0]
1a001f90:	4621      	mov	r1, r4
1a001f92:	4650      	mov	r0, sl
1a001f94:	f000 ffaa 	bl	1a002eec <_fflush_r>
1a001f98:	2800      	cmp	r0, #0
1a001f9a:	d0e2      	beq.n	1a001f62 <__sfvwrite_r+0x1be>
1a001f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001fa8:	81a3      	strh	r3, [r4, #12]
1a001faa:	b003      	add	sp, #12
1a001fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001fb0:	2000      	movs	r0, #0
1a001fb2:	4770      	bx	lr
1a001fb4:	4633      	mov	r3, r6
1a001fb6:	4691      	mov	r9, r2
1a001fb8:	4610      	mov	r0, r2
1a001fba:	4617      	mov	r7, r2
1a001fbc:	464e      	mov	r6, r9
1a001fbe:	469b      	mov	fp, r3
1a001fc0:	2f00      	cmp	r7, #0
1a001fc2:	d0a5      	beq.n	1a001f10 <__sfvwrite_r+0x16c>
1a001fc4:	2800      	cmp	r0, #0
1a001fc6:	d1b5      	bne.n	1a001f34 <__sfvwrite_r+0x190>
1a001fc8:	463a      	mov	r2, r7
1a001fca:	210a      	movs	r1, #10
1a001fcc:	4630      	mov	r0, r6
1a001fce:	f000 fb57 	bl	1a002680 <memchr>
1a001fd2:	2800      	cmp	r0, #0
1a001fd4:	d1ab      	bne.n	1a001f2e <__sfvwrite_r+0x18a>
1a001fd6:	1c7b      	adds	r3, r7, #1
1a001fd8:	4699      	mov	r9, r3
1a001fda:	e7ac      	b.n	1a001f36 <__sfvwrite_r+0x192>
1a001fdc:	6923      	ldr	r3, [r4, #16]
1a001fde:	4283      	cmp	r3, r0
1a001fe0:	d315      	bcc.n	1a00200e <__sfvwrite_r+0x26a>
1a001fe2:	6961      	ldr	r1, [r4, #20]
1a001fe4:	42a9      	cmp	r1, r5
1a001fe6:	d812      	bhi.n	1a00200e <__sfvwrite_r+0x26a>
1a001fe8:	4b2e      	ldr	r3, [pc, #184]	; (1a0020a4 <__sfvwrite_r+0x300>)
1a001fea:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a001fec:	429d      	cmp	r5, r3
1a001fee:	bf94      	ite	ls
1a001ff0:	462b      	movls	r3, r5
1a001ff2:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a001ff6:	464a      	mov	r2, r9
1a001ff8:	fb93 f3f1 	sdiv	r3, r3, r1
1a001ffc:	4650      	mov	r0, sl
1a001ffe:	fb01 f303 	mul.w	r3, r1, r3
1a002002:	69e1      	ldr	r1, [r4, #28]
1a002004:	47b8      	blx	r7
1a002006:	1e07      	subs	r7, r0, #0
1a002008:	ddc8      	ble.n	1a001f9c <__sfvwrite_r+0x1f8>
1a00200a:	1bed      	subs	r5, r5, r7
1a00200c:	e76d      	b.n	1a001eea <__sfvwrite_r+0x146>
1a00200e:	42af      	cmp	r7, r5
1a002010:	bf28      	it	cs
1a002012:	462f      	movcs	r7, r5
1a002014:	463a      	mov	r2, r7
1a002016:	4649      	mov	r1, r9
1a002018:	f000 fb82 	bl	1a002720 <memmove>
1a00201c:	68a3      	ldr	r3, [r4, #8]
1a00201e:	6822      	ldr	r2, [r4, #0]
1a002020:	1bdb      	subs	r3, r3, r7
1a002022:	443a      	add	r2, r7
1a002024:	60a3      	str	r3, [r4, #8]
1a002026:	6022      	str	r2, [r4, #0]
1a002028:	2b00      	cmp	r3, #0
1a00202a:	d1ee      	bne.n	1a00200a <__sfvwrite_r+0x266>
1a00202c:	4621      	mov	r1, r4
1a00202e:	4650      	mov	r0, sl
1a002030:	f000 ff5c 	bl	1a002eec <_fflush_r>
1a002034:	2800      	cmp	r0, #0
1a002036:	d0e8      	beq.n	1a00200a <__sfvwrite_r+0x266>
1a002038:	e7b0      	b.n	1a001f9c <__sfvwrite_r+0x1f8>
1a00203a:	462f      	mov	r7, r5
1a00203c:	46ab      	mov	fp, r5
1a00203e:	e748      	b.n	1a001ed2 <__sfvwrite_r+0x12e>
1a002040:	4621      	mov	r1, r4
1a002042:	4650      	mov	r0, sl
1a002044:	f000 ff52 	bl	1a002eec <_fflush_r>
1a002048:	2800      	cmp	r0, #0
1a00204a:	d08e      	beq.n	1a001f6a <__sfvwrite_r+0x1c6>
1a00204c:	e7a6      	b.n	1a001f9c <__sfvwrite_r+0x1f8>
1a00204e:	461a      	mov	r2, r3
1a002050:	4631      	mov	r1, r6
1a002052:	9301      	str	r3, [sp, #4]
1a002054:	f000 fb64 	bl	1a002720 <memmove>
1a002058:	9b01      	ldr	r3, [sp, #4]
1a00205a:	68a1      	ldr	r1, [r4, #8]
1a00205c:	6822      	ldr	r2, [r4, #0]
1a00205e:	1ac9      	subs	r1, r1, r3
1a002060:	441a      	add	r2, r3
1a002062:	60a1      	str	r1, [r4, #8]
1a002064:	6022      	str	r2, [r4, #0]
1a002066:	461d      	mov	r5, r3
1a002068:	e77b      	b.n	1a001f62 <__sfvwrite_r+0x1be>
1a00206a:	4650      	mov	r0, sl
1a00206c:	f000 fbcc 	bl	1a002808 <_realloc_r>
1a002070:	4603      	mov	r3, r0
1a002072:	2800      	cmp	r0, #0
1a002074:	f47f af23 	bne.w	1a001ebe <__sfvwrite_r+0x11a>
1a002078:	6921      	ldr	r1, [r4, #16]
1a00207a:	4650      	mov	r0, sl
1a00207c:	f000 ffb4 	bl	1a002fe8 <_free_r>
1a002080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002084:	220c      	movs	r2, #12
1a002086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00208a:	f8ca 2000 	str.w	r2, [sl]
1a00208e:	e787      	b.n	1a001fa0 <__sfvwrite_r+0x1fc>
1a002090:	230c      	movs	r3, #12
1a002092:	f8ca 3000 	str.w	r3, [sl]
1a002096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00209a:	e781      	b.n	1a001fa0 <__sfvwrite_r+0x1fc>
1a00209c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0020a0:	e76c      	b.n	1a001f7c <__sfvwrite_r+0x1d8>
1a0020a2:	bf00      	nop
1a0020a4:	7ffffffe 	.word	0x7ffffffe
1a0020a8:	7ffffc00 	.word	0x7ffffc00

1a0020ac <_fwalk_reent>:
1a0020ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0020b0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a0020b4:	d01f      	beq.n	1a0020f6 <_fwalk_reent+0x4a>
1a0020b6:	4688      	mov	r8, r1
1a0020b8:	4606      	mov	r6, r0
1a0020ba:	f04f 0900 	mov.w	r9, #0
1a0020be:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a0020c2:	3d01      	subs	r5, #1
1a0020c4:	d411      	bmi.n	1a0020ea <_fwalk_reent+0x3e>
1a0020c6:	89a3      	ldrh	r3, [r4, #12]
1a0020c8:	2b01      	cmp	r3, #1
1a0020ca:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a0020ce:	d908      	bls.n	1a0020e2 <_fwalk_reent+0x36>
1a0020d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a0020d4:	3301      	adds	r3, #1
1a0020d6:	4621      	mov	r1, r4
1a0020d8:	4630      	mov	r0, r6
1a0020da:	d002      	beq.n	1a0020e2 <_fwalk_reent+0x36>
1a0020dc:	47c0      	blx	r8
1a0020de:	ea49 0900 	orr.w	r9, r9, r0
1a0020e2:	1c6b      	adds	r3, r5, #1
1a0020e4:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a0020e8:	d1ed      	bne.n	1a0020c6 <_fwalk_reent+0x1a>
1a0020ea:	683f      	ldr	r7, [r7, #0]
1a0020ec:	2f00      	cmp	r7, #0
1a0020ee:	d1e6      	bne.n	1a0020be <_fwalk_reent+0x12>
1a0020f0:	4648      	mov	r0, r9
1a0020f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0020f6:	46b9      	mov	r9, r7
1a0020f8:	4648      	mov	r0, r9
1a0020fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0020fe:	bf00      	nop

1a002100 <__retarget_lock_init_recursive>:
1a002100:	4770      	bx	lr
1a002102:	bf00      	nop

1a002104 <__retarget_lock_close_recursive>:
1a002104:	4770      	bx	lr
1a002106:	bf00      	nop

1a002108 <__retarget_lock_acquire_recursive>:
1a002108:	4770      	bx	lr
1a00210a:	bf00      	nop

1a00210c <__retarget_lock_release_recursive>:
1a00210c:	4770      	bx	lr
1a00210e:	bf00      	nop

1a002110 <_malloc_r>:
1a002110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002114:	f101 050b 	add.w	r5, r1, #11
1a002118:	2d16      	cmp	r5, #22
1a00211a:	b083      	sub	sp, #12
1a00211c:	4606      	mov	r6, r0
1a00211e:	d823      	bhi.n	1a002168 <_malloc_r+0x58>
1a002120:	2910      	cmp	r1, #16
1a002122:	f200 80b9 	bhi.w	1a002298 <_malloc_r+0x188>
1a002126:	f000 fb63 	bl	1a0027f0 <__malloc_lock>
1a00212a:	2510      	movs	r5, #16
1a00212c:	2318      	movs	r3, #24
1a00212e:	2002      	movs	r0, #2
1a002130:	4fba      	ldr	r7, [pc, #744]	; (1a00241c <_malloc_r+0x30c>)
1a002132:	443b      	add	r3, r7
1a002134:	f1a3 0208 	sub.w	r2, r3, #8
1a002138:	685c      	ldr	r4, [r3, #4]
1a00213a:	4294      	cmp	r4, r2
1a00213c:	f000 80b9 	beq.w	1a0022b2 <_malloc_r+0x1a2>
1a002140:	6863      	ldr	r3, [r4, #4]
1a002142:	f023 0303 	bic.w	r3, r3, #3
1a002146:	4423      	add	r3, r4
1a002148:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a00214c:	685a      	ldr	r2, [r3, #4]
1a00214e:	60e9      	str	r1, [r5, #12]
1a002150:	f042 0201 	orr.w	r2, r2, #1
1a002154:	4630      	mov	r0, r6
1a002156:	608d      	str	r5, [r1, #8]
1a002158:	605a      	str	r2, [r3, #4]
1a00215a:	f000 fb4f 	bl	1a0027fc <__malloc_unlock>
1a00215e:	3408      	adds	r4, #8
1a002160:	4620      	mov	r0, r4
1a002162:	b003      	add	sp, #12
1a002164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002168:	f035 0507 	bics.w	r5, r5, #7
1a00216c:	f100 8094 	bmi.w	1a002298 <_malloc_r+0x188>
1a002170:	42a9      	cmp	r1, r5
1a002172:	f200 8091 	bhi.w	1a002298 <_malloc_r+0x188>
1a002176:	f000 fb3b 	bl	1a0027f0 <__malloc_lock>
1a00217a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a00217e:	f0c0 81a2 	bcc.w	1a0024c6 <_malloc_r+0x3b6>
1a002182:	0a6b      	lsrs	r3, r5, #9
1a002184:	f000 808f 	beq.w	1a0022a6 <_malloc_r+0x196>
1a002188:	2b04      	cmp	r3, #4
1a00218a:	f200 8178 	bhi.w	1a00247e <_malloc_r+0x36e>
1a00218e:	09ab      	lsrs	r3, r5, #6
1a002190:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a002194:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a002198:	00c3      	lsls	r3, r0, #3
1a00219a:	4fa0      	ldr	r7, [pc, #640]	; (1a00241c <_malloc_r+0x30c>)
1a00219c:	443b      	add	r3, r7
1a00219e:	f1a3 0108 	sub.w	r1, r3, #8
1a0021a2:	685c      	ldr	r4, [r3, #4]
1a0021a4:	42a1      	cmp	r1, r4
1a0021a6:	d106      	bne.n	1a0021b6 <_malloc_r+0xa6>
1a0021a8:	e00c      	b.n	1a0021c4 <_malloc_r+0xb4>
1a0021aa:	2a00      	cmp	r2, #0
1a0021ac:	f280 8127 	bge.w	1a0023fe <_malloc_r+0x2ee>
1a0021b0:	68e4      	ldr	r4, [r4, #12]
1a0021b2:	42a1      	cmp	r1, r4
1a0021b4:	d006      	beq.n	1a0021c4 <_malloc_r+0xb4>
1a0021b6:	6863      	ldr	r3, [r4, #4]
1a0021b8:	f023 0303 	bic.w	r3, r3, #3
1a0021bc:	1b5a      	subs	r2, r3, r5
1a0021be:	2a0f      	cmp	r2, #15
1a0021c0:	ddf3      	ble.n	1a0021aa <_malloc_r+0x9a>
1a0021c2:	4660      	mov	r0, ip
1a0021c4:	693c      	ldr	r4, [r7, #16]
1a0021c6:	f8df c268 	ldr.w	ip, [pc, #616]	; 1a002430 <_malloc_r+0x320>
1a0021ca:	4564      	cmp	r4, ip
1a0021cc:	d07c      	beq.n	1a0022c8 <_malloc_r+0x1b8>
1a0021ce:	6863      	ldr	r3, [r4, #4]
1a0021d0:	f023 0303 	bic.w	r3, r3, #3
1a0021d4:	1b5a      	subs	r2, r3, r5
1a0021d6:	2a0f      	cmp	r2, #15
1a0021d8:	f300 8183 	bgt.w	1a0024e2 <_malloc_r+0x3d2>
1a0021dc:	2a00      	cmp	r2, #0
1a0021de:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a0021e2:	f280 8174 	bge.w	1a0024ce <_malloc_r+0x3be>
1a0021e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0021ea:	f080 8125 	bcs.w	1a002438 <_malloc_r+0x328>
1a0021ee:	08db      	lsrs	r3, r3, #3
1a0021f0:	1c59      	adds	r1, r3, #1
1a0021f2:	687a      	ldr	r2, [r7, #4]
1a0021f4:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a0021f8:	f8c4 8008 	str.w	r8, [r4, #8]
1a0021fc:	f04f 0e01 	mov.w	lr, #1
1a002200:	109b      	asrs	r3, r3, #2
1a002202:	fa0e f303 	lsl.w	r3, lr, r3
1a002206:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a00220a:	4313      	orrs	r3, r2
1a00220c:	f1ae 0208 	sub.w	r2, lr, #8
1a002210:	60e2      	str	r2, [r4, #12]
1a002212:	607b      	str	r3, [r7, #4]
1a002214:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a002218:	f8c8 400c 	str.w	r4, [r8, #12]
1a00221c:	1082      	asrs	r2, r0, #2
1a00221e:	2401      	movs	r4, #1
1a002220:	4094      	lsls	r4, r2
1a002222:	429c      	cmp	r4, r3
1a002224:	d856      	bhi.n	1a0022d4 <_malloc_r+0x1c4>
1a002226:	421c      	tst	r4, r3
1a002228:	d106      	bne.n	1a002238 <_malloc_r+0x128>
1a00222a:	f020 0003 	bic.w	r0, r0, #3
1a00222e:	0064      	lsls	r4, r4, #1
1a002230:	421c      	tst	r4, r3
1a002232:	f100 0004 	add.w	r0, r0, #4
1a002236:	d0fa      	beq.n	1a00222e <_malloc_r+0x11e>
1a002238:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a00223c:	46ce      	mov	lr, r9
1a00223e:	4680      	mov	r8, r0
1a002240:	f8de 300c 	ldr.w	r3, [lr, #12]
1a002244:	459e      	cmp	lr, r3
1a002246:	d107      	bne.n	1a002258 <_malloc_r+0x148>
1a002248:	e125      	b.n	1a002496 <_malloc_r+0x386>
1a00224a:	2a00      	cmp	r2, #0
1a00224c:	f280 812c 	bge.w	1a0024a8 <_malloc_r+0x398>
1a002250:	68db      	ldr	r3, [r3, #12]
1a002252:	459e      	cmp	lr, r3
1a002254:	f000 811f 	beq.w	1a002496 <_malloc_r+0x386>
1a002258:	6859      	ldr	r1, [r3, #4]
1a00225a:	f021 0103 	bic.w	r1, r1, #3
1a00225e:	1b4a      	subs	r2, r1, r5
1a002260:	2a0f      	cmp	r2, #15
1a002262:	ddf2      	ble.n	1a00224a <_malloc_r+0x13a>
1a002264:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a002268:	195c      	adds	r4, r3, r5
1a00226a:	f045 0501 	orr.w	r5, r5, #1
1a00226e:	605d      	str	r5, [r3, #4]
1a002270:	f042 0501 	orr.w	r5, r2, #1
1a002274:	f8c8 e00c 	str.w	lr, [r8, #12]
1a002278:	4630      	mov	r0, r6
1a00227a:	f8ce 8008 	str.w	r8, [lr, #8]
1a00227e:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a002282:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a002286:	6065      	str	r5, [r4, #4]
1a002288:	505a      	str	r2, [r3, r1]
1a00228a:	9300      	str	r3, [sp, #0]
1a00228c:	f000 fab6 	bl	1a0027fc <__malloc_unlock>
1a002290:	9b00      	ldr	r3, [sp, #0]
1a002292:	f103 0408 	add.w	r4, r3, #8
1a002296:	e002      	b.n	1a00229e <_malloc_r+0x18e>
1a002298:	230c      	movs	r3, #12
1a00229a:	6033      	str	r3, [r6, #0]
1a00229c:	2400      	movs	r4, #0
1a00229e:	4620      	mov	r0, r4
1a0022a0:	b003      	add	sp, #12
1a0022a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0022a6:	f44f 7300 	mov.w	r3, #512	; 0x200
1a0022aa:	2040      	movs	r0, #64	; 0x40
1a0022ac:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a0022b0:	e773      	b.n	1a00219a <_malloc_r+0x8a>
1a0022b2:	68dc      	ldr	r4, [r3, #12]
1a0022b4:	42a3      	cmp	r3, r4
1a0022b6:	bf08      	it	eq
1a0022b8:	3002      	addeq	r0, #2
1a0022ba:	f47f af41 	bne.w	1a002140 <_malloc_r+0x30>
1a0022be:	693c      	ldr	r4, [r7, #16]
1a0022c0:	f8df c16c 	ldr.w	ip, [pc, #364]	; 1a002430 <_malloc_r+0x320>
1a0022c4:	4564      	cmp	r4, ip
1a0022c6:	d182      	bne.n	1a0021ce <_malloc_r+0xbe>
1a0022c8:	687b      	ldr	r3, [r7, #4]
1a0022ca:	1082      	asrs	r2, r0, #2
1a0022cc:	2401      	movs	r4, #1
1a0022ce:	4094      	lsls	r4, r2
1a0022d0:	429c      	cmp	r4, r3
1a0022d2:	d9a8      	bls.n	1a002226 <_malloc_r+0x116>
1a0022d4:	68bc      	ldr	r4, [r7, #8]
1a0022d6:	6863      	ldr	r3, [r4, #4]
1a0022d8:	f023 0803 	bic.w	r8, r3, #3
1a0022dc:	45a8      	cmp	r8, r5
1a0022de:	d303      	bcc.n	1a0022e8 <_malloc_r+0x1d8>
1a0022e0:	eba8 0305 	sub.w	r3, r8, r5
1a0022e4:	2b0f      	cmp	r3, #15
1a0022e6:	dc7a      	bgt.n	1a0023de <_malloc_r+0x2ce>
1a0022e8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 1a002434 <_malloc_r+0x324>
1a0022ec:	4b4c      	ldr	r3, [pc, #304]	; (1a002420 <_malloc_r+0x310>)
1a0022ee:	f8d9 2000 	ldr.w	r2, [r9]
1a0022f2:	681b      	ldr	r3, [r3, #0]
1a0022f4:	3201      	adds	r2, #1
1a0022f6:	442b      	add	r3, r5
1a0022f8:	eb04 0a08 	add.w	sl, r4, r8
1a0022fc:	f000 813c 	beq.w	1a002578 <_malloc_r+0x468>
1a002300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002304:	330f      	adds	r3, #15
1a002306:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
1a00230a:	f02b 0b0f 	bic.w	fp, fp, #15
1a00230e:	4659      	mov	r1, fp
1a002310:	4630      	mov	r0, r6
1a002312:	f7fe f8a5 	bl	1a000460 <_sbrk_r>
1a002316:	1c41      	adds	r1, r0, #1
1a002318:	4602      	mov	r2, r0
1a00231a:	f000 80fc 	beq.w	1a002516 <_malloc_r+0x406>
1a00231e:	4582      	cmp	sl, r0
1a002320:	f200 80f7 	bhi.w	1a002512 <_malloc_r+0x402>
1a002324:	4b3f      	ldr	r3, [pc, #252]	; (1a002424 <_malloc_r+0x314>)
1a002326:	6818      	ldr	r0, [r3, #0]
1a002328:	4458      	add	r0, fp
1a00232a:	6018      	str	r0, [r3, #0]
1a00232c:	4601      	mov	r1, r0
1a00232e:	f000 8157 	beq.w	1a0025e0 <_malloc_r+0x4d0>
1a002332:	f8d9 0000 	ldr.w	r0, [r9]
1a002336:	9301      	str	r3, [sp, #4]
1a002338:	3001      	adds	r0, #1
1a00233a:	bf1b      	ittet	ne
1a00233c:	eba2 0a0a 	subne.w	sl, r2, sl
1a002340:	4451      	addne	r1, sl
1a002342:	f8c9 2000 	streq.w	r2, [r9]
1a002346:	6019      	strne	r1, [r3, #0]
1a002348:	f012 0a07 	ands.w	sl, r2, #7
1a00234c:	f000 8120 	beq.w	1a002590 <_malloc_r+0x480>
1a002350:	f1ca 0108 	rsb	r1, sl, #8
1a002354:	440a      	add	r2, r1
1a002356:	f5ca 5180 	rsb	r1, sl, #4096	; 0x1000
1a00235a:	4493      	add	fp, r2
1a00235c:	3108      	adds	r1, #8
1a00235e:	eba1 010b 	sub.w	r1, r1, fp
1a002362:	f3c1 090b 	ubfx	r9, r1, #0, #12
1a002366:	4649      	mov	r1, r9
1a002368:	4630      	mov	r0, r6
1a00236a:	9200      	str	r2, [sp, #0]
1a00236c:	f7fe f878 	bl	1a000460 <_sbrk_r>
1a002370:	1c42      	adds	r2, r0, #1
1a002372:	e9dd 2300 	ldrd	r2, r3, [sp]
1a002376:	f000 8158 	beq.w	1a00262a <_malloc_r+0x51a>
1a00237a:	1a80      	subs	r0, r0, r2
1a00237c:	eb00 0b09 	add.w	fp, r0, r9
1a002380:	6818      	ldr	r0, [r3, #0]
1a002382:	60ba      	str	r2, [r7, #8]
1a002384:	f04b 0101 	orr.w	r1, fp, #1
1a002388:	4448      	add	r0, r9
1a00238a:	42bc      	cmp	r4, r7
1a00238c:	6051      	str	r1, [r2, #4]
1a00238e:	6018      	str	r0, [r3, #0]
1a002390:	f000 8132 	beq.w	1a0025f8 <_malloc_r+0x4e8>
1a002394:	f1b8 0f0f 	cmp.w	r8, #15
1a002398:	f240 8130 	bls.w	1a0025fc <_malloc_r+0x4ec>
1a00239c:	6861      	ldr	r1, [r4, #4]
1a00239e:	f1a8 0c0c 	sub.w	ip, r8, #12
1a0023a2:	f02c 0c07 	bic.w	ip, ip, #7
1a0023a6:	f001 0101 	and.w	r1, r1, #1
1a0023aa:	eb04 0e0c 	add.w	lr, r4, ip
1a0023ae:	ea41 010c 	orr.w	r1, r1, ip
1a0023b2:	f04f 0805 	mov.w	r8, #5
1a0023b6:	f1bc 0f0f 	cmp.w	ip, #15
1a0023ba:	6061      	str	r1, [r4, #4]
1a0023bc:	e9ce 8801 	strd	r8, r8, [lr, #4]
1a0023c0:	f200 813b 	bhi.w	1a00263a <_malloc_r+0x52a>
1a0023c4:	6851      	ldr	r1, [r2, #4]
1a0023c6:	4614      	mov	r4, r2
1a0023c8:	4b17      	ldr	r3, [pc, #92]	; (1a002428 <_malloc_r+0x318>)
1a0023ca:	681a      	ldr	r2, [r3, #0]
1a0023cc:	4282      	cmp	r2, r0
1a0023ce:	bf38      	it	cc
1a0023d0:	6018      	strcc	r0, [r3, #0]
1a0023d2:	4b16      	ldr	r3, [pc, #88]	; (1a00242c <_malloc_r+0x31c>)
1a0023d4:	681a      	ldr	r2, [r3, #0]
1a0023d6:	4282      	cmp	r2, r0
1a0023d8:	bf38      	it	cc
1a0023da:	6018      	strcc	r0, [r3, #0]
1a0023dc:	e09d      	b.n	1a00251a <_malloc_r+0x40a>
1a0023de:	1962      	adds	r2, r4, r5
1a0023e0:	f043 0301 	orr.w	r3, r3, #1
1a0023e4:	f045 0501 	orr.w	r5, r5, #1
1a0023e8:	6065      	str	r5, [r4, #4]
1a0023ea:	4630      	mov	r0, r6
1a0023ec:	60ba      	str	r2, [r7, #8]
1a0023ee:	6053      	str	r3, [r2, #4]
1a0023f0:	f000 fa04 	bl	1a0027fc <__malloc_unlock>
1a0023f4:	3408      	adds	r4, #8
1a0023f6:	4620      	mov	r0, r4
1a0023f8:	b003      	add	sp, #12
1a0023fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0023fe:	4423      	add	r3, r4
1a002400:	68e1      	ldr	r1, [r4, #12]
1a002402:	685a      	ldr	r2, [r3, #4]
1a002404:	68a5      	ldr	r5, [r4, #8]
1a002406:	f042 0201 	orr.w	r2, r2, #1
1a00240a:	60e9      	str	r1, [r5, #12]
1a00240c:	4630      	mov	r0, r6
1a00240e:	608d      	str	r5, [r1, #8]
1a002410:	605a      	str	r2, [r3, #4]
1a002412:	f000 f9f3 	bl	1a0027fc <__malloc_unlock>
1a002416:	3408      	adds	r4, #8
1a002418:	e741      	b.n	1a00229e <_malloc_r+0x18e>
1a00241a:	bf00      	nop
1a00241c:	10000478 	.word	0x10000478
1a002420:	100008d8 	.word	0x100008d8
1a002424:	100008a8 	.word	0x100008a8
1a002428:	100008d0 	.word	0x100008d0
1a00242c:	100008d4 	.word	0x100008d4
1a002430:	10000480 	.word	0x10000480
1a002434:	10000880 	.word	0x10000880
1a002438:	0a5a      	lsrs	r2, r3, #9
1a00243a:	2a04      	cmp	r2, #4
1a00243c:	d963      	bls.n	1a002506 <_malloc_r+0x3f6>
1a00243e:	2a14      	cmp	r2, #20
1a002440:	f200 80b7 	bhi.w	1a0025b2 <_malloc_r+0x4a2>
1a002444:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a002448:	00c9      	lsls	r1, r1, #3
1a00244a:	325b      	adds	r2, #91	; 0x5b
1a00244c:	eb07 0e01 	add.w	lr, r7, r1
1a002450:	5879      	ldr	r1, [r7, r1]
1a002452:	f1ae 0e08 	sub.w	lr, lr, #8
1a002456:	458e      	cmp	lr, r1
1a002458:	f000 8091 	beq.w	1a00257e <_malloc_r+0x46e>
1a00245c:	684a      	ldr	r2, [r1, #4]
1a00245e:	f022 0203 	bic.w	r2, r2, #3
1a002462:	429a      	cmp	r2, r3
1a002464:	d902      	bls.n	1a00246c <_malloc_r+0x35c>
1a002466:	6889      	ldr	r1, [r1, #8]
1a002468:	458e      	cmp	lr, r1
1a00246a:	d1f7      	bne.n	1a00245c <_malloc_r+0x34c>
1a00246c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a002470:	687b      	ldr	r3, [r7, #4]
1a002472:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a002476:	f8ce 4008 	str.w	r4, [lr, #8]
1a00247a:	60cc      	str	r4, [r1, #12]
1a00247c:	e6ce      	b.n	1a00221c <_malloc_r+0x10c>
1a00247e:	2b14      	cmp	r3, #20
1a002480:	d959      	bls.n	1a002536 <_malloc_r+0x426>
1a002482:	2b54      	cmp	r3, #84	; 0x54
1a002484:	f200 809d 	bhi.w	1a0025c2 <_malloc_r+0x4b2>
1a002488:	0b2b      	lsrs	r3, r5, #12
1a00248a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a00248e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a002492:	00c3      	lsls	r3, r0, #3
1a002494:	e681      	b.n	1a00219a <_malloc_r+0x8a>
1a002496:	f108 0801 	add.w	r8, r8, #1
1a00249a:	f018 0f03 	tst.w	r8, #3
1a00249e:	f10e 0e08 	add.w	lr, lr, #8
1a0024a2:	f47f aecd 	bne.w	1a002240 <_malloc_r+0x130>
1a0024a6:	e051      	b.n	1a00254c <_malloc_r+0x43c>
1a0024a8:	4419      	add	r1, r3
1a0024aa:	461c      	mov	r4, r3
1a0024ac:	684a      	ldr	r2, [r1, #4]
1a0024ae:	68db      	ldr	r3, [r3, #12]
1a0024b0:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a0024b4:	f042 0201 	orr.w	r2, r2, #1
1a0024b8:	604a      	str	r2, [r1, #4]
1a0024ba:	4630      	mov	r0, r6
1a0024bc:	60eb      	str	r3, [r5, #12]
1a0024be:	609d      	str	r5, [r3, #8]
1a0024c0:	f000 f99c 	bl	1a0027fc <__malloc_unlock>
1a0024c4:	e6eb      	b.n	1a00229e <_malloc_r+0x18e>
1a0024c6:	08e8      	lsrs	r0, r5, #3
1a0024c8:	f105 0308 	add.w	r3, r5, #8
1a0024cc:	e630      	b.n	1a002130 <_malloc_r+0x20>
1a0024ce:	4423      	add	r3, r4
1a0024d0:	4630      	mov	r0, r6
1a0024d2:	685a      	ldr	r2, [r3, #4]
1a0024d4:	f042 0201 	orr.w	r2, r2, #1
1a0024d8:	605a      	str	r2, [r3, #4]
1a0024da:	3408      	adds	r4, #8
1a0024dc:	f000 f98e 	bl	1a0027fc <__malloc_unlock>
1a0024e0:	e6dd      	b.n	1a00229e <_malloc_r+0x18e>
1a0024e2:	1961      	adds	r1, r4, r5
1a0024e4:	f045 0e01 	orr.w	lr, r5, #1
1a0024e8:	f042 0501 	orr.w	r5, r2, #1
1a0024ec:	f8c4 e004 	str.w	lr, [r4, #4]
1a0024f0:	4630      	mov	r0, r6
1a0024f2:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a0024f6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a0024fa:	604d      	str	r5, [r1, #4]
1a0024fc:	50e2      	str	r2, [r4, r3]
1a0024fe:	f000 f97d 	bl	1a0027fc <__malloc_unlock>
1a002502:	3408      	adds	r4, #8
1a002504:	e6cb      	b.n	1a00229e <_malloc_r+0x18e>
1a002506:	099a      	lsrs	r2, r3, #6
1a002508:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a00250c:	00c9      	lsls	r1, r1, #3
1a00250e:	3238      	adds	r2, #56	; 0x38
1a002510:	e79c      	b.n	1a00244c <_malloc_r+0x33c>
1a002512:	42bc      	cmp	r4, r7
1a002514:	d05f      	beq.n	1a0025d6 <_malloc_r+0x4c6>
1a002516:	68bc      	ldr	r4, [r7, #8]
1a002518:	6861      	ldr	r1, [r4, #4]
1a00251a:	f021 0b03 	bic.w	fp, r1, #3
1a00251e:	45ab      	cmp	fp, r5
1a002520:	ebab 0305 	sub.w	r3, fp, r5
1a002524:	d302      	bcc.n	1a00252c <_malloc_r+0x41c>
1a002526:	2b0f      	cmp	r3, #15
1a002528:	f73f af59 	bgt.w	1a0023de <_malloc_r+0x2ce>
1a00252c:	4630      	mov	r0, r6
1a00252e:	f000 f965 	bl	1a0027fc <__malloc_unlock>
1a002532:	2400      	movs	r4, #0
1a002534:	e6b3      	b.n	1a00229e <_malloc_r+0x18e>
1a002536:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a00253a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a00253e:	00c3      	lsls	r3, r0, #3
1a002540:	e62b      	b.n	1a00219a <_malloc_r+0x8a>
1a002542:	f859 3908 	ldr.w	r3, [r9], #-8
1a002546:	454b      	cmp	r3, r9
1a002548:	f040 8096 	bne.w	1a002678 <_malloc_r+0x568>
1a00254c:	f010 0f03 	tst.w	r0, #3
1a002550:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a002554:	d1f5      	bne.n	1a002542 <_malloc_r+0x432>
1a002556:	687b      	ldr	r3, [r7, #4]
1a002558:	ea23 0304 	bic.w	r3, r3, r4
1a00255c:	607b      	str	r3, [r7, #4]
1a00255e:	0064      	lsls	r4, r4, #1
1a002560:	429c      	cmp	r4, r3
1a002562:	f63f aeb7 	bhi.w	1a0022d4 <_malloc_r+0x1c4>
1a002566:	b91c      	cbnz	r4, 1a002570 <_malloc_r+0x460>
1a002568:	e6b4      	b.n	1a0022d4 <_malloc_r+0x1c4>
1a00256a:	0064      	lsls	r4, r4, #1
1a00256c:	f108 0804 	add.w	r8, r8, #4
1a002570:	421c      	tst	r4, r3
1a002572:	d0fa      	beq.n	1a00256a <_malloc_r+0x45a>
1a002574:	4640      	mov	r0, r8
1a002576:	e65f      	b.n	1a002238 <_malloc_r+0x128>
1a002578:	f103 0b10 	add.w	fp, r3, #16
1a00257c:	e6c7      	b.n	1a00230e <_malloc_r+0x1fe>
1a00257e:	687b      	ldr	r3, [r7, #4]
1a002580:	1092      	asrs	r2, r2, #2
1a002582:	f04f 0801 	mov.w	r8, #1
1a002586:	fa08 f202 	lsl.w	r2, r8, r2
1a00258a:	4313      	orrs	r3, r2
1a00258c:	607b      	str	r3, [r7, #4]
1a00258e:	e770      	b.n	1a002472 <_malloc_r+0x362>
1a002590:	eb02 000b 	add.w	r0, r2, fp
1a002594:	4240      	negs	r0, r0
1a002596:	f3c0 090b 	ubfx	r9, r0, #0, #12
1a00259a:	4649      	mov	r1, r9
1a00259c:	4630      	mov	r0, r6
1a00259e:	9200      	str	r2, [sp, #0]
1a0025a0:	f7fd ff5e 	bl	1a000460 <_sbrk_r>
1a0025a4:	1c43      	adds	r3, r0, #1
1a0025a6:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0025aa:	f47f aee6 	bne.w	1a00237a <_malloc_r+0x26a>
1a0025ae:	46d1      	mov	r9, sl
1a0025b0:	e6e6      	b.n	1a002380 <_malloc_r+0x270>
1a0025b2:	2a54      	cmp	r2, #84	; 0x54
1a0025b4:	d825      	bhi.n	1a002602 <_malloc_r+0x4f2>
1a0025b6:	0b1a      	lsrs	r2, r3, #12
1a0025b8:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a0025bc:	00c9      	lsls	r1, r1, #3
1a0025be:	326e      	adds	r2, #110	; 0x6e
1a0025c0:	e744      	b.n	1a00244c <_malloc_r+0x33c>
1a0025c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a0025c6:	d825      	bhi.n	1a002614 <_malloc_r+0x504>
1a0025c8:	0beb      	lsrs	r3, r5, #15
1a0025ca:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a0025ce:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a0025d2:	00c3      	lsls	r3, r0, #3
1a0025d4:	e5e1      	b.n	1a00219a <_malloc_r+0x8a>
1a0025d6:	4b29      	ldr	r3, [pc, #164]	; (1a00267c <_malloc_r+0x56c>)
1a0025d8:	6819      	ldr	r1, [r3, #0]
1a0025da:	4459      	add	r1, fp
1a0025dc:	6019      	str	r1, [r3, #0]
1a0025de:	e6a8      	b.n	1a002332 <_malloc_r+0x222>
1a0025e0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
1a0025e4:	f1bc 0f00 	cmp.w	ip, #0
1a0025e8:	f47f aea3 	bne.w	1a002332 <_malloc_r+0x222>
1a0025ec:	44c3      	add	fp, r8
1a0025ee:	68bc      	ldr	r4, [r7, #8]
1a0025f0:	f04b 0101 	orr.w	r1, fp, #1
1a0025f4:	6061      	str	r1, [r4, #4]
1a0025f6:	e6e7      	b.n	1a0023c8 <_malloc_r+0x2b8>
1a0025f8:	4614      	mov	r4, r2
1a0025fa:	e6e5      	b.n	1a0023c8 <_malloc_r+0x2b8>
1a0025fc:	2301      	movs	r3, #1
1a0025fe:	6053      	str	r3, [r2, #4]
1a002600:	e794      	b.n	1a00252c <_malloc_r+0x41c>
1a002602:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a002606:	d823      	bhi.n	1a002650 <_malloc_r+0x540>
1a002608:	0bda      	lsrs	r2, r3, #15
1a00260a:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a00260e:	00c9      	lsls	r1, r1, #3
1a002610:	3277      	adds	r2, #119	; 0x77
1a002612:	e71b      	b.n	1a00244c <_malloc_r+0x33c>
1a002614:	f240 5254 	movw	r2, #1364	; 0x554
1a002618:	4293      	cmp	r3, r2
1a00261a:	d823      	bhi.n	1a002664 <_malloc_r+0x554>
1a00261c:	0cab      	lsrs	r3, r5, #18
1a00261e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a002622:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a002626:	00c3      	lsls	r3, r0, #3
1a002628:	e5b7      	b.n	1a00219a <_malloc_r+0x8a>
1a00262a:	f1aa 0a08 	sub.w	sl, sl, #8
1a00262e:	44d3      	add	fp, sl
1a002630:	ebab 0b02 	sub.w	fp, fp, r2
1a002634:	f04f 0900 	mov.w	r9, #0
1a002638:	e6a2      	b.n	1a002380 <_malloc_r+0x270>
1a00263a:	f104 0108 	add.w	r1, r4, #8
1a00263e:	4630      	mov	r0, r6
1a002640:	9300      	str	r3, [sp, #0]
1a002642:	f000 fcd1 	bl	1a002fe8 <_free_r>
1a002646:	68bc      	ldr	r4, [r7, #8]
1a002648:	9b00      	ldr	r3, [sp, #0]
1a00264a:	6861      	ldr	r1, [r4, #4]
1a00264c:	6818      	ldr	r0, [r3, #0]
1a00264e:	e6bb      	b.n	1a0023c8 <_malloc_r+0x2b8>
1a002650:	f240 5154 	movw	r1, #1364	; 0x554
1a002654:	428a      	cmp	r2, r1
1a002656:	d80b      	bhi.n	1a002670 <_malloc_r+0x560>
1a002658:	0c9a      	lsrs	r2, r3, #18
1a00265a:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a00265e:	00c9      	lsls	r1, r1, #3
1a002660:	327c      	adds	r2, #124	; 0x7c
1a002662:	e6f3      	b.n	1a00244c <_malloc_r+0x33c>
1a002664:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a002668:	207f      	movs	r0, #127	; 0x7f
1a00266a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a00266e:	e594      	b.n	1a00219a <_malloc_r+0x8a>
1a002670:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a002674:	227e      	movs	r2, #126	; 0x7e
1a002676:	e6e9      	b.n	1a00244c <_malloc_r+0x33c>
1a002678:	687b      	ldr	r3, [r7, #4]
1a00267a:	e770      	b.n	1a00255e <_malloc_r+0x44e>
1a00267c:	100008a8 	.word	0x100008a8

1a002680 <memchr>:
1a002680:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a002684:	2a10      	cmp	r2, #16
1a002686:	db2b      	blt.n	1a0026e0 <memchr+0x60>
1a002688:	f010 0f07 	tst.w	r0, #7
1a00268c:	d008      	beq.n	1a0026a0 <memchr+0x20>
1a00268e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a002692:	3a01      	subs	r2, #1
1a002694:	428b      	cmp	r3, r1
1a002696:	d02d      	beq.n	1a0026f4 <memchr+0x74>
1a002698:	f010 0f07 	tst.w	r0, #7
1a00269c:	b342      	cbz	r2, 1a0026f0 <memchr+0x70>
1a00269e:	d1f6      	bne.n	1a00268e <memchr+0xe>
1a0026a0:	b4f0      	push	{r4, r5, r6, r7}
1a0026a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0026a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0026aa:	f022 0407 	bic.w	r4, r2, #7
1a0026ae:	f07f 0700 	mvns.w	r7, #0
1a0026b2:	2300      	movs	r3, #0
1a0026b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0026b8:	3c08      	subs	r4, #8
1a0026ba:	ea85 0501 	eor.w	r5, r5, r1
1a0026be:	ea86 0601 	eor.w	r6, r6, r1
1a0026c2:	fa85 f547 	uadd8	r5, r5, r7
1a0026c6:	faa3 f587 	sel	r5, r3, r7
1a0026ca:	fa86 f647 	uadd8	r6, r6, r7
1a0026ce:	faa5 f687 	sel	r6, r5, r7
1a0026d2:	b98e      	cbnz	r6, 1a0026f8 <memchr+0x78>
1a0026d4:	d1ee      	bne.n	1a0026b4 <memchr+0x34>
1a0026d6:	bcf0      	pop	{r4, r5, r6, r7}
1a0026d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0026dc:	f002 0207 	and.w	r2, r2, #7
1a0026e0:	b132      	cbz	r2, 1a0026f0 <memchr+0x70>
1a0026e2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0026e6:	3a01      	subs	r2, #1
1a0026e8:	ea83 0301 	eor.w	r3, r3, r1
1a0026ec:	b113      	cbz	r3, 1a0026f4 <memchr+0x74>
1a0026ee:	d1f8      	bne.n	1a0026e2 <memchr+0x62>
1a0026f0:	2000      	movs	r0, #0
1a0026f2:	4770      	bx	lr
1a0026f4:	3801      	subs	r0, #1
1a0026f6:	4770      	bx	lr
1a0026f8:	2d00      	cmp	r5, #0
1a0026fa:	bf06      	itte	eq
1a0026fc:	4635      	moveq	r5, r6
1a0026fe:	3803      	subeq	r0, #3
1a002700:	3807      	subne	r0, #7
1a002702:	f015 0f01 	tst.w	r5, #1
1a002706:	d107      	bne.n	1a002718 <memchr+0x98>
1a002708:	3001      	adds	r0, #1
1a00270a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00270e:	bf02      	ittt	eq
1a002710:	3001      	addeq	r0, #1
1a002712:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a002716:	3001      	addeq	r0, #1
1a002718:	bcf0      	pop	{r4, r5, r6, r7}
1a00271a:	3801      	subs	r0, #1
1a00271c:	4770      	bx	lr
1a00271e:	bf00      	nop

1a002720 <memmove>:
1a002720:	4288      	cmp	r0, r1
1a002722:	b4f0      	push	{r4, r5, r6, r7}
1a002724:	d90d      	bls.n	1a002742 <memmove+0x22>
1a002726:	188b      	adds	r3, r1, r2
1a002728:	4283      	cmp	r3, r0
1a00272a:	d90a      	bls.n	1a002742 <memmove+0x22>
1a00272c:	1884      	adds	r4, r0, r2
1a00272e:	b132      	cbz	r2, 1a00273e <memmove+0x1e>
1a002730:	4622      	mov	r2, r4
1a002732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a002736:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a00273a:	4299      	cmp	r1, r3
1a00273c:	d1f9      	bne.n	1a002732 <memmove+0x12>
1a00273e:	bcf0      	pop	{r4, r5, r6, r7}
1a002740:	4770      	bx	lr
1a002742:	2a0f      	cmp	r2, #15
1a002744:	d80e      	bhi.n	1a002764 <memmove+0x44>
1a002746:	4603      	mov	r3, r0
1a002748:	1e54      	subs	r4, r2, #1
1a00274a:	2a00      	cmp	r2, #0
1a00274c:	d0f7      	beq.n	1a00273e <memmove+0x1e>
1a00274e:	3401      	adds	r4, #1
1a002750:	440c      	add	r4, r1
1a002752:	3b01      	subs	r3, #1
1a002754:	f811 2b01 	ldrb.w	r2, [r1], #1
1a002758:	f803 2f01 	strb.w	r2, [r3, #1]!
1a00275c:	42a1      	cmp	r1, r4
1a00275e:	d1f9      	bne.n	1a002754 <memmove+0x34>
1a002760:	bcf0      	pop	{r4, r5, r6, r7}
1a002762:	4770      	bx	lr
1a002764:	ea40 0301 	orr.w	r3, r0, r1
1a002768:	079b      	lsls	r3, r3, #30
1a00276a:	d13b      	bne.n	1a0027e4 <memmove+0xc4>
1a00276c:	f1a2 0710 	sub.w	r7, r2, #16
1a002770:	093f      	lsrs	r7, r7, #4
1a002772:	f101 0620 	add.w	r6, r1, #32
1a002776:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a00277a:	f101 0310 	add.w	r3, r1, #16
1a00277e:	f100 0410 	add.w	r4, r0, #16
1a002782:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a002786:	f844 5c10 	str.w	r5, [r4, #-16]
1a00278a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a00278e:	f844 5c0c 	str.w	r5, [r4, #-12]
1a002792:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a002796:	f844 5c08 	str.w	r5, [r4, #-8]
1a00279a:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a00279e:	f844 5c04 	str.w	r5, [r4, #-4]
1a0027a2:	3310      	adds	r3, #16
1a0027a4:	42b3      	cmp	r3, r6
1a0027a6:	f104 0410 	add.w	r4, r4, #16
1a0027aa:	d1ea      	bne.n	1a002782 <memmove+0x62>
1a0027ac:	1c7b      	adds	r3, r7, #1
1a0027ae:	011b      	lsls	r3, r3, #4
1a0027b0:	f012 0f0c 	tst.w	r2, #12
1a0027b4:	4419      	add	r1, r3
1a0027b6:	f002 050f 	and.w	r5, r2, #15
1a0027ba:	4403      	add	r3, r0
1a0027bc:	d015      	beq.n	1a0027ea <memmove+0xca>
1a0027be:	3d04      	subs	r5, #4
1a0027c0:	08ad      	lsrs	r5, r5, #2
1a0027c2:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a0027c6:	1f1c      	subs	r4, r3, #4
1a0027c8:	460e      	mov	r6, r1
1a0027ca:	f856 7b04 	ldr.w	r7, [r6], #4
1a0027ce:	f844 7f04 	str.w	r7, [r4, #4]!
1a0027d2:	4564      	cmp	r4, ip
1a0027d4:	d1f9      	bne.n	1a0027ca <memmove+0xaa>
1a0027d6:	3501      	adds	r5, #1
1a0027d8:	00ad      	lsls	r5, r5, #2
1a0027da:	442b      	add	r3, r5
1a0027dc:	4429      	add	r1, r5
1a0027de:	f002 0203 	and.w	r2, r2, #3
1a0027e2:	e7b1      	b.n	1a002748 <memmove+0x28>
1a0027e4:	1e54      	subs	r4, r2, #1
1a0027e6:	4603      	mov	r3, r0
1a0027e8:	e7b1      	b.n	1a00274e <memmove+0x2e>
1a0027ea:	462a      	mov	r2, r5
1a0027ec:	e7ac      	b.n	1a002748 <memmove+0x28>
1a0027ee:	bf00      	nop

1a0027f0 <__malloc_lock>:
1a0027f0:	4801      	ldr	r0, [pc, #4]	; (1a0027f8 <__malloc_lock+0x8>)
1a0027f2:	f7ff bc89 	b.w	1a002108 <__retarget_lock_acquire_recursive>
1a0027f6:	bf00      	nop
1a0027f8:	100008f4 	.word	0x100008f4

1a0027fc <__malloc_unlock>:
1a0027fc:	4801      	ldr	r0, [pc, #4]	; (1a002804 <__malloc_unlock+0x8>)
1a0027fe:	f7ff bc85 	b.w	1a00210c <__retarget_lock_release_recursive>
1a002802:	bf00      	nop
1a002804:	100008f4 	.word	0x100008f4

1a002808 <_realloc_r>:
1a002808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00280c:	4617      	mov	r7, r2
1a00280e:	2900      	cmp	r1, #0
1a002810:	f000 80bb 	beq.w	1a00298a <_realloc_r+0x182>
1a002814:	f107 040b 	add.w	r4, r7, #11
1a002818:	4681      	mov	r9, r0
1a00281a:	460d      	mov	r5, r1
1a00281c:	f7ff ffe8 	bl	1a0027f0 <__malloc_lock>
1a002820:	2c16      	cmp	r4, #22
1a002822:	d85e      	bhi.n	1a0028e2 <_realloc_r+0xda>
1a002824:	2410      	movs	r4, #16
1a002826:	4622      	mov	r2, r4
1a002828:	42a7      	cmp	r7, r4
1a00282a:	d85f      	bhi.n	1a0028ec <_realloc_r+0xe4>
1a00282c:	f855 ec04 	ldr.w	lr, [r5, #-4]
1a002830:	f02e 0603 	bic.w	r6, lr, #3
1a002834:	f1a5 0808 	sub.w	r8, r5, #8
1a002838:	4296      	cmp	r6, r2
1a00283a:	eb08 0a06 	add.w	sl, r8, r6
1a00283e:	f280 8081 	bge.w	1a002944 <_realloc_r+0x13c>
1a002842:	4bcb      	ldr	r3, [pc, #812]	; (1a002b70 <_realloc_r+0x368>)
1a002844:	f8da 0004 	ldr.w	r0, [sl, #4]
1a002848:	6899      	ldr	r1, [r3, #8]
1a00284a:	4551      	cmp	r1, sl
1a00284c:	f000 80b5 	beq.w	1a0029ba <_realloc_r+0x1b2>
1a002850:	f020 0301 	bic.w	r3, r0, #1
1a002854:	4453      	add	r3, sl
1a002856:	685b      	ldr	r3, [r3, #4]
1a002858:	07db      	lsls	r3, r3, #31
1a00285a:	f100 808a 	bmi.w	1a002972 <_realloc_r+0x16a>
1a00285e:	f020 0003 	bic.w	r0, r0, #3
1a002862:	1833      	adds	r3, r6, r0
1a002864:	4293      	cmp	r3, r2
1a002866:	f280 8112 	bge.w	1a002a8e <_realloc_r+0x286>
1a00286a:	f01e 0f01 	tst.w	lr, #1
1a00286e:	d10f      	bne.n	1a002890 <_realloc_r+0x88>
1a002870:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a002874:	eba8 0b03 	sub.w	fp, r8, r3
1a002878:	f8db 1004 	ldr.w	r1, [fp, #4]
1a00287c:	f021 0103 	bic.w	r1, r1, #3
1a002880:	4408      	add	r0, r1
1a002882:	1983      	adds	r3, r0, r6
1a002884:	4293      	cmp	r3, r2
1a002886:	f280 8116 	bge.w	1a002ab6 <_realloc_r+0x2ae>
1a00288a:	1873      	adds	r3, r6, r1
1a00288c:	4293      	cmp	r3, r2
1a00288e:	da34      	bge.n	1a0028fa <_realloc_r+0xf2>
1a002890:	4639      	mov	r1, r7
1a002892:	4648      	mov	r0, r9
1a002894:	f7ff fc3c 	bl	1a002110 <_malloc_r>
1a002898:	4607      	mov	r7, r0
1a00289a:	b1e0      	cbz	r0, 1a0028d6 <_realloc_r+0xce>
1a00289c:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0028a0:	f023 0301 	bic.w	r3, r3, #1
1a0028a4:	4443      	add	r3, r8
1a0028a6:	f1a0 0208 	sub.w	r2, r0, #8
1a0028aa:	4293      	cmp	r3, r2
1a0028ac:	f000 80f7 	beq.w	1a002a9e <_realloc_r+0x296>
1a0028b0:	1f32      	subs	r2, r6, #4
1a0028b2:	2a24      	cmp	r2, #36	; 0x24
1a0028b4:	f200 80fb 	bhi.w	1a002aae <_realloc_r+0x2a6>
1a0028b8:	2a13      	cmp	r2, #19
1a0028ba:	6829      	ldr	r1, [r5, #0]
1a0028bc:	f200 80c9 	bhi.w	1a002a52 <_realloc_r+0x24a>
1a0028c0:	4603      	mov	r3, r0
1a0028c2:	462a      	mov	r2, r5
1a0028c4:	6019      	str	r1, [r3, #0]
1a0028c6:	6851      	ldr	r1, [r2, #4]
1a0028c8:	6059      	str	r1, [r3, #4]
1a0028ca:	6892      	ldr	r2, [r2, #8]
1a0028cc:	609a      	str	r2, [r3, #8]
1a0028ce:	4629      	mov	r1, r5
1a0028d0:	4648      	mov	r0, r9
1a0028d2:	f000 fb89 	bl	1a002fe8 <_free_r>
1a0028d6:	4648      	mov	r0, r9
1a0028d8:	f7ff ff90 	bl	1a0027fc <__malloc_unlock>
1a0028dc:	4638      	mov	r0, r7
1a0028de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0028e2:	f024 0407 	bic.w	r4, r4, #7
1a0028e6:	2c00      	cmp	r4, #0
1a0028e8:	4622      	mov	r2, r4
1a0028ea:	da9d      	bge.n	1a002828 <_realloc_r+0x20>
1a0028ec:	230c      	movs	r3, #12
1a0028ee:	f8c9 3000 	str.w	r3, [r9]
1a0028f2:	2700      	movs	r7, #0
1a0028f4:	4638      	mov	r0, r7
1a0028f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0028fa:	465f      	mov	r7, fp
1a0028fc:	f8db 100c 	ldr.w	r1, [fp, #12]
1a002900:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a002904:	1f32      	subs	r2, r6, #4
1a002906:	2a24      	cmp	r2, #36	; 0x24
1a002908:	60c1      	str	r1, [r0, #12]
1a00290a:	eb0b 0a03 	add.w	sl, fp, r3
1a00290e:	6088      	str	r0, [r1, #8]
1a002910:	f200 80d9 	bhi.w	1a002ac6 <_realloc_r+0x2be>
1a002914:	2a13      	cmp	r2, #19
1a002916:	6829      	ldr	r1, [r5, #0]
1a002918:	f240 80d3 	bls.w	1a002ac2 <_realloc_r+0x2ba>
1a00291c:	f8cb 1008 	str.w	r1, [fp, #8]
1a002920:	6869      	ldr	r1, [r5, #4]
1a002922:	f8cb 100c 	str.w	r1, [fp, #12]
1a002926:	2a1b      	cmp	r2, #27
1a002928:	68a9      	ldr	r1, [r5, #8]
1a00292a:	f200 80e0 	bhi.w	1a002aee <_realloc_r+0x2e6>
1a00292e:	f10b 0210 	add.w	r2, fp, #16
1a002932:	3508      	adds	r5, #8
1a002934:	6011      	str	r1, [r2, #0]
1a002936:	6869      	ldr	r1, [r5, #4]
1a002938:	6051      	str	r1, [r2, #4]
1a00293a:	68a9      	ldr	r1, [r5, #8]
1a00293c:	6091      	str	r1, [r2, #8]
1a00293e:	461e      	mov	r6, r3
1a002940:	46d8      	mov	r8, fp
1a002942:	463d      	mov	r5, r7
1a002944:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a002948:	1b32      	subs	r2, r6, r4
1a00294a:	2a0f      	cmp	r2, #15
1a00294c:	f003 0301 	and.w	r3, r3, #1
1a002950:	d820      	bhi.n	1a002994 <_realloc_r+0x18c>
1a002952:	4333      	orrs	r3, r6
1a002954:	f8c8 3004 	str.w	r3, [r8, #4]
1a002958:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00295c:	f043 0301 	orr.w	r3, r3, #1
1a002960:	f8ca 3004 	str.w	r3, [sl, #4]
1a002964:	4648      	mov	r0, r9
1a002966:	462f      	mov	r7, r5
1a002968:	f7ff ff48 	bl	1a0027fc <__malloc_unlock>
1a00296c:	4638      	mov	r0, r7
1a00296e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002972:	f01e 0f01 	tst.w	lr, #1
1a002976:	d18b      	bne.n	1a002890 <_realloc_r+0x88>
1a002978:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00297c:	eba8 0b03 	sub.w	fp, r8, r3
1a002980:	f8db 1004 	ldr.w	r1, [fp, #4]
1a002984:	f021 0103 	bic.w	r1, r1, #3
1a002988:	e77f      	b.n	1a00288a <_realloc_r+0x82>
1a00298a:	4611      	mov	r1, r2
1a00298c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002990:	f7ff bbbe 	b.w	1a002110 <_malloc_r>
1a002994:	eb08 0104 	add.w	r1, r8, r4
1a002998:	4323      	orrs	r3, r4
1a00299a:	f042 0201 	orr.w	r2, r2, #1
1a00299e:	f8c8 3004 	str.w	r3, [r8, #4]
1a0029a2:	604a      	str	r2, [r1, #4]
1a0029a4:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0029a8:	f043 0301 	orr.w	r3, r3, #1
1a0029ac:	3108      	adds	r1, #8
1a0029ae:	f8ca 3004 	str.w	r3, [sl, #4]
1a0029b2:	4648      	mov	r0, r9
1a0029b4:	f000 fb18 	bl	1a002fe8 <_free_r>
1a0029b8:	e7d4      	b.n	1a002964 <_realloc_r+0x15c>
1a0029ba:	f020 0003 	bic.w	r0, r0, #3
1a0029be:	1831      	adds	r1, r6, r0
1a0029c0:	f104 0c10 	add.w	ip, r4, #16
1a0029c4:	4561      	cmp	r1, ip
1a0029c6:	da4f      	bge.n	1a002a68 <_realloc_r+0x260>
1a0029c8:	f01e 0f01 	tst.w	lr, #1
1a0029cc:	f47f af60 	bne.w	1a002890 <_realloc_r+0x88>
1a0029d0:	f855 1c08 	ldr.w	r1, [r5, #-8]
1a0029d4:	eba8 0b01 	sub.w	fp, r8, r1
1a0029d8:	f8db 1004 	ldr.w	r1, [fp, #4]
1a0029dc:	f021 0103 	bic.w	r1, r1, #3
1a0029e0:	4408      	add	r0, r1
1a0029e2:	eb00 0a06 	add.w	sl, r0, r6
1a0029e6:	45d4      	cmp	ip, sl
1a0029e8:	f73f af4f 	bgt.w	1a00288a <_realloc_r+0x82>
1a0029ec:	465f      	mov	r7, fp
1a0029ee:	f8db 100c 	ldr.w	r1, [fp, #12]
1a0029f2:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a0029f6:	1f32      	subs	r2, r6, #4
1a0029f8:	2a24      	cmp	r2, #36	; 0x24
1a0029fa:	60c1      	str	r1, [r0, #12]
1a0029fc:	6088      	str	r0, [r1, #8]
1a0029fe:	f200 8099 	bhi.w	1a002b34 <_realloc_r+0x32c>
1a002a02:	2a13      	cmp	r2, #19
1a002a04:	6829      	ldr	r1, [r5, #0]
1a002a06:	f240 8093 	bls.w	1a002b30 <_realloc_r+0x328>
1a002a0a:	f8cb 1008 	str.w	r1, [fp, #8]
1a002a0e:	6869      	ldr	r1, [r5, #4]
1a002a10:	f8cb 100c 	str.w	r1, [fp, #12]
1a002a14:	2a1b      	cmp	r2, #27
1a002a16:	68a9      	ldr	r1, [r5, #8]
1a002a18:	f200 8092 	bhi.w	1a002b40 <_realloc_r+0x338>
1a002a1c:	f10b 0210 	add.w	r2, fp, #16
1a002a20:	3508      	adds	r5, #8
1a002a22:	6011      	str	r1, [r2, #0]
1a002a24:	6869      	ldr	r1, [r5, #4]
1a002a26:	6051      	str	r1, [r2, #4]
1a002a28:	68a9      	ldr	r1, [r5, #8]
1a002a2a:	6091      	str	r1, [r2, #8]
1a002a2c:	eb0b 0104 	add.w	r1, fp, r4
1a002a30:	ebaa 0204 	sub.w	r2, sl, r4
1a002a34:	f042 0201 	orr.w	r2, r2, #1
1a002a38:	6099      	str	r1, [r3, #8]
1a002a3a:	604a      	str	r2, [r1, #4]
1a002a3c:	f8db 3004 	ldr.w	r3, [fp, #4]
1a002a40:	f003 0301 	and.w	r3, r3, #1
1a002a44:	431c      	orrs	r4, r3
1a002a46:	4648      	mov	r0, r9
1a002a48:	f8cb 4004 	str.w	r4, [fp, #4]
1a002a4c:	f7ff fed6 	bl	1a0027fc <__malloc_unlock>
1a002a50:	e750      	b.n	1a0028f4 <_realloc_r+0xec>
1a002a52:	6001      	str	r1, [r0, #0]
1a002a54:	686b      	ldr	r3, [r5, #4]
1a002a56:	6043      	str	r3, [r0, #4]
1a002a58:	2a1b      	cmp	r2, #27
1a002a5a:	d83c      	bhi.n	1a002ad6 <_realloc_r+0x2ce>
1a002a5c:	f105 0208 	add.w	r2, r5, #8
1a002a60:	f100 0308 	add.w	r3, r0, #8
1a002a64:	68a9      	ldr	r1, [r5, #8]
1a002a66:	e72d      	b.n	1a0028c4 <_realloc_r+0xbc>
1a002a68:	eb08 0004 	add.w	r0, r8, r4
1a002a6c:	1b0a      	subs	r2, r1, r4
1a002a6e:	f042 0201 	orr.w	r2, r2, #1
1a002a72:	6098      	str	r0, [r3, #8]
1a002a74:	6042      	str	r2, [r0, #4]
1a002a76:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a002a7a:	f003 0301 	and.w	r3, r3, #1
1a002a7e:	431c      	orrs	r4, r3
1a002a80:	4648      	mov	r0, r9
1a002a82:	f845 4c04 	str.w	r4, [r5, #-4]
1a002a86:	f7ff feb9 	bl	1a0027fc <__malloc_unlock>
1a002a8a:	462f      	mov	r7, r5
1a002a8c:	e732      	b.n	1a0028f4 <_realloc_r+0xec>
1a002a8e:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a002a92:	461e      	mov	r6, r3
1a002a94:	60ca      	str	r2, [r1, #12]
1a002a96:	eb08 0a03 	add.w	sl, r8, r3
1a002a9a:	6091      	str	r1, [r2, #8]
1a002a9c:	e752      	b.n	1a002944 <_realloc_r+0x13c>
1a002a9e:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a002aa2:	f023 0303 	bic.w	r3, r3, #3
1a002aa6:	441e      	add	r6, r3
1a002aa8:	eb08 0a06 	add.w	sl, r8, r6
1a002aac:	e74a      	b.n	1a002944 <_realloc_r+0x13c>
1a002aae:	4629      	mov	r1, r5
1a002ab0:	f7ff fe36 	bl	1a002720 <memmove>
1a002ab4:	e70b      	b.n	1a0028ce <_realloc_r+0xc6>
1a002ab6:	e9da 1202 	ldrd	r1, r2, [sl, #8]
1a002aba:	465f      	mov	r7, fp
1a002abc:	60ca      	str	r2, [r1, #12]
1a002abe:	6091      	str	r1, [r2, #8]
1a002ac0:	e71c      	b.n	1a0028fc <_realloc_r+0xf4>
1a002ac2:	463a      	mov	r2, r7
1a002ac4:	e736      	b.n	1a002934 <_realloc_r+0x12c>
1a002ac6:	4629      	mov	r1, r5
1a002ac8:	4638      	mov	r0, r7
1a002aca:	461e      	mov	r6, r3
1a002acc:	46d8      	mov	r8, fp
1a002ace:	f7ff fe27 	bl	1a002720 <memmove>
1a002ad2:	463d      	mov	r5, r7
1a002ad4:	e736      	b.n	1a002944 <_realloc_r+0x13c>
1a002ad6:	68ab      	ldr	r3, [r5, #8]
1a002ad8:	6083      	str	r3, [r0, #8]
1a002ada:	68eb      	ldr	r3, [r5, #12]
1a002adc:	60c3      	str	r3, [r0, #12]
1a002ade:	2a24      	cmp	r2, #36	; 0x24
1a002ae0:	d011      	beq.n	1a002b06 <_realloc_r+0x2fe>
1a002ae2:	f105 0210 	add.w	r2, r5, #16
1a002ae6:	f100 0310 	add.w	r3, r0, #16
1a002aea:	6929      	ldr	r1, [r5, #16]
1a002aec:	e6ea      	b.n	1a0028c4 <_realloc_r+0xbc>
1a002aee:	f8cb 1010 	str.w	r1, [fp, #16]
1a002af2:	68e9      	ldr	r1, [r5, #12]
1a002af4:	f8cb 1014 	str.w	r1, [fp, #20]
1a002af8:	2a24      	cmp	r2, #36	; 0x24
1a002afa:	d00e      	beq.n	1a002b1a <_realloc_r+0x312>
1a002afc:	6929      	ldr	r1, [r5, #16]
1a002afe:	f10b 0218 	add.w	r2, fp, #24
1a002b02:	3510      	adds	r5, #16
1a002b04:	e716      	b.n	1a002934 <_realloc_r+0x12c>
1a002b06:	692b      	ldr	r3, [r5, #16]
1a002b08:	6103      	str	r3, [r0, #16]
1a002b0a:	696b      	ldr	r3, [r5, #20]
1a002b0c:	6143      	str	r3, [r0, #20]
1a002b0e:	69a9      	ldr	r1, [r5, #24]
1a002b10:	f105 0218 	add.w	r2, r5, #24
1a002b14:	f100 0318 	add.w	r3, r0, #24
1a002b18:	e6d4      	b.n	1a0028c4 <_realloc_r+0xbc>
1a002b1a:	692a      	ldr	r2, [r5, #16]
1a002b1c:	f8cb 2018 	str.w	r2, [fp, #24]
1a002b20:	696a      	ldr	r2, [r5, #20]
1a002b22:	f8cb 201c 	str.w	r2, [fp, #28]
1a002b26:	69a9      	ldr	r1, [r5, #24]
1a002b28:	f10b 0220 	add.w	r2, fp, #32
1a002b2c:	3518      	adds	r5, #24
1a002b2e:	e701      	b.n	1a002934 <_realloc_r+0x12c>
1a002b30:	463a      	mov	r2, r7
1a002b32:	e776      	b.n	1a002a22 <_realloc_r+0x21a>
1a002b34:	4629      	mov	r1, r5
1a002b36:	4638      	mov	r0, r7
1a002b38:	f7ff fdf2 	bl	1a002720 <memmove>
1a002b3c:	4b0c      	ldr	r3, [pc, #48]	; (1a002b70 <_realloc_r+0x368>)
1a002b3e:	e775      	b.n	1a002a2c <_realloc_r+0x224>
1a002b40:	f8cb 1010 	str.w	r1, [fp, #16]
1a002b44:	68e9      	ldr	r1, [r5, #12]
1a002b46:	f8cb 1014 	str.w	r1, [fp, #20]
1a002b4a:	2a24      	cmp	r2, #36	; 0x24
1a002b4c:	d004      	beq.n	1a002b58 <_realloc_r+0x350>
1a002b4e:	6929      	ldr	r1, [r5, #16]
1a002b50:	f10b 0218 	add.w	r2, fp, #24
1a002b54:	3510      	adds	r5, #16
1a002b56:	e764      	b.n	1a002a22 <_realloc_r+0x21a>
1a002b58:	692a      	ldr	r2, [r5, #16]
1a002b5a:	f8cb 2018 	str.w	r2, [fp, #24]
1a002b5e:	696a      	ldr	r2, [r5, #20]
1a002b60:	f8cb 201c 	str.w	r2, [fp, #28]
1a002b64:	69a9      	ldr	r1, [r5, #24]
1a002b66:	f10b 0220 	add.w	r2, fp, #32
1a002b6a:	3518      	adds	r5, #24
1a002b6c:	e759      	b.n	1a002a22 <_realloc_r+0x21a>
1a002b6e:	bf00      	nop
1a002b70:	10000478 	.word	0x10000478

1a002b74 <__sread>:
1a002b74:	b510      	push	{r4, lr}
1a002b76:	460c      	mov	r4, r1
1a002b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002b7c:	f7fd fc34 	bl	1a0003e8 <_read_r>
1a002b80:	2800      	cmp	r0, #0
1a002b82:	db03      	blt.n	1a002b8c <__sread+0x18>
1a002b84:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a002b86:	4403      	add	r3, r0
1a002b88:	6523      	str	r3, [r4, #80]	; 0x50
1a002b8a:	bd10      	pop	{r4, pc}
1a002b8c:	89a3      	ldrh	r3, [r4, #12]
1a002b8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a002b92:	81a3      	strh	r3, [r4, #12]
1a002b94:	bd10      	pop	{r4, pc}
1a002b96:	bf00      	nop

1a002b98 <__swrite>:
1a002b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002b9c:	4616      	mov	r6, r2
1a002b9e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a002ba2:	461f      	mov	r7, r3
1a002ba4:	05d3      	lsls	r3, r2, #23
1a002ba6:	460c      	mov	r4, r1
1a002ba8:	4605      	mov	r5, r0
1a002baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002bae:	d409      	bmi.n	1a002bc4 <__swrite+0x2c>
1a002bb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a002bb4:	81a2      	strh	r2, [r4, #12]
1a002bb6:	463b      	mov	r3, r7
1a002bb8:	4632      	mov	r2, r6
1a002bba:	4628      	mov	r0, r5
1a002bbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a002bc0:	f7fd bc39 	b.w	1a000436 <_write_r>
1a002bc4:	2200      	movs	r2, #0
1a002bc6:	2302      	movs	r3, #2
1a002bc8:	f7fd fc09 	bl	1a0003de <_lseek_r>
1a002bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a002bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a002bd4:	e7ec      	b.n	1a002bb0 <__swrite+0x18>
1a002bd6:	bf00      	nop

1a002bd8 <__sseek>:
1a002bd8:	b510      	push	{r4, lr}
1a002bda:	460c      	mov	r4, r1
1a002bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002be0:	f7fd fbfd 	bl	1a0003de <_lseek_r>
1a002be4:	89a3      	ldrh	r3, [r4, #12]
1a002be6:	1c42      	adds	r2, r0, #1
1a002be8:	bf0e      	itee	eq
1a002bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a002bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a002bf2:	6520      	strne	r0, [r4, #80]	; 0x50
1a002bf4:	81a3      	strh	r3, [r4, #12]
1a002bf6:	bd10      	pop	{r4, pc}

1a002bf8 <__sclose>:
1a002bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002bfc:	f7fd bbdc 	b.w	1a0003b8 <_close_r>

1a002c00 <__swsetup_r>:
1a002c00:	b538      	push	{r3, r4, r5, lr}
1a002c02:	4b32      	ldr	r3, [pc, #200]	; (1a002ccc <__swsetup_r+0xcc>)
1a002c04:	681b      	ldr	r3, [r3, #0]
1a002c06:	4605      	mov	r5, r0
1a002c08:	460c      	mov	r4, r1
1a002c0a:	b10b      	cbz	r3, 1a002c10 <__swsetup_r+0x10>
1a002c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a002c0e:	b312      	cbz	r2, 1a002c56 <__swsetup_r+0x56>
1a002c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a002c14:	b293      	uxth	r3, r2
1a002c16:	0718      	lsls	r0, r3, #28
1a002c18:	d525      	bpl.n	1a002c66 <__swsetup_r+0x66>
1a002c1a:	6920      	ldr	r0, [r4, #16]
1a002c1c:	2800      	cmp	r0, #0
1a002c1e:	d02d      	beq.n	1a002c7c <__swsetup_r+0x7c>
1a002c20:	f013 0201 	ands.w	r2, r3, #1
1a002c24:	d007      	beq.n	1a002c36 <__swsetup_r+0x36>
1a002c26:	6963      	ldr	r3, [r4, #20]
1a002c28:	2200      	movs	r2, #0
1a002c2a:	425b      	negs	r3, r3
1a002c2c:	61a3      	str	r3, [r4, #24]
1a002c2e:	60a2      	str	r2, [r4, #8]
1a002c30:	b138      	cbz	r0, 1a002c42 <__swsetup_r+0x42>
1a002c32:	2000      	movs	r0, #0
1a002c34:	bd38      	pop	{r3, r4, r5, pc}
1a002c36:	0799      	lsls	r1, r3, #30
1a002c38:	bf58      	it	pl
1a002c3a:	6962      	ldrpl	r2, [r4, #20]
1a002c3c:	60a2      	str	r2, [r4, #8]
1a002c3e:	2800      	cmp	r0, #0
1a002c40:	d1f7      	bne.n	1a002c32 <__swsetup_r+0x32>
1a002c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002c46:	061a      	lsls	r2, r3, #24
1a002c48:	d5f4      	bpl.n	1a002c34 <__swsetup_r+0x34>
1a002c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002c4e:	81a3      	strh	r3, [r4, #12]
1a002c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002c54:	bd38      	pop	{r3, r4, r5, pc}
1a002c56:	4618      	mov	r0, r3
1a002c58:	f7ff f86e 	bl	1a001d38 <__sinit>
1a002c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a002c60:	b293      	uxth	r3, r2
1a002c62:	0718      	lsls	r0, r3, #28
1a002c64:	d4d9      	bmi.n	1a002c1a <__swsetup_r+0x1a>
1a002c66:	06d9      	lsls	r1, r3, #27
1a002c68:	d528      	bpl.n	1a002cbc <__swsetup_r+0xbc>
1a002c6a:	0758      	lsls	r0, r3, #29
1a002c6c:	d412      	bmi.n	1a002c94 <__swsetup_r+0x94>
1a002c6e:	6920      	ldr	r0, [r4, #16]
1a002c70:	f042 0308 	orr.w	r3, r2, #8
1a002c74:	81a3      	strh	r3, [r4, #12]
1a002c76:	b29b      	uxth	r3, r3
1a002c78:	2800      	cmp	r0, #0
1a002c7a:	d1d1      	bne.n	1a002c20 <__swsetup_r+0x20>
1a002c7c:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a002c80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a002c84:	d0cc      	beq.n	1a002c20 <__swsetup_r+0x20>
1a002c86:	4628      	mov	r0, r5
1a002c88:	4621      	mov	r1, r4
1a002c8a:	f000 fad1 	bl	1a003230 <__smakebuf_r>
1a002c8e:	89a3      	ldrh	r3, [r4, #12]
1a002c90:	6920      	ldr	r0, [r4, #16]
1a002c92:	e7c5      	b.n	1a002c20 <__swsetup_r+0x20>
1a002c94:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a002c96:	b151      	cbz	r1, 1a002cae <__swsetup_r+0xae>
1a002c98:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a002c9c:	4299      	cmp	r1, r3
1a002c9e:	d004      	beq.n	1a002caa <__swsetup_r+0xaa>
1a002ca0:	4628      	mov	r0, r5
1a002ca2:	f000 f9a1 	bl	1a002fe8 <_free_r>
1a002ca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a002caa:	2300      	movs	r3, #0
1a002cac:	6323      	str	r3, [r4, #48]	; 0x30
1a002cae:	2300      	movs	r3, #0
1a002cb0:	6920      	ldr	r0, [r4, #16]
1a002cb2:	6063      	str	r3, [r4, #4]
1a002cb4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a002cb8:	6020      	str	r0, [r4, #0]
1a002cba:	e7d9      	b.n	1a002c70 <__swsetup_r+0x70>
1a002cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a002cc0:	2309      	movs	r3, #9
1a002cc2:	602b      	str	r3, [r5, #0]
1a002cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002cc8:	81a2      	strh	r2, [r4, #12]
1a002cca:	bd38      	pop	{r3, r4, r5, pc}
1a002ccc:	10000048 	.word	0x10000048

1a002cd0 <_fclose_r>:
1a002cd0:	b570      	push	{r4, r5, r6, lr}
1a002cd2:	2900      	cmp	r1, #0
1a002cd4:	d04a      	beq.n	1a002d6c <_fclose_r+0x9c>
1a002cd6:	4605      	mov	r5, r0
1a002cd8:	460c      	mov	r4, r1
1a002cda:	b110      	cbz	r0, 1a002ce2 <_fclose_r+0x12>
1a002cdc:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a002cde:	2b00      	cmp	r3, #0
1a002ce0:	d047      	beq.n	1a002d72 <_fclose_r+0xa2>
1a002ce2:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002ce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a002ce8:	07d8      	lsls	r0, r3, #31
1a002cea:	d532      	bpl.n	1a002d52 <_fclose_r+0x82>
1a002cec:	2a00      	cmp	r2, #0
1a002cee:	d03d      	beq.n	1a002d6c <_fclose_r+0x9c>
1a002cf0:	4621      	mov	r1, r4
1a002cf2:	4628      	mov	r0, r5
1a002cf4:	f000 f854 	bl	1a002da0 <__sflush_r>
1a002cf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002cfa:	4606      	mov	r6, r0
1a002cfc:	b133      	cbz	r3, 1a002d0c <_fclose_r+0x3c>
1a002cfe:	69e1      	ldr	r1, [r4, #28]
1a002d00:	4628      	mov	r0, r5
1a002d02:	4798      	blx	r3
1a002d04:	2800      	cmp	r0, #0
1a002d06:	bfb8      	it	lt
1a002d08:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a002d0c:	89a3      	ldrh	r3, [r4, #12]
1a002d0e:	061a      	lsls	r2, r3, #24
1a002d10:	d43c      	bmi.n	1a002d8c <_fclose_r+0xbc>
1a002d12:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a002d14:	b141      	cbz	r1, 1a002d28 <_fclose_r+0x58>
1a002d16:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a002d1a:	4299      	cmp	r1, r3
1a002d1c:	d002      	beq.n	1a002d24 <_fclose_r+0x54>
1a002d1e:	4628      	mov	r0, r5
1a002d20:	f000 f962 	bl	1a002fe8 <_free_r>
1a002d24:	2300      	movs	r3, #0
1a002d26:	6323      	str	r3, [r4, #48]	; 0x30
1a002d28:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a002d2a:	b121      	cbz	r1, 1a002d36 <_fclose_r+0x66>
1a002d2c:	4628      	mov	r0, r5
1a002d2e:	f000 f95b 	bl	1a002fe8 <_free_r>
1a002d32:	2300      	movs	r3, #0
1a002d34:	6463      	str	r3, [r4, #68]	; 0x44
1a002d36:	f7ff f829 	bl	1a001d8c <__sfp_lock_acquire>
1a002d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002d3c:	2200      	movs	r2, #0
1a002d3e:	07db      	lsls	r3, r3, #31
1a002d40:	81a2      	strh	r2, [r4, #12]
1a002d42:	d528      	bpl.n	1a002d96 <_fclose_r+0xc6>
1a002d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002d46:	f7ff f9dd 	bl	1a002104 <__retarget_lock_close_recursive>
1a002d4a:	f7ff f825 	bl	1a001d98 <__sfp_lock_release>
1a002d4e:	4630      	mov	r0, r6
1a002d50:	bd70      	pop	{r4, r5, r6, pc}
1a002d52:	0591      	lsls	r1, r2, #22
1a002d54:	d4cc      	bmi.n	1a002cf0 <_fclose_r+0x20>
1a002d56:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002d58:	f7ff f9d6 	bl	1a002108 <__retarget_lock_acquire_recursive>
1a002d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002d60:	2b00      	cmp	r3, #0
1a002d62:	d1c5      	bne.n	1a002cf0 <_fclose_r+0x20>
1a002d64:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a002d66:	f016 0601 	ands.w	r6, r6, #1
1a002d6a:	d00a      	beq.n	1a002d82 <_fclose_r+0xb2>
1a002d6c:	2600      	movs	r6, #0
1a002d6e:	4630      	mov	r0, r6
1a002d70:	bd70      	pop	{r4, r5, r6, pc}
1a002d72:	f7fe ffe1 	bl	1a001d38 <__sinit>
1a002d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a002d7c:	07d8      	lsls	r0, r3, #31
1a002d7e:	d4b5      	bmi.n	1a002cec <_fclose_r+0x1c>
1a002d80:	e7e7      	b.n	1a002d52 <_fclose_r+0x82>
1a002d82:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002d84:	f7ff f9c2 	bl	1a00210c <__retarget_lock_release_recursive>
1a002d88:	4630      	mov	r0, r6
1a002d8a:	bd70      	pop	{r4, r5, r6, pc}
1a002d8c:	6921      	ldr	r1, [r4, #16]
1a002d8e:	4628      	mov	r0, r5
1a002d90:	f000 f92a 	bl	1a002fe8 <_free_r>
1a002d94:	e7bd      	b.n	1a002d12 <_fclose_r+0x42>
1a002d96:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002d98:	f7ff f9b8 	bl	1a00210c <__retarget_lock_release_recursive>
1a002d9c:	e7d2      	b.n	1a002d44 <_fclose_r+0x74>
1a002d9e:	bf00      	nop

1a002da0 <__sflush_r>:
1a002da0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a002da4:	b29a      	uxth	r2, r3
1a002da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002daa:	460c      	mov	r4, r1
1a002dac:	0711      	lsls	r1, r2, #28
1a002dae:	4680      	mov	r8, r0
1a002db0:	d448      	bmi.n	1a002e44 <__sflush_r+0xa4>
1a002db2:	6862      	ldr	r2, [r4, #4]
1a002db4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002db8:	2a00      	cmp	r2, #0
1a002dba:	81a3      	strh	r3, [r4, #12]
1a002dbc:	dd5d      	ble.n	1a002e7a <__sflush_r+0xda>
1a002dbe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a002dc0:	2d00      	cmp	r5, #0
1a002dc2:	d057      	beq.n	1a002e74 <__sflush_r+0xd4>
1a002dc4:	2200      	movs	r2, #0
1a002dc6:	b29b      	uxth	r3, r3
1a002dc8:	f8d8 6000 	ldr.w	r6, [r8]
1a002dcc:	69e1      	ldr	r1, [r4, #28]
1a002dce:	f8c8 2000 	str.w	r2, [r8]
1a002dd2:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a002dd6:	d154      	bne.n	1a002e82 <__sflush_r+0xe2>
1a002dd8:	2301      	movs	r3, #1
1a002dda:	4640      	mov	r0, r8
1a002ddc:	47a8      	blx	r5
1a002dde:	1c43      	adds	r3, r0, #1
1a002de0:	4602      	mov	r2, r0
1a002de2:	d065      	beq.n	1a002eb0 <__sflush_r+0x110>
1a002de4:	89a3      	ldrh	r3, [r4, #12]
1a002de6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a002de8:	69e1      	ldr	r1, [r4, #28]
1a002dea:	075f      	lsls	r7, r3, #29
1a002dec:	d505      	bpl.n	1a002dfa <__sflush_r+0x5a>
1a002dee:	6860      	ldr	r0, [r4, #4]
1a002df0:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a002df2:	1a12      	subs	r2, r2, r0
1a002df4:	b10b      	cbz	r3, 1a002dfa <__sflush_r+0x5a>
1a002df6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a002df8:	1ad2      	subs	r2, r2, r3
1a002dfa:	2300      	movs	r3, #0
1a002dfc:	4640      	mov	r0, r8
1a002dfe:	47a8      	blx	r5
1a002e00:	1c45      	adds	r5, r0, #1
1a002e02:	d148      	bne.n	1a002e96 <__sflush_r+0xf6>
1a002e04:	f8d8 2000 	ldr.w	r2, [r8]
1a002e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002e0c:	2a00      	cmp	r2, #0
1a002e0e:	d05c      	beq.n	1a002eca <__sflush_r+0x12a>
1a002e10:	2a1d      	cmp	r2, #29
1a002e12:	d001      	beq.n	1a002e18 <__sflush_r+0x78>
1a002e14:	2a16      	cmp	r2, #22
1a002e16:	d164      	bne.n	1a002ee2 <__sflush_r+0x142>
1a002e18:	6922      	ldr	r2, [r4, #16]
1a002e1a:	2100      	movs	r1, #0
1a002e1c:	e9c4 2100 	strd	r2, r1, [r4]
1a002e20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a002e24:	81a3      	strh	r3, [r4, #12]
1a002e26:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a002e28:	f8c8 6000 	str.w	r6, [r8]
1a002e2c:	b311      	cbz	r1, 1a002e74 <__sflush_r+0xd4>
1a002e2e:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a002e32:	4299      	cmp	r1, r3
1a002e34:	d002      	beq.n	1a002e3c <__sflush_r+0x9c>
1a002e36:	4640      	mov	r0, r8
1a002e38:	f000 f8d6 	bl	1a002fe8 <_free_r>
1a002e3c:	2000      	movs	r0, #0
1a002e3e:	6320      	str	r0, [r4, #48]	; 0x30
1a002e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002e44:	6926      	ldr	r6, [r4, #16]
1a002e46:	b1ae      	cbz	r6, 1a002e74 <__sflush_r+0xd4>
1a002e48:	6825      	ldr	r5, [r4, #0]
1a002e4a:	6026      	str	r6, [r4, #0]
1a002e4c:	0791      	lsls	r1, r2, #30
1a002e4e:	bf0c      	ite	eq
1a002e50:	6963      	ldreq	r3, [r4, #20]
1a002e52:	2300      	movne	r3, #0
1a002e54:	1bad      	subs	r5, r5, r6
1a002e56:	60a3      	str	r3, [r4, #8]
1a002e58:	e00a      	b.n	1a002e70 <__sflush_r+0xd0>
1a002e5a:	462b      	mov	r3, r5
1a002e5c:	4632      	mov	r2, r6
1a002e5e:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a002e60:	69e1      	ldr	r1, [r4, #28]
1a002e62:	4640      	mov	r0, r8
1a002e64:	47b8      	blx	r7
1a002e66:	2800      	cmp	r0, #0
1a002e68:	eba5 0500 	sub.w	r5, r5, r0
1a002e6c:	4406      	add	r6, r0
1a002e6e:	dd0a      	ble.n	1a002e86 <__sflush_r+0xe6>
1a002e70:	2d00      	cmp	r5, #0
1a002e72:	dcf2      	bgt.n	1a002e5a <__sflush_r+0xba>
1a002e74:	2000      	movs	r0, #0
1a002e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002e7a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a002e7c:	2a00      	cmp	r2, #0
1a002e7e:	dc9e      	bgt.n	1a002dbe <__sflush_r+0x1e>
1a002e80:	e7f8      	b.n	1a002e74 <__sflush_r+0xd4>
1a002e82:	6d22      	ldr	r2, [r4, #80]	; 0x50
1a002e84:	e7b1      	b.n	1a002dea <__sflush_r+0x4a>
1a002e86:	89a3      	ldrh	r3, [r4, #12]
1a002e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002e8c:	81a3      	strh	r3, [r4, #12]
1a002e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002e9a:	6922      	ldr	r2, [r4, #16]
1a002e9c:	6022      	str	r2, [r4, #0]
1a002e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a002ea2:	2200      	movs	r2, #0
1a002ea4:	6062      	str	r2, [r4, #4]
1a002ea6:	04da      	lsls	r2, r3, #19
1a002ea8:	81a3      	strh	r3, [r4, #12]
1a002eaa:	d5bc      	bpl.n	1a002e26 <__sflush_r+0x86>
1a002eac:	6520      	str	r0, [r4, #80]	; 0x50
1a002eae:	e7ba      	b.n	1a002e26 <__sflush_r+0x86>
1a002eb0:	f8d8 3000 	ldr.w	r3, [r8]
1a002eb4:	2b00      	cmp	r3, #0
1a002eb6:	d095      	beq.n	1a002de4 <__sflush_r+0x44>
1a002eb8:	2b1d      	cmp	r3, #29
1a002eba:	d00f      	beq.n	1a002edc <__sflush_r+0x13c>
1a002ebc:	2b16      	cmp	r3, #22
1a002ebe:	d00d      	beq.n	1a002edc <__sflush_r+0x13c>
1a002ec0:	89a3      	ldrh	r3, [r4, #12]
1a002ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002ec6:	81a3      	strh	r3, [r4, #12]
1a002ec8:	e7d5      	b.n	1a002e76 <__sflush_r+0xd6>
1a002eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a002ece:	6921      	ldr	r1, [r4, #16]
1a002ed0:	81a3      	strh	r3, [r4, #12]
1a002ed2:	04db      	lsls	r3, r3, #19
1a002ed4:	e9c4 1200 	strd	r1, r2, [r4]
1a002ed8:	d5a5      	bpl.n	1a002e26 <__sflush_r+0x86>
1a002eda:	e7e7      	b.n	1a002eac <__sflush_r+0x10c>
1a002edc:	f8c8 6000 	str.w	r6, [r8]
1a002ee0:	e7c8      	b.n	1a002e74 <__sflush_r+0xd4>
1a002ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002ee6:	81a3      	strh	r3, [r4, #12]
1a002ee8:	e7c5      	b.n	1a002e76 <__sflush_r+0xd6>
1a002eea:	bf00      	nop

1a002eec <_fflush_r>:
1a002eec:	b538      	push	{r3, r4, r5, lr}
1a002eee:	460d      	mov	r5, r1
1a002ef0:	4604      	mov	r4, r0
1a002ef2:	b108      	cbz	r0, 1a002ef8 <_fflush_r+0xc>
1a002ef4:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a002ef6:	b1a3      	cbz	r3, 1a002f22 <_fflush_r+0x36>
1a002ef8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a002efc:	b1b8      	cbz	r0, 1a002f2e <_fflush_r+0x42>
1a002efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a002f00:	07db      	lsls	r3, r3, #31
1a002f02:	d401      	bmi.n	1a002f08 <_fflush_r+0x1c>
1a002f04:	0581      	lsls	r1, r0, #22
1a002f06:	d515      	bpl.n	1a002f34 <_fflush_r+0x48>
1a002f08:	4620      	mov	r0, r4
1a002f0a:	4629      	mov	r1, r5
1a002f0c:	f7ff ff48 	bl	1a002da0 <__sflush_r>
1a002f10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a002f12:	07da      	lsls	r2, r3, #31
1a002f14:	4604      	mov	r4, r0
1a002f16:	d402      	bmi.n	1a002f1e <_fflush_r+0x32>
1a002f18:	89ab      	ldrh	r3, [r5, #12]
1a002f1a:	059b      	lsls	r3, r3, #22
1a002f1c:	d50e      	bpl.n	1a002f3c <_fflush_r+0x50>
1a002f1e:	4620      	mov	r0, r4
1a002f20:	bd38      	pop	{r3, r4, r5, pc}
1a002f22:	f7fe ff09 	bl	1a001d38 <__sinit>
1a002f26:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a002f2a:	2800      	cmp	r0, #0
1a002f2c:	d1e7      	bne.n	1a002efe <_fflush_r+0x12>
1a002f2e:	4604      	mov	r4, r0
1a002f30:	4620      	mov	r0, r4
1a002f32:	bd38      	pop	{r3, r4, r5, pc}
1a002f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a002f36:	f7ff f8e7 	bl	1a002108 <__retarget_lock_acquire_recursive>
1a002f3a:	e7e5      	b.n	1a002f08 <_fflush_r+0x1c>
1a002f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a002f3e:	f7ff f8e5 	bl	1a00210c <__retarget_lock_release_recursive>
1a002f42:	4620      	mov	r0, r4
1a002f44:	bd38      	pop	{r3, r4, r5, pc}
1a002f46:	bf00      	nop

1a002f48 <_malloc_trim_r>:
1a002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002f4a:	4f24      	ldr	r7, [pc, #144]	; (1a002fdc <_malloc_trim_r+0x94>)
1a002f4c:	460c      	mov	r4, r1
1a002f4e:	4606      	mov	r6, r0
1a002f50:	f7ff fc4e 	bl	1a0027f0 <__malloc_lock>
1a002f54:	68bb      	ldr	r3, [r7, #8]
1a002f56:	685d      	ldr	r5, [r3, #4]
1a002f58:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a002f5c:	310f      	adds	r1, #15
1a002f5e:	f025 0503 	bic.w	r5, r5, #3
1a002f62:	4429      	add	r1, r5
1a002f64:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a002f68:	f021 010f 	bic.w	r1, r1, #15
1a002f6c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a002f70:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a002f74:	db07      	blt.n	1a002f86 <_malloc_trim_r+0x3e>
1a002f76:	2100      	movs	r1, #0
1a002f78:	4630      	mov	r0, r6
1a002f7a:	f7fd fa71 	bl	1a000460 <_sbrk_r>
1a002f7e:	68bb      	ldr	r3, [r7, #8]
1a002f80:	442b      	add	r3, r5
1a002f82:	4298      	cmp	r0, r3
1a002f84:	d004      	beq.n	1a002f90 <_malloc_trim_r+0x48>
1a002f86:	4630      	mov	r0, r6
1a002f88:	f7ff fc38 	bl	1a0027fc <__malloc_unlock>
1a002f8c:	2000      	movs	r0, #0
1a002f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002f90:	4261      	negs	r1, r4
1a002f92:	4630      	mov	r0, r6
1a002f94:	f7fd fa64 	bl	1a000460 <_sbrk_r>
1a002f98:	3001      	adds	r0, #1
1a002f9a:	d00d      	beq.n	1a002fb8 <_malloc_trim_r+0x70>
1a002f9c:	4b10      	ldr	r3, [pc, #64]	; (1a002fe0 <_malloc_trim_r+0x98>)
1a002f9e:	68ba      	ldr	r2, [r7, #8]
1a002fa0:	6819      	ldr	r1, [r3, #0]
1a002fa2:	1b2d      	subs	r5, r5, r4
1a002fa4:	f045 0501 	orr.w	r5, r5, #1
1a002fa8:	4630      	mov	r0, r6
1a002faa:	1b09      	subs	r1, r1, r4
1a002fac:	6055      	str	r5, [r2, #4]
1a002fae:	6019      	str	r1, [r3, #0]
1a002fb0:	f7ff fc24 	bl	1a0027fc <__malloc_unlock>
1a002fb4:	2001      	movs	r0, #1
1a002fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002fb8:	2100      	movs	r1, #0
1a002fba:	4630      	mov	r0, r6
1a002fbc:	f7fd fa50 	bl	1a000460 <_sbrk_r>
1a002fc0:	68ba      	ldr	r2, [r7, #8]
1a002fc2:	1a83      	subs	r3, r0, r2
1a002fc4:	2b0f      	cmp	r3, #15
1a002fc6:	ddde      	ble.n	1a002f86 <_malloc_trim_r+0x3e>
1a002fc8:	4c06      	ldr	r4, [pc, #24]	; (1a002fe4 <_malloc_trim_r+0x9c>)
1a002fca:	4905      	ldr	r1, [pc, #20]	; (1a002fe0 <_malloc_trim_r+0x98>)
1a002fcc:	6824      	ldr	r4, [r4, #0]
1a002fce:	f043 0301 	orr.w	r3, r3, #1
1a002fd2:	1b00      	subs	r0, r0, r4
1a002fd4:	6053      	str	r3, [r2, #4]
1a002fd6:	6008      	str	r0, [r1, #0]
1a002fd8:	e7d5      	b.n	1a002f86 <_malloc_trim_r+0x3e>
1a002fda:	bf00      	nop
1a002fdc:	10000478 	.word	0x10000478
1a002fe0:	100008a8 	.word	0x100008a8
1a002fe4:	10000880 	.word	0x10000880

1a002fe8 <_free_r>:
1a002fe8:	2900      	cmp	r1, #0
1a002fea:	d05d      	beq.n	1a0030a8 <_free_r+0xc0>
1a002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002fee:	460f      	mov	r7, r1
1a002ff0:	4606      	mov	r6, r0
1a002ff2:	f7ff fbfd 	bl	1a0027f0 <__malloc_lock>
1a002ff6:	f857 cc04 	ldr.w	ip, [r7, #-4]
1a002ffa:	4c73      	ldr	r4, [pc, #460]	; (1a0031c8 <_free_r+0x1e0>)
1a002ffc:	f02c 0301 	bic.w	r3, ip, #1
1a003000:	f1a7 0008 	sub.w	r0, r7, #8
1a003004:	18c2      	adds	r2, r0, r3
1a003006:	68a1      	ldr	r1, [r4, #8]
1a003008:	6855      	ldr	r5, [r2, #4]
1a00300a:	4291      	cmp	r1, r2
1a00300c:	f025 0503 	bic.w	r5, r5, #3
1a003010:	d07f      	beq.n	1a003112 <_free_r+0x12a>
1a003012:	f01c 0f01 	tst.w	ip, #1
1a003016:	6055      	str	r5, [r2, #4]
1a003018:	eb02 0105 	add.w	r1, r2, r5
1a00301c:	d133      	bne.n	1a003086 <_free_r+0x9e>
1a00301e:	f857 ec08 	ldr.w	lr, [r7, #-8]
1a003022:	6849      	ldr	r1, [r1, #4]
1a003024:	eba0 000e 	sub.w	r0, r0, lr
1a003028:	f104 0c08 	add.w	ip, r4, #8
1a00302c:	6887      	ldr	r7, [r0, #8]
1a00302e:	4567      	cmp	r7, ip
1a003030:	4473      	add	r3, lr
1a003032:	f001 0101 	and.w	r1, r1, #1
1a003036:	d060      	beq.n	1a0030fa <_free_r+0x112>
1a003038:	f8d0 e00c 	ldr.w	lr, [r0, #12]
1a00303c:	f8c7 e00c 	str.w	lr, [r7, #12]
1a003040:	f8ce 7008 	str.w	r7, [lr, #8]
1a003044:	2900      	cmp	r1, #0
1a003046:	f000 8089 	beq.w	1a00315c <_free_r+0x174>
1a00304a:	f043 0101 	orr.w	r1, r3, #1
1a00304e:	6041      	str	r1, [r0, #4]
1a003050:	6013      	str	r3, [r2, #0]
1a003052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003056:	d230      	bcs.n	1a0030ba <_free_r+0xd2>
1a003058:	08db      	lsrs	r3, r3, #3
1a00305a:	1c59      	adds	r1, r3, #1
1a00305c:	6865      	ldr	r5, [r4, #4]
1a00305e:	109a      	asrs	r2, r3, #2
1a003060:	2301      	movs	r3, #1
1a003062:	4093      	lsls	r3, r2
1a003064:	432b      	orrs	r3, r5
1a003066:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
1a00306a:	f854 5031 	ldr.w	r5, [r4, r1, lsl #3]
1a00306e:	6063      	str	r3, [r4, #4]
1a003070:	3a08      	subs	r2, #8
1a003072:	e9c0 5202 	strd	r5, r2, [r0, #8]
1a003076:	f844 0031 	str.w	r0, [r4, r1, lsl #3]
1a00307a:	60e8      	str	r0, [r5, #12]
1a00307c:	4630      	mov	r0, r6
1a00307e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a003082:	f7ff bbbb 	b.w	1a0027fc <__malloc_unlock>
1a003086:	6849      	ldr	r1, [r1, #4]
1a003088:	07c9      	lsls	r1, r1, #31
1a00308a:	d40e      	bmi.n	1a0030aa <_free_r+0xc2>
1a00308c:	442b      	add	r3, r5
1a00308e:	f104 0c08 	add.w	ip, r4, #8
1a003092:	6891      	ldr	r1, [r2, #8]
1a003094:	4561      	cmp	r1, ip
1a003096:	f043 0501 	orr.w	r5, r3, #1
1a00309a:	d067      	beq.n	1a00316c <_free_r+0x184>
1a00309c:	68d2      	ldr	r2, [r2, #12]
1a00309e:	60ca      	str	r2, [r1, #12]
1a0030a0:	6091      	str	r1, [r2, #8]
1a0030a2:	6045      	str	r5, [r0, #4]
1a0030a4:	50c3      	str	r3, [r0, r3]
1a0030a6:	e7d4      	b.n	1a003052 <_free_r+0x6a>
1a0030a8:	4770      	bx	lr
1a0030aa:	f043 0101 	orr.w	r1, r3, #1
1a0030ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0030b2:	f847 1c04 	str.w	r1, [r7, #-4]
1a0030b6:	6013      	str	r3, [r2, #0]
1a0030b8:	d3ce      	bcc.n	1a003058 <_free_r+0x70>
1a0030ba:	0a5a      	lsrs	r2, r3, #9
1a0030bc:	2a04      	cmp	r2, #4
1a0030be:	d842      	bhi.n	1a003146 <_free_r+0x15e>
1a0030c0:	099a      	lsrs	r2, r3, #6
1a0030c2:	f102 0739 	add.w	r7, r2, #57	; 0x39
1a0030c6:	00ff      	lsls	r7, r7, #3
1a0030c8:	f102 0138 	add.w	r1, r2, #56	; 0x38
1a0030cc:	19e5      	adds	r5, r4, r7
1a0030ce:	59e2      	ldr	r2, [r4, r7]
1a0030d0:	3d08      	subs	r5, #8
1a0030d2:	4295      	cmp	r5, r2
1a0030d4:	d051      	beq.n	1a00317a <_free_r+0x192>
1a0030d6:	6851      	ldr	r1, [r2, #4]
1a0030d8:	f021 0103 	bic.w	r1, r1, #3
1a0030dc:	4299      	cmp	r1, r3
1a0030de:	d902      	bls.n	1a0030e6 <_free_r+0xfe>
1a0030e0:	6892      	ldr	r2, [r2, #8]
1a0030e2:	4295      	cmp	r5, r2
1a0030e4:	d1f7      	bne.n	1a0030d6 <_free_r+0xee>
1a0030e6:	68d5      	ldr	r5, [r2, #12]
1a0030e8:	e9c0 2502 	strd	r2, r5, [r0, #8]
1a0030ec:	60a8      	str	r0, [r5, #8]
1a0030ee:	60d0      	str	r0, [r2, #12]
1a0030f0:	4630      	mov	r0, r6
1a0030f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0030f6:	f7ff bb81 	b.w	1a0027fc <__malloc_unlock>
1a0030fa:	2900      	cmp	r1, #0
1a0030fc:	d15e      	bne.n	1a0031bc <_free_r+0x1d4>
1a0030fe:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
1a003102:	442b      	add	r3, r5
1a003104:	f043 0401 	orr.w	r4, r3, #1
1a003108:	60ca      	str	r2, [r1, #12]
1a00310a:	6091      	str	r1, [r2, #8]
1a00310c:	6044      	str	r4, [r0, #4]
1a00310e:	50c3      	str	r3, [r0, r3]
1a003110:	e7b4      	b.n	1a00307c <_free_r+0x94>
1a003112:	f01c 0f01 	tst.w	ip, #1
1a003116:	442b      	add	r3, r5
1a003118:	d107      	bne.n	1a00312a <_free_r+0x142>
1a00311a:	f857 2c08 	ldr.w	r2, [r7, #-8]
1a00311e:	1a80      	subs	r0, r0, r2
1a003120:	4413      	add	r3, r2
1a003122:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
1a003126:	60ca      	str	r2, [r1, #12]
1a003128:	6091      	str	r1, [r2, #8]
1a00312a:	4a28      	ldr	r2, [pc, #160]	; (1a0031cc <_free_r+0x1e4>)
1a00312c:	6812      	ldr	r2, [r2, #0]
1a00312e:	f043 0101 	orr.w	r1, r3, #1
1a003132:	429a      	cmp	r2, r3
1a003134:	6041      	str	r1, [r0, #4]
1a003136:	60a0      	str	r0, [r4, #8]
1a003138:	d8a0      	bhi.n	1a00307c <_free_r+0x94>
1a00313a:	4b25      	ldr	r3, [pc, #148]	; (1a0031d0 <_free_r+0x1e8>)
1a00313c:	4630      	mov	r0, r6
1a00313e:	6819      	ldr	r1, [r3, #0]
1a003140:	f7ff ff02 	bl	1a002f48 <_malloc_trim_r>
1a003144:	e79a      	b.n	1a00307c <_free_r+0x94>
1a003146:	2a14      	cmp	r2, #20
1a003148:	d90a      	bls.n	1a003160 <_free_r+0x178>
1a00314a:	2a54      	cmp	r2, #84	; 0x54
1a00314c:	d81d      	bhi.n	1a00318a <_free_r+0x1a2>
1a00314e:	0b1a      	lsrs	r2, r3, #12
1a003150:	f102 076f 	add.w	r7, r2, #111	; 0x6f
1a003154:	00ff      	lsls	r7, r7, #3
1a003156:	f102 016e 	add.w	r1, r2, #110	; 0x6e
1a00315a:	e7b7      	b.n	1a0030cc <_free_r+0xe4>
1a00315c:	442b      	add	r3, r5
1a00315e:	e798      	b.n	1a003092 <_free_r+0xaa>
1a003160:	f102 075c 	add.w	r7, r2, #92	; 0x5c
1a003164:	00ff      	lsls	r7, r7, #3
1a003166:	f102 015b 	add.w	r1, r2, #91	; 0x5b
1a00316a:	e7af      	b.n	1a0030cc <_free_r+0xe4>
1a00316c:	e9c4 0004 	strd	r0, r0, [r4, #16]
1a003170:	e9c0 cc02 	strd	ip, ip, [r0, #8]
1a003174:	6045      	str	r5, [r0, #4]
1a003176:	50c3      	str	r3, [r0, r3]
1a003178:	e780      	b.n	1a00307c <_free_r+0x94>
1a00317a:	6863      	ldr	r3, [r4, #4]
1a00317c:	1089      	asrs	r1, r1, #2
1a00317e:	2701      	movs	r7, #1
1a003180:	fa07 f101 	lsl.w	r1, r7, r1
1a003184:	4319      	orrs	r1, r3
1a003186:	6061      	str	r1, [r4, #4]
1a003188:	e7ae      	b.n	1a0030e8 <_free_r+0x100>
1a00318a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a00318e:	d806      	bhi.n	1a00319e <_free_r+0x1b6>
1a003190:	0bda      	lsrs	r2, r3, #15
1a003192:	f102 0778 	add.w	r7, r2, #120	; 0x78
1a003196:	00ff      	lsls	r7, r7, #3
1a003198:	f102 0177 	add.w	r1, r2, #119	; 0x77
1a00319c:	e796      	b.n	1a0030cc <_free_r+0xe4>
1a00319e:	f240 5154 	movw	r1, #1364	; 0x554
1a0031a2:	428a      	cmp	r2, r1
1a0031a4:	d806      	bhi.n	1a0031b4 <_free_r+0x1cc>
1a0031a6:	0c9a      	lsrs	r2, r3, #18
1a0031a8:	f102 077d 	add.w	r7, r2, #125	; 0x7d
1a0031ac:	00ff      	lsls	r7, r7, #3
1a0031ae:	f102 017c 	add.w	r1, r2, #124	; 0x7c
1a0031b2:	e78b      	b.n	1a0030cc <_free_r+0xe4>
1a0031b4:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
1a0031b8:	217e      	movs	r1, #126	; 0x7e
1a0031ba:	e787      	b.n	1a0030cc <_free_r+0xe4>
1a0031bc:	f043 0101 	orr.w	r1, r3, #1
1a0031c0:	6041      	str	r1, [r0, #4]
1a0031c2:	6013      	str	r3, [r2, #0]
1a0031c4:	e75a      	b.n	1a00307c <_free_r+0x94>
1a0031c6:	bf00      	nop
1a0031c8:	10000478 	.word	0x10000478
1a0031cc:	10000884 	.word	0x10000884
1a0031d0:	100008d8 	.word	0x100008d8

1a0031d4 <__swhatbuf_r>:
1a0031d4:	b570      	push	{r4, r5, r6, lr}
1a0031d6:	460c      	mov	r4, r1
1a0031d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0031dc:	2900      	cmp	r1, #0
1a0031de:	b096      	sub	sp, #88	; 0x58
1a0031e0:	4615      	mov	r5, r2
1a0031e2:	461e      	mov	r6, r3
1a0031e4:	db14      	blt.n	1a003210 <__swhatbuf_r+0x3c>
1a0031e6:	466a      	mov	r2, sp
1a0031e8:	f7fd f8eb 	bl	1a0003c2 <_fstat_r>
1a0031ec:	2800      	cmp	r0, #0
1a0031ee:	db0f      	blt.n	1a003210 <__swhatbuf_r+0x3c>
1a0031f0:	9a01      	ldr	r2, [sp, #4]
1a0031f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0031f6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a0031fa:	fab2 f282 	clz	r2, r2
1a0031fe:	0952      	lsrs	r2, r2, #5
1a003200:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a003204:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a003208:	6032      	str	r2, [r6, #0]
1a00320a:	602b      	str	r3, [r5, #0]
1a00320c:	b016      	add	sp, #88	; 0x58
1a00320e:	bd70      	pop	{r4, r5, r6, pc}
1a003210:	89a2      	ldrh	r2, [r4, #12]
1a003212:	2300      	movs	r3, #0
1a003214:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a003218:	6033      	str	r3, [r6, #0]
1a00321a:	d004      	beq.n	1a003226 <__swhatbuf_r+0x52>
1a00321c:	2240      	movs	r2, #64	; 0x40
1a00321e:	4618      	mov	r0, r3
1a003220:	602a      	str	r2, [r5, #0]
1a003222:	b016      	add	sp, #88	; 0x58
1a003224:	bd70      	pop	{r4, r5, r6, pc}
1a003226:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00322a:	602b      	str	r3, [r5, #0]
1a00322c:	b016      	add	sp, #88	; 0x58
1a00322e:	bd70      	pop	{r4, r5, r6, pc}

1a003230 <__smakebuf_r>:
1a003230:	898a      	ldrh	r2, [r1, #12]
1a003232:	0792      	lsls	r2, r2, #30
1a003234:	460b      	mov	r3, r1
1a003236:	d506      	bpl.n	1a003246 <__smakebuf_r+0x16>
1a003238:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a00323c:	2101      	movs	r1, #1
1a00323e:	601a      	str	r2, [r3, #0]
1a003240:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a003244:	4770      	bx	lr
1a003246:	b570      	push	{r4, r5, r6, lr}
1a003248:	b082      	sub	sp, #8
1a00324a:	ab01      	add	r3, sp, #4
1a00324c:	466a      	mov	r2, sp
1a00324e:	460c      	mov	r4, r1
1a003250:	4606      	mov	r6, r0
1a003252:	f7ff ffbf 	bl	1a0031d4 <__swhatbuf_r>
1a003256:	9900      	ldr	r1, [sp, #0]
1a003258:	4605      	mov	r5, r0
1a00325a:	4630      	mov	r0, r6
1a00325c:	f7fe ff58 	bl	1a002110 <_malloc_r>
1a003260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003264:	b170      	cbz	r0, 1a003284 <__smakebuf_r+0x54>
1a003266:	4916      	ldr	r1, [pc, #88]	; (1a0032c0 <__smakebuf_r+0x90>)
1a003268:	63f1      	str	r1, [r6, #60]	; 0x3c
1a00326a:	9a01      	ldr	r2, [sp, #4]
1a00326c:	9900      	ldr	r1, [sp, #0]
1a00326e:	6020      	str	r0, [r4, #0]
1a003270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003274:	81a3      	strh	r3, [r4, #12]
1a003276:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a00327a:	b98a      	cbnz	r2, 1a0032a0 <__smakebuf_r+0x70>
1a00327c:	432b      	orrs	r3, r5
1a00327e:	81a3      	strh	r3, [r4, #12]
1a003280:	b002      	add	sp, #8
1a003282:	bd70      	pop	{r4, r5, r6, pc}
1a003284:	059a      	lsls	r2, r3, #22
1a003286:	d4fb      	bmi.n	1a003280 <__smakebuf_r+0x50>
1a003288:	f023 0303 	bic.w	r3, r3, #3
1a00328c:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a003290:	f043 0302 	orr.w	r3, r3, #2
1a003294:	2101      	movs	r1, #1
1a003296:	81a3      	strh	r3, [r4, #12]
1a003298:	6022      	str	r2, [r4, #0]
1a00329a:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a00329e:	e7ef      	b.n	1a003280 <__smakebuf_r+0x50>
1a0032a0:	4630      	mov	r0, r6
1a0032a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0032a6:	f7fd f891 	bl	1a0003cc <_isatty_r>
1a0032aa:	b910      	cbnz	r0, 1a0032b2 <__smakebuf_r+0x82>
1a0032ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0032b0:	e7e4      	b.n	1a00327c <__smakebuf_r+0x4c>
1a0032b2:	89a3      	ldrh	r3, [r4, #12]
1a0032b4:	f023 0303 	bic.w	r3, r3, #3
1a0032b8:	f043 0301 	orr.w	r3, r3, #1
1a0032bc:	b21b      	sxth	r3, r3
1a0032be:	e7dd      	b.n	1a00327c <__smakebuf_r+0x4c>
1a0032c0:	1a001d2d 	.word	0x1a001d2d
1a0032c4:	616c6f68 	.word	0x616c6f68
1a0032c8:	ffff000d 	.word	0xffff000d

1a0032cc <ExtRateIn>:
1a0032cc:	00000000                                ....

1a0032d0 <GpioButtons>:
1a0032d0:	08000400 09010900                       ........

1a0032d8 <GpioLeds>:
1a0032d8:	01050005 0e000205 0c010b01              ............

1a0032e4 <GpioPorts>:
1a0032e4:	03030003 0f050403 05031005 07030603     ................
1a0032f4:	ffff0802                                ....

1a0032f8 <OscRateIn>:
1a0032f8:	00b71b00                                ....

1a0032fc <InitClkStates>:
1a0032fc:	01010f01                                ....

1a003300 <pinmuxing>:
1a003300:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a003310:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a003320:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a003330:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a003340:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a003350:	00d50301 00d50401 00160107 00560207     ..............V.
1a003360:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a003370:	00570206                                ..W.

1a003374 <UART_BClock>:
1a003374:	01a201c2 01620182                       ......b.

1a00337c <UART_PClock>:
1a00337c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00338c:	ffff00ff                                ....

1a003390 <periph_to_base>:
1a003390:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0033a0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0033b0:	000100e0 01000100 01200003 00060120     .......... . ...
1a0033c0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0033d0:	01820013 00120182 01a201a2 01c20011     ................
1a0033e0:	001001c2 01e201e2 0202000f 000e0202     ................
1a0033f0:	02220222 0223000d 001c0223              "."...#.#...

1a0033fc <InitClkStates>:
1a0033fc:	00010100 00010909 0001090a 01010701     ................
1a00340c:	00010902 00010906 0101090c 0001090d     ................
1a00341c:	0001090e 0001090f 00010910 00010911     ................
1a00342c:	00010912 00010913 00011114 00011119     ................
1a00343c:	0001111a 0001111b                       ........

1a003444 <gpioPinsInit>:
1a003444:	02000104 00050701 05010d03 04080100     ................
1a003454:	02020002 02000304 00000403 04070002     ................
1a003464:	030c0300 09050402 05040103 04030208     ................
1a003474:	04020305 06040504 0802000c 03000b06     ................
1a003484:	00090607 07060503 060f0504 03030004     ................
1a003494:	02000404 00050404 06040502 04060200     ................
1a0034a4:	0c050408 05040a04 0003010e 14010a00     ................
1a0034b4:	010f0000 0d000012 00001101 0010010c     ................
1a0034c4:	07070300 000f0300 01000001 00000000     ................
1a0034d4:	000a0600 08060603 06100504 04030005     ................
1a0034e4:	03000106 04090400 04010d05 010b0000     ................
1a0034f4:	0200000f 00000001 00010104 02010800     ................
1a003504:	01090000 09010006 05040002 04010200     ................
1a003514:	02020105 02020504 0e00000a 01000b02     ................
1a003524:	000c020b ffff0c01 0000000a              ............
