
misProgramas/motorpasopaso/out/motorpasopaso.elf:     file format elf32-littlearm
misProgramas/motorpasopaso/out/motorpasopaso.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0003cd

Program Header:
0x70000001 off    0x00011af8 vaddr 0x1a001af8 paddr 0x1a001af8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x00000028 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001b00 memsz 0x00001b00 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001b00 align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001af4  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a001b00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          00000028  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .init_array   00000004  1a001af4  1a001af4  00011af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a001af8  1a001af8  00011af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 18 .noinit       00000000  10000070  10000070  00020048  2**2
                  CONTENTS
 19 .debug_info   00019e33  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00003c5d  00000000  00000000  00039e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 000008c8  00000000  00000000  0003dad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000918  00000000  00000000  0003e3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000bc8d  00000000  00000000  0003ecb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000e3f9  00000000  00000000  0004a945  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    000277ae  00000000  00000000  00058d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000068  00000000  00000000  000804ec  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  00080554  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001598  00000000  00000000  00080588  2**2
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_loc    00006faa  00000000  00000000  00081b20  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001af4 l    d  .init_array	00000000 .init_array
1a001af8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000070 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 board.c
1a000458 l     F .text	00000044 Board_LED_Init
1a00049c l     F .text	00000040 Board_TEC_Init
1a0004dc l     F .text	00000040 Board_GPIO_Init
1a00051c l     F .text	00000030 Board_ADC_Init
1a00054c l     F .text	00000038 Board_SPI_Init
1a000584 l     F .text	00000024 Board_I2C_Init
1a001898 l     O .text	00000008 GpioButtons
1a0018a0 l     O .text	0000000c GpioLeds
1a0018ac l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0018c4 l     O .text	00000004 InitClkStates
1a0018c8 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0006b4 l     F .text	0000002c Chip_UART_GetIndex
1a00193c l     O .text	00000008 UART_BClock
1a001944 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000810 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000824 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0008d8 l     F .text	000000a0 pll_calc_divs
1a000978 l     F .text	0000010c pll_get_frac
1a000a84 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000cf8 l     F .text	00000022 Chip_Clock_GetDivRate
10000048 l     O .bss	00000008 audio_usb_pll_freq
1a001958 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0019c4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000fd4 l     F .text	00000014 Chip_SSP_GetClockIndex
1a000fe8 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
10000050 l     O .bss	00000004 callBackFuncParams
10000058 l     O .bss	00000008 tickCounter
10000060 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001224 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000064 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a001af8 l       .init_array	00000000 __init_array_end
1a001af4 l       .bss_RAM5	00000000 __preinit_array_end
1a001af4 l       .init_array	00000000 __init_array_start
1a001af4 l       .bss_RAM5	00000000 __preinit_array_start
1a000b1c g     F .text	0000001c Chip_Clock_GetDividerSource
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0005fc g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a0008ca g     F .text	0000000c Chip_ADC_SetResolution
1a0011f8 g     F .text	0000002c SysTick_Handler
1a0003c8  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a001b00 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff74c2 g       *ABS*	00000000 __valid_user_code_checksum
1a001b00 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a000d9a g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001538 g     F .text	00000000 .hidden __aeabi_uldivmod
10000070 g       .noinit	00000000 _noinit
10000068 g     O .bss	00000004 SystemCoreClock
1a0006e0 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000e18 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00063c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001568 g     F .text	000002d0 .hidden __udivmoddi4
1a001894 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001af8 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00183c g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0005cc g     F .text	00000030 Board_Init
1a000456  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000070 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a0003cc g     F .text	00000088 Reset_Handler
1a00117c g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0010cc g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000ad0 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0010a8 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000c8c g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001a0c g     O .text	000000e6 gpioPinsInit
1a001000 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a000d74 g     F .text	00000026 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a000898 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a001012 g     F .text	0000003e Chip_SSP_SetBitRate
1a000e78 g     F .text	00000002 Chip_GPIO_Init
1a0018c0 g     O .text	00000004 OscRateIn
10000070 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001258 g     F .text	000001ac gpioInit
1a001838  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001470 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000b38 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001884 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	000000c8 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a000da8 g     F .text	0000003c Chip_Clock_EnableOpts
1a000b54 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000c0c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001104 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a001500 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001404 g     F .text	0000006a gpioWrite
1a000454  w    F .text	00000002 _fini
1a000858 g     F .text	00000040 Chip_ADC_Init
1000006c g     O .bss	00000004 g_pUsbApi
1a000604 g     F .text	00000038 Board_SetupMuxing
1a000734 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001158 g     F .text	0000000c tickRead
10000040 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000070 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001050 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a0005a8 g     F .text	00000024 Board_Debug_Init
10000048 g       .data	00000000 _edata
1a001088 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a000e7c g     F .text	00000158 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000e64 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001838  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a000de4 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a00148c g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001164 g     F .text	00000018 tickPowerSet
1a000d1c g     F .text	00000058 Chip_Clock_SetBaseClock
1a00113c g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0006a8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 cd 03 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a c2 74 ff 53     }............t.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	f9 11 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	71 14 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     q...............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a001b00 	.word	0x1a001b00
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000048 	.word	0x00000048
1a000120:	1a001b00 	.word	0x1a001b00
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001b00 	.word	0x1a001b00
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001b00 	.word	0x1a001b00
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001b00 	.word	0x1a001b00
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	00000028 	.word	0x00000028
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
//static int var = 0;

/*=====[Funcion principal, punto de entrada al programa luegp de encender]===*/

int main (void)
{
1a000300:	b508      	push	{r3, lr}
   // ----- Configuraciones -------------------------
   boardInit();
1a000302:	f001 f8c3 	bl	1a00148c <boardInit>
   gpioConfig( GPIO1, GPIO_OUTPUT );
1a000306:	2101      	movs	r1, #1
1a000308:	200f      	movs	r0, #15
1a00030a:	f000 ffa5 	bl	1a001258 <gpioInit>
   gpioConfig( GPIO2, GPIO_OUTPUT );
1a00030e:	2101      	movs	r1, #1
1a000310:	201f      	movs	r0, #31
1a000312:	f000 ffa1 	bl	1a001258 <gpioInit>
   gpioConfig( GPIO3, GPIO_OUTPUT );
1a000316:	2101      	movs	r1, #1
1a000318:	200e      	movs	r0, #14
1a00031a:	f000 ff9d 	bl	1a001258 <gpioInit>
   gpioConfig( GPIO4, GPIO_OUTPUT );
1a00031e:	2101      	movs	r1, #1
1a000320:	201e      	movs	r0, #30
1a000322:	f000 ff99 	bl	1a001258 <gpioInit>
   // ----- Repetir por siempre ---------------------
   while(TRUE) {
  gpioWrite(GPIO1,ON);
1a000326:	2101      	movs	r1, #1
1a000328:	200f      	movs	r0, #15
1a00032a:	f001 f86b 	bl	1a001404 <gpioWrite>
  gpioWrite(GPIO2,OFF);
1a00032e:	2100      	movs	r1, #0
1a000330:	201f      	movs	r0, #31
1a000332:	f001 f867 	bl	1a001404 <gpioWrite>
  gpioWrite(GPIO3,OFF);
1a000336:	2100      	movs	r1, #0
1a000338:	200e      	movs	r0, #14
1a00033a:	f001 f863 	bl	1a001404 <gpioWrite>
  gpioWrite(GPIO4,OFF);
1a00033e:	2100      	movs	r1, #0
1a000340:	201e      	movs	r0, #30
1a000342:	f001 f85f 	bl	1a001404 <gpioWrite>
  delay(150);
1a000346:	2096      	movs	r0, #150	; 0x96
1a000348:	2100      	movs	r1, #0
1a00034a:	f001 f8d9 	bl	1a001500 <delay>
  gpioWrite(GPIO1,OFF);
1a00034e:	2100      	movs	r1, #0
1a000350:	200f      	movs	r0, #15
1a000352:	f001 f857 	bl	1a001404 <gpioWrite>
    gpioWrite(GPIO2,ON);
1a000356:	2101      	movs	r1, #1
1a000358:	201f      	movs	r0, #31
1a00035a:	f001 f853 	bl	1a001404 <gpioWrite>
    gpioWrite(GPIO3,OFF);
1a00035e:	2100      	movs	r1, #0
1a000360:	200e      	movs	r0, #14
1a000362:	f001 f84f 	bl	1a001404 <gpioWrite>
    gpioWrite(GPIO4,OFF);
1a000366:	2100      	movs	r1, #0
1a000368:	201e      	movs	r0, #30
1a00036a:	f001 f84b 	bl	1a001404 <gpioWrite>
    delay(150);
1a00036e:	2096      	movs	r0, #150	; 0x96
1a000370:	2100      	movs	r1, #0
1a000372:	f001 f8c5 	bl	1a001500 <delay>
    gpioWrite(GPIO1,OFF);
1a000376:	2100      	movs	r1, #0
1a000378:	200f      	movs	r0, #15
1a00037a:	f001 f843 	bl	1a001404 <gpioWrite>
      gpioWrite(GPIO2,OFF);
1a00037e:	2100      	movs	r1, #0
1a000380:	201f      	movs	r0, #31
1a000382:	f001 f83f 	bl	1a001404 <gpioWrite>
      gpioWrite(GPIO3,ON);
1a000386:	2101      	movs	r1, #1
1a000388:	200e      	movs	r0, #14
1a00038a:	f001 f83b 	bl	1a001404 <gpioWrite>
      gpioWrite(GPIO4,OFF);
1a00038e:	2100      	movs	r1, #0
1a000390:	201e      	movs	r0, #30
1a000392:	f001 f837 	bl	1a001404 <gpioWrite>
      delay(150);
1a000396:	2096      	movs	r0, #150	; 0x96
1a000398:	2100      	movs	r1, #0
1a00039a:	f001 f8b1 	bl	1a001500 <delay>
      gpioWrite(GPIO1,OFF);
1a00039e:	2100      	movs	r1, #0
1a0003a0:	200f      	movs	r0, #15
1a0003a2:	f001 f82f 	bl	1a001404 <gpioWrite>
      gpioWrite(GPIO2,OFF);
1a0003a6:	2100      	movs	r1, #0
1a0003a8:	201f      	movs	r0, #31
1a0003aa:	f001 f82b 	bl	1a001404 <gpioWrite>
      gpioWrite(GPIO3,OFF);
1a0003ae:	2100      	movs	r1, #0
1a0003b0:	200e      	movs	r0, #14
1a0003b2:	f001 f827 	bl	1a001404 <gpioWrite>
      gpioWrite(GPIO4,ON);
1a0003b6:	2101      	movs	r1, #1
1a0003b8:	201e      	movs	r0, #30
1a0003ba:	f001 f823 	bl	1a001404 <gpioWrite>
delay(150);
1a0003be:	2096      	movs	r0, #150	; 0x96
1a0003c0:	2100      	movs	r1, #0
1a0003c2:	f001 f89d 	bl	1a001500 <delay>
1a0003c6:	e7ae      	b.n	1a000326 <main+0x26>

1a0003c8 <initialise_monitor_handles>:
}
1a0003c8:	4770      	bx	lr
1a0003ca:	Address 0x000000001a0003ca is out of bounds.


1a0003cc <Reset_Handler>:
void Reset_Handler(void) {
1a0003cc:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a0003ce:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0003d0:	4b19      	ldr	r3, [pc, #100]	; (1a000438 <Reset_Handler+0x6c>)
1a0003d2:	4a1a      	ldr	r2, [pc, #104]	; (1a00043c <Reset_Handler+0x70>)
1a0003d4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0003d6:	3304      	adds	r3, #4
1a0003d8:	4a19      	ldr	r2, [pc, #100]	; (1a000440 <Reset_Handler+0x74>)
1a0003da:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0003dc:	2300      	movs	r3, #0
1a0003de:	e005      	b.n	1a0003ec <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0003e0:	4a18      	ldr	r2, [pc, #96]	; (1a000444 <Reset_Handler+0x78>)
1a0003e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0003e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0003ea:	3301      	adds	r3, #1
1a0003ec:	2b07      	cmp	r3, #7
1a0003ee:	d9f7      	bls.n	1a0003e0 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a0003f0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a0003f2:	4b15      	ldr	r3, [pc, #84]	; (1a000448 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0003f4:	e007      	b.n	1a000406 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a0003f6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0003fa:	689a      	ldr	r2, [r3, #8]
1a0003fc:	6859      	ldr	r1, [r3, #4]
1a0003fe:	6818      	ldr	r0, [r3, #0]
1a000400:	f7ff fec3 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000404:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000406:	4a11      	ldr	r2, [pc, #68]	; (1a00044c <Reset_Handler+0x80>)
1a000408:	4293      	cmp	r3, r2
1a00040a:	d3f4      	bcc.n	1a0003f6 <Reset_Handler+0x2a>
1a00040c:	e006      	b.n	1a00041c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a00040e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000410:	6859      	ldr	r1, [r3, #4]
1a000412:	f854 0b08 	ldr.w	r0, [r4], #8
1a000416:	f7ff fec7 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00041a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00041c:	4a0c      	ldr	r2, [pc, #48]	; (1a000450 <Reset_Handler+0x84>)
1a00041e:	4293      	cmp	r3, r2
1a000420:	d3f5      	bcc.n	1a00040e <Reset_Handler+0x42>
    SystemInit();
1a000422:	f000 fe6f 	bl	1a001104 <SystemInit>
    __libc_init_array();
1a000426:	f001 fa09 	bl	1a00183c <__libc_init_array>
    initialise_monitor_handles();
1a00042a:	f7ff ffcd 	bl	1a0003c8 <initialise_monitor_handles>
    main();
1a00042e:	f7ff ff67 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a000432:	bf30      	wfi
1a000434:	e7fd      	b.n	1a000432 <Reset_Handler+0x66>
1a000436:	bf00      	nop
1a000438:	40053100 	.word	0x40053100
1a00043c:	10df1000 	.word	0x10df1000
1a000440:	01dff7ff 	.word	0x01dff7ff
1a000444:	e000e280 	.word	0xe000e280
1a000448:	1a000114 	.word	0x1a000114
1a00044c:	1a000150 	.word	0x1a000150
1a000450:	1a000178 	.word	0x1a000178

1a000454 <_fini>:
void _fini(void) {}
1a000454:	4770      	bx	lr

1a000456 <_init>:
void _init(void) {}
1a000456:	4770      	bx	lr

1a000458 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000458:	2200      	movs	r2, #0
1a00045a:	2a05      	cmp	r2, #5
1a00045c:	d819      	bhi.n	1a000492 <Board_LED_Init+0x3a>
{
1a00045e:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000460:	490c      	ldr	r1, [pc, #48]	; (1a000494 <Board_LED_Init+0x3c>)
1a000462:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000466:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00046a:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a00046c:	4b0a      	ldr	r3, [pc, #40]	; (1a000498 <Board_LED_Init+0x40>)
1a00046e:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000472:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000476:	2001      	movs	r0, #1
1a000478:	40a0      	lsls	r0, r4
1a00047a:	4301      	orrs	r1, r0
1a00047c:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000480:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000484:	2100      	movs	r1, #0
1a000486:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000488:	3201      	adds	r2, #1
1a00048a:	2a05      	cmp	r2, #5
1a00048c:	d9e8      	bls.n	1a000460 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00048e:	bc70      	pop	{r4, r5, r6}
1a000490:	4770      	bx	lr
1a000492:	4770      	bx	lr
1a000494:	1a0018a0 	.word	0x1a0018a0
1a000498:	400f4000 	.word	0x400f4000

1a00049c <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00049c:	2300      	movs	r3, #0
1a00049e:	2b03      	cmp	r3, #3
1a0004a0:	d816      	bhi.n	1a0004d0 <Board_TEC_Init+0x34>
{
1a0004a2:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0004a4:	490b      	ldr	r1, [pc, #44]	; (1a0004d4 <Board_TEC_Init+0x38>)
1a0004a6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0004aa:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0004ae:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0004b0:	4c09      	ldr	r4, [pc, #36]	; (1a0004d8 <Board_TEC_Init+0x3c>)
1a0004b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0004b6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0004ba:	2001      	movs	r0, #1
1a0004bc:	40a8      	lsls	r0, r5
1a0004be:	ea21 0100 	bic.w	r1, r1, r0
1a0004c2:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0004c6:	3301      	adds	r3, #1
1a0004c8:	2b03      	cmp	r3, #3
1a0004ca:	d9eb      	bls.n	1a0004a4 <Board_TEC_Init+0x8>
   }
}
1a0004cc:	bc30      	pop	{r4, r5}
1a0004ce:	4770      	bx	lr
1a0004d0:	4770      	bx	lr
1a0004d2:	bf00      	nop
1a0004d4:	1a001898 	.word	0x1a001898
1a0004d8:	400f4000 	.word	0x400f4000

1a0004dc <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0004dc:	2300      	movs	r3, #0
1a0004de:	2b08      	cmp	r3, #8
1a0004e0:	d816      	bhi.n	1a000510 <Board_GPIO_Init+0x34>
{
1a0004e2:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0004e4:	490b      	ldr	r1, [pc, #44]	; (1a000514 <Board_GPIO_Init+0x38>)
1a0004e6:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0004ea:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0004ee:	784d      	ldrb	r5, [r1, #1]
1a0004f0:	4c09      	ldr	r4, [pc, #36]	; (1a000518 <Board_GPIO_Init+0x3c>)
1a0004f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0004f6:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0004fa:	2001      	movs	r0, #1
1a0004fc:	40a8      	lsls	r0, r5
1a0004fe:	ea21 0100 	bic.w	r1, r1, r0
1a000502:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000506:	3301      	adds	r3, #1
1a000508:	2b08      	cmp	r3, #8
1a00050a:	d9eb      	bls.n	1a0004e4 <Board_GPIO_Init+0x8>
   }
}
1a00050c:	bc30      	pop	{r4, r5}
1a00050e:	4770      	bx	lr
1a000510:	4770      	bx	lr
1a000512:	bf00      	nop
1a000514:	1a0018ac 	.word	0x1a0018ac
1a000518:	400f4000 	.word	0x400f4000

1a00051c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00051c:	b510      	push	{r4, lr}
1a00051e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000520:	4c08      	ldr	r4, [pc, #32]	; (1a000544 <Board_ADC_Init+0x28>)
1a000522:	4669      	mov	r1, sp
1a000524:	4620      	mov	r0, r4
1a000526:	f000 f997 	bl	1a000858 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00052a:	4a07      	ldr	r2, [pc, #28]	; (1a000548 <Board_ADC_Init+0x2c>)
1a00052c:	4669      	mov	r1, sp
1a00052e:	4620      	mov	r0, r4
1a000530:	f000 f9b2 	bl	1a000898 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000534:	2200      	movs	r2, #0
1a000536:	4669      	mov	r1, sp
1a000538:	4620      	mov	r0, r4
1a00053a:	f000 f9c6 	bl	1a0008ca <Chip_ADC_SetResolution>
}
1a00053e:	b002      	add	sp, #8
1a000540:	bd10      	pop	{r4, pc}
1a000542:	bf00      	nop
1a000544:	400e3000 	.word	0x400e3000
1a000548:	00061a80 	.word	0x00061a80

1a00054c <Board_SPI_Init>:
{
1a00054c:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00054e:	4c0b      	ldr	r4, [pc, #44]	; (1a00057c <Board_SPI_Init+0x30>)
1a000550:	4620      	mov	r0, r4
1a000552:	f000 fd7d 	bl	1a001050 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000556:	6863      	ldr	r3, [r4, #4]
1a000558:	f023 0304 	bic.w	r3, r3, #4
1a00055c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00055e:	6823      	ldr	r3, [r4, #0]
1a000560:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000564:	f043 0307 	orr.w	r3, r3, #7
1a000568:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00056a:	4905      	ldr	r1, [pc, #20]	; (1a000580 <Board_SPI_Init+0x34>)
1a00056c:	4620      	mov	r0, r4
1a00056e:	f000 fd50 	bl	1a001012 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000572:	6863      	ldr	r3, [r4, #4]
1a000574:	f043 0302 	orr.w	r3, r3, #2
1a000578:	6063      	str	r3, [r4, #4]
}
1a00057a:	bd10      	pop	{r4, pc}
1a00057c:	400c5000 	.word	0x400c5000
1a000580:	000186a0 	.word	0x000186a0

1a000584 <Board_I2C_Init>:
{
1a000584:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000586:	2000      	movs	r0, #0
1a000588:	f000 fd8e 	bl	1a0010a8 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a00058c:	4b04      	ldr	r3, [pc, #16]	; (1a0005a0 <Board_I2C_Init+0x1c>)
1a00058e:	f640 0208 	movw	r2, #2056	; 0x808
1a000592:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000596:	4903      	ldr	r1, [pc, #12]	; (1a0005a4 <Board_I2C_Init+0x20>)
1a000598:	2000      	movs	r0, #0
1a00059a:	f000 fd97 	bl	1a0010cc <Chip_I2C_SetClockRate>
}
1a00059e:	bd08      	pop	{r3, pc}
1a0005a0:	40086000 	.word	0x40086000
1a0005a4:	000f4240 	.word	0x000f4240

1a0005a8 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0005a8:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0005aa:	4c07      	ldr	r4, [pc, #28]	; (1a0005c8 <Board_Debug_Init+0x20>)
1a0005ac:	4620      	mov	r0, r4
1a0005ae:	f000 f897 	bl	1a0006e0 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0005b2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0005b6:	4620      	mov	r0, r4
1a0005b8:	f000 f8bc 	bl	1a000734 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0005bc:	2303      	movs	r3, #3
1a0005be:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0005c0:	2301      	movs	r3, #1
1a0005c2:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0005c4:	bd10      	pop	{r4, pc}
1a0005c6:	bf00      	nop
1a0005c8:	400c1000 	.word	0x400c1000

1a0005cc <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0005cc:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0005ce:	f7ff ffeb 	bl	1a0005a8 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0005d2:	4809      	ldr	r0, [pc, #36]	; (1a0005f8 <Board_Init+0x2c>)
1a0005d4:	f000 fc50 	bl	1a000e78 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0005d8:	f7ff ff80 	bl	1a0004dc <Board_GPIO_Init>
   Board_ADC_Init();
1a0005dc:	f7ff ff9e 	bl	1a00051c <Board_ADC_Init>
   Board_SPI_Init();
1a0005e0:	f7ff ffb4 	bl	1a00054c <Board_SPI_Init>
   Board_I2C_Init();
1a0005e4:	f7ff ffce 	bl	1a000584 <Board_I2C_Init>

   Board_LED_Init();
1a0005e8:	f7ff ff36 	bl	1a000458 <Board_LED_Init>
   Board_TEC_Init();
1a0005ec:	f7ff ff56 	bl	1a00049c <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0005f0:	f000 fc38 	bl	1a000e64 <SystemCoreClockUpdate>
}
1a0005f4:	bd08      	pop	{r3, pc}
1a0005f6:	bf00      	nop
1a0005f8:	400f4000 	.word	0x400f4000

1a0005fc <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a0005fc:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0005fe:	f7ff ffd3 	bl	1a0005a8 <Board_Debug_Init>
1a000602:	bd08      	pop	{r3, pc}

1a000604 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000604:	2300      	movs	r3, #0
1a000606:	2b1c      	cmp	r3, #28
1a000608:	d812      	bhi.n	1a000630 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00060a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00060c:	4a09      	ldr	r2, [pc, #36]	; (1a000634 <Board_SetupMuxing+0x30>)
1a00060e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000612:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000616:	784a      	ldrb	r2, [r1, #1]
1a000618:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00061a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00061e:	4906      	ldr	r1, [pc, #24]	; (1a000638 <Board_SetupMuxing+0x34>)
1a000620:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000624:	3301      	adds	r3, #1
1a000626:	2b1c      	cmp	r3, #28
1a000628:	d9f0      	bls.n	1a00060c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00062a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00062e:	4770      	bx	lr
1a000630:	4770      	bx	lr
1a000632:	bf00      	nop
1a000634:	1a0018c8 	.word	0x1a0018c8
1a000638:	40086000 	.word	0x40086000

1a00063c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00063c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00063e:	4a17      	ldr	r2, [pc, #92]	; (1a00069c <Board_SetupClocking+0x60>)
1a000640:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000648:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00064c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000650:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000654:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000658:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00065c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000660:	2201      	movs	r2, #1
1a000662:	490f      	ldr	r1, [pc, #60]	; (1a0006a0 <Board_SetupClocking+0x64>)
1a000664:	2006      	movs	r0, #6
1a000666:	f000 fc09 	bl	1a000e7c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00066a:	2400      	movs	r4, #0
1a00066c:	b14c      	cbz	r4, 1a000682 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a00066e:	4b0b      	ldr	r3, [pc, #44]	; (1a00069c <Board_SetupClocking+0x60>)
1a000670:	685a      	ldr	r2, [r3, #4]
1a000672:	f022 020c 	bic.w	r2, r2, #12
1a000676:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000678:	685a      	ldr	r2, [r3, #4]
1a00067a:	f042 0203 	orr.w	r2, r2, #3
1a00067e:	605a      	str	r2, [r3, #4]
}
1a000680:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000682:	4808      	ldr	r0, [pc, #32]	; (1a0006a4 <Board_SetupClocking+0x68>)
1a000684:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000688:	2301      	movs	r3, #1
1a00068a:	788a      	ldrb	r2, [r1, #2]
1a00068c:	7849      	ldrb	r1, [r1, #1]
1a00068e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000692:	f000 fb43 	bl	1a000d1c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000696:	3401      	adds	r4, #1
1a000698:	e7e8      	b.n	1a00066c <Board_SetupClocking+0x30>
1a00069a:	bf00      	nop
1a00069c:	40043000 	.word	0x40043000
1a0006a0:	0c28cb00 	.word	0x0c28cb00
1a0006a4:	1a0018c4 	.word	0x1a0018c4

1a0006a8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0006a8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0006aa:	f7ff ffab 	bl	1a000604 <Board_SetupMuxing>
    Board_SetupClocking();
1a0006ae:	f7ff ffc5 	bl	1a00063c <Board_SetupClocking>
}
1a0006b2:	bd08      	pop	{r3, pc}

1a0006b4 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0006b4:	4b09      	ldr	r3, [pc, #36]	; (1a0006dc <Chip_UART_GetIndex+0x28>)
1a0006b6:	4298      	cmp	r0, r3
1a0006b8:	d009      	beq.n	1a0006ce <Chip_UART_GetIndex+0x1a>
1a0006ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0006be:	4298      	cmp	r0, r3
1a0006c0:	d007      	beq.n	1a0006d2 <Chip_UART_GetIndex+0x1e>
1a0006c2:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0006c6:	4298      	cmp	r0, r3
1a0006c8:	d005      	beq.n	1a0006d6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0006ca:	2000      	movs	r0, #0
1a0006cc:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0006ce:	2002      	movs	r0, #2
1a0006d0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0006d2:	2003      	movs	r0, #3
1a0006d4:	4770      	bx	lr
			return 1;
1a0006d6:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0006d8:	4770      	bx	lr
1a0006da:	bf00      	nop
1a0006dc:	400c1000 	.word	0x400c1000

1a0006e0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0006e0:	b530      	push	{r4, r5, lr}
1a0006e2:	b083      	sub	sp, #12
1a0006e4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0006e6:	f7ff ffe5 	bl	1a0006b4 <Chip_UART_GetIndex>
1a0006ea:	2301      	movs	r3, #1
1a0006ec:	461a      	mov	r2, r3
1a0006ee:	4619      	mov	r1, r3
1a0006f0:	4d0e      	ldr	r5, [pc, #56]	; (1a00072c <Chip_UART_Init+0x4c>)
1a0006f2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0006f6:	f000 fb57 	bl	1a000da8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0006fa:	2307      	movs	r3, #7
1a0006fc:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0006fe:	2300      	movs	r3, #0
1a000700:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000702:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000704:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000706:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000708:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00070a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a00070c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00070e:	4b08      	ldr	r3, [pc, #32]	; (1a000730 <Chip_UART_Init+0x50>)
1a000710:	429c      	cmp	r4, r3
1a000712:	d006      	beq.n	1a000722 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000714:	2303      	movs	r3, #3
1a000716:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000718:	2310      	movs	r3, #16
1a00071a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a00071c:	9b01      	ldr	r3, [sp, #4]
}
1a00071e:	b003      	add	sp, #12
1a000720:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000722:	2300      	movs	r3, #0
1a000724:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000726:	69a3      	ldr	r3, [r4, #24]
1a000728:	9301      	str	r3, [sp, #4]
1a00072a:	e7f3      	b.n	1a000714 <Chip_UART_Init+0x34>
1a00072c:	1a001944 	.word	0x1a001944
1a000730:	40082000 	.word	0x40082000

1a000734 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000738:	b083      	sub	sp, #12
1a00073a:	9001      	str	r0, [sp, #4]
1a00073c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00073e:	f7ff ffb9 	bl	1a0006b4 <Chip_UART_GetIndex>
1a000742:	4b32      	ldr	r3, [pc, #200]	; (1a00080c <Chip_UART_SetBaudFDR+0xd8>)
1a000744:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000748:	f000 fb66 	bl	1a000e18 <Chip_Clock_GetRate>
1a00074c:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00074e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000752:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000754:	f04f 0b00 	mov.w	fp, #0
1a000758:	46a2      	mov	sl, r4
1a00075a:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a00075c:	e02a      	b.n	1a0007b4 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00075e:	4242      	negs	r2, r0
				div ++;
1a000760:	1c4b      	adds	r3, r1, #1
1a000762:	e017      	b.n	1a000794 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000764:	b30a      	cbz	r2, 1a0007aa <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a000766:	4617      	mov	r7, r2
			sd = d;
1a000768:	46ab      	mov	fp, r5
			sm = m;
1a00076a:	46a2      	mov	sl, r4
			sdiv = div;
1a00076c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00076e:	3501      	adds	r5, #1
1a000770:	42ac      	cmp	r4, r5
1a000772:	d91e      	bls.n	1a0007b2 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000774:	0933      	lsrs	r3, r6, #4
1a000776:	0730      	lsls	r0, r6, #28
1a000778:	fba4 0100 	umull	r0, r1, r4, r0
1a00077c:	fb04 1103 	mla	r1, r4, r3, r1
1a000780:	1962      	adds	r2, r4, r5
1a000782:	fb08 f202 	mul.w	r2, r8, r2
1a000786:	2300      	movs	r3, #0
1a000788:	f000 fed6 	bl	1a001538 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a00078c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00078e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a000790:	2800      	cmp	r0, #0
1a000792:	dbe4      	blt.n	1a00075e <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000794:	4297      	cmp	r7, r2
1a000796:	d3ea      	bcc.n	1a00076e <Chip_UART_SetBaudFDR+0x3a>
1a000798:	2b00      	cmp	r3, #0
1a00079a:	d0e8      	beq.n	1a00076e <Chip_UART_SetBaudFDR+0x3a>
1a00079c:	0c19      	lsrs	r1, r3, #16
1a00079e:	d1e6      	bne.n	1a00076e <Chip_UART_SetBaudFDR+0x3a>
1a0007a0:	2b02      	cmp	r3, #2
1a0007a2:	d8df      	bhi.n	1a000764 <Chip_UART_SetBaudFDR+0x30>
1a0007a4:	2d00      	cmp	r5, #0
1a0007a6:	d0dd      	beq.n	1a000764 <Chip_UART_SetBaudFDR+0x30>
1a0007a8:	e7e1      	b.n	1a00076e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0007aa:	4617      	mov	r7, r2
			sd = d;
1a0007ac:	46ab      	mov	fp, r5
			sm = m;
1a0007ae:	46a2      	mov	sl, r4
			sdiv = div;
1a0007b0:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0007b2:	3401      	adds	r4, #1
1a0007b4:	b11f      	cbz	r7, 1a0007be <Chip_UART_SetBaudFDR+0x8a>
1a0007b6:	2c0f      	cmp	r4, #15
1a0007b8:	d801      	bhi.n	1a0007be <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0007ba:	2500      	movs	r5, #0
1a0007bc:	e7d8      	b.n	1a000770 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0007be:	f1b9 0f00 	cmp.w	r9, #0
1a0007c2:	d01e      	beq.n	1a000802 <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0007c4:	9a01      	ldr	r2, [sp, #4]
1a0007c6:	4611      	mov	r1, r2
1a0007c8:	68d3      	ldr	r3, [r2, #12]
1a0007ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0007ce:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0007d0:	fa5f f389 	uxtb.w	r3, r9
1a0007d4:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0007d6:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0007da:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0007dc:	68d3      	ldr	r3, [r2, #12]
1a0007de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0007e2:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0007e4:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0007e8:	b2db      	uxtb	r3, r3
1a0007ea:	f00b 020f 	and.w	r2, fp, #15
1a0007ee:	4313      	orrs	r3, r2
1a0007f0:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0007f2:	0933      	lsrs	r3, r6, #4
1a0007f4:	fb0a f303 	mul.w	r3, sl, r3
1a0007f8:	44da      	add	sl, fp
1a0007fa:	fb09 f90a 	mul.w	r9, r9, sl
1a0007fe:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000802:	4648      	mov	r0, r9
1a000804:	b003      	add	sp, #12
1a000806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00080a:	bf00      	nop
1a00080c:	1a00193c 	.word	0x1a00193c

1a000810 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000810:	4b03      	ldr	r3, [pc, #12]	; (1a000820 <Chip_ADC_GetClockIndex+0x10>)
1a000812:	4298      	cmp	r0, r3
1a000814:	d001      	beq.n	1a00081a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000816:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000818:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00081a:	2004      	movs	r0, #4
1a00081c:	4770      	bx	lr
1a00081e:	bf00      	nop
1a000820:	400e4000 	.word	0x400e4000

1a000824 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000824:	b570      	push	{r4, r5, r6, lr}
1a000826:	460d      	mov	r5, r1
1a000828:	4614      	mov	r4, r2
1a00082a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a00082c:	f7ff fff0 	bl	1a000810 <Chip_ADC_GetClockIndex>
1a000830:	f000 faf2 	bl	1a000e18 <Chip_Clock_GetRate>
	if (burstMode) {
1a000834:	b155      	cbz	r5, 1a00084c <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000836:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00083a:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00083e:	0064      	lsls	r4, r4, #1
1a000840:	fbb0 f0f4 	udiv	r0, r0, r4
1a000844:	b2c0      	uxtb	r0, r0
1a000846:	3801      	subs	r0, #1
	return div;
}
1a000848:	b2c0      	uxtb	r0, r0
1a00084a:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a00084c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000850:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000854:	e7f1      	b.n	1a00083a <getClkDiv+0x16>
1a000856:	Address 0x000000001a000856 is out of bounds.


1a000858 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000858:	b538      	push	{r3, r4, r5, lr}
1a00085a:	4605      	mov	r5, r0
1a00085c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00085e:	f7ff ffd7 	bl	1a000810 <Chip_ADC_GetClockIndex>
1a000862:	2301      	movs	r3, #1
1a000864:	461a      	mov	r2, r3
1a000866:	4619      	mov	r1, r3
1a000868:	f000 fa9e 	bl	1a000da8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a00086c:	2100      	movs	r1, #0
1a00086e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000870:	4a08      	ldr	r2, [pc, #32]	; (1a000894 <Chip_ADC_Init+0x3c>)
1a000872:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000874:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000876:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000878:	230b      	movs	r3, #11
1a00087a:	4628      	mov	r0, r5
1a00087c:	f7ff ffd2 	bl	1a000824 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000880:	0200      	lsls	r0, r0, #8
1a000882:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000886:	7920      	ldrb	r0, [r4, #4]
1a000888:	0440      	lsls	r0, r0, #17
1a00088a:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00088e:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000890:	6028      	str	r0, [r5, #0]
}
1a000892:	bd38      	pop	{r3, r4, r5, pc}
1a000894:	00061a80 	.word	0x00061a80

1a000898 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000898:	b570      	push	{r4, r5, r6, lr}
1a00089a:	4605      	mov	r5, r0
1a00089c:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00089e:	6804      	ldr	r4, [r0, #0]
1a0008a0:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0008a4:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0008a8:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0008aa:	790b      	ldrb	r3, [r1, #4]
1a0008ac:	f1c3 030b 	rsb	r3, r3, #11
1a0008b0:	b2db      	uxtb	r3, r3
1a0008b2:	7949      	ldrb	r1, [r1, #5]
1a0008b4:	f7ff ffb6 	bl	1a000824 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0008b8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0008bc:	7933      	ldrb	r3, [r6, #4]
1a0008be:	045b      	lsls	r3, r3, #17
1a0008c0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0008c4:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0008c6:	602b      	str	r3, [r5, #0]
}
1a0008c8:	bd70      	pop	{r4, r5, r6, pc}

1a0008ca <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0008ca:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0008cc:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0008ce:	680a      	ldr	r2, [r1, #0]
1a0008d0:	f7ff ffe2 	bl	1a000898 <Chip_ADC_SetSampleRate>
}
1a0008d4:	bd08      	pop	{r3, pc}
1a0008d6:	Address 0x000000001a0008d6 is out of bounds.


1a0008d8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0008d8:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0008da:	680b      	ldr	r3, [r1, #0]
1a0008dc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0008e0:	d002      	beq.n	1a0008e8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0008e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0008e6:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0008e8:	4607      	mov	r7, r0
1a0008ea:	2501      	movs	r5, #1
1a0008ec:	e03a      	b.n	1a000964 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0008ee:	694b      	ldr	r3, [r1, #20]
1a0008f0:	fb03 f302 	mul.w	r3, r3, r2
1a0008f4:	fbb3 f3f5 	udiv	r3, r3, r5
1a0008f8:	e01c      	b.n	1a000934 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0008fa:	461c      	mov	r4, r3
	if (val < 0)
1a0008fc:	ebb0 0c04 	subs.w	ip, r0, r4
1a000900:	d427      	bmi.n	1a000952 <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000902:	4567      	cmp	r7, ip
1a000904:	d906      	bls.n	1a000914 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000906:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000908:	1c77      	adds	r7, r6, #1
1a00090a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00090c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00090e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000910:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000912:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000914:	3201      	adds	r2, #1
1a000916:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00091a:	dc1d      	bgt.n	1a000958 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a00091c:	680c      	ldr	r4, [r1, #0]
1a00091e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000922:	d0e4      	beq.n	1a0008ee <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000924:	1c73      	adds	r3, r6, #1
1a000926:	fa02 fc03 	lsl.w	ip, r2, r3
1a00092a:	694b      	ldr	r3, [r1, #20]
1a00092c:	fb03 f30c 	mul.w	r3, r3, ip
1a000930:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000934:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000970 <pll_calc_divs+0x98>
1a000938:	4563      	cmp	r3, ip
1a00093a:	d9eb      	bls.n	1a000914 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a00093c:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000974 <pll_calc_divs+0x9c>
1a000940:	4563      	cmp	r3, ip
1a000942:	d809      	bhi.n	1a000958 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000944:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000948:	d1d7      	bne.n	1a0008fa <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a00094a:	1c74      	adds	r4, r6, #1
1a00094c:	fa23 f404 	lsr.w	r4, r3, r4
1a000950:	e7d4      	b.n	1a0008fc <pll_calc_divs+0x24>
		return -val;
1a000952:	f1cc 0c00 	rsb	ip, ip, #0
1a000956:	e7d4      	b.n	1a000902 <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000958:	3601      	adds	r6, #1
1a00095a:	2e03      	cmp	r6, #3
1a00095c:	dc01      	bgt.n	1a000962 <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a00095e:	2201      	movs	r2, #1
1a000960:	e7d9      	b.n	1a000916 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000962:	3501      	adds	r5, #1
1a000964:	2d04      	cmp	r5, #4
1a000966:	dc01      	bgt.n	1a00096c <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000968:	2600      	movs	r6, #0
1a00096a:	e7f6      	b.n	1a00095a <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a00096c:	bcf0      	pop	{r4, r5, r6, r7}
1a00096e:	4770      	bx	lr
1a000970:	094c5eff 	.word	0x094c5eff
1a000974:	1312d000 	.word	0x1312d000

1a000978 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000978:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00097a:	b099      	sub	sp, #100	; 0x64
1a00097c:	4605      	mov	r5, r0
1a00097e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000980:	225c      	movs	r2, #92	; 0x5c
1a000982:	2100      	movs	r1, #0
1a000984:	a801      	add	r0, sp, #4
1a000986:	f000 ff7d 	bl	1a001884 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00098a:	2380      	movs	r3, #128	; 0x80
1a00098c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00098e:	6963      	ldr	r3, [r4, #20]
1a000990:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000992:	7923      	ldrb	r3, [r4, #4]
1a000994:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000998:	4669      	mov	r1, sp
1a00099a:	4628      	mov	r0, r5
1a00099c:	f7ff ff9c 	bl	1a0008d8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0009a0:	9b06      	ldr	r3, [sp, #24]
1a0009a2:	42ab      	cmp	r3, r5
1a0009a4:	d027      	beq.n	1a0009f6 <pll_get_frac+0x7e>
	if (val < 0)
1a0009a6:	1aeb      	subs	r3, r5, r3
1a0009a8:	d42e      	bmi.n	1a000a08 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0009aa:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0009ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0009ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0009b2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0009b4:	6963      	ldr	r3, [r4, #20]
1a0009b6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0009b8:	7923      	ldrb	r3, [r4, #4]
1a0009ba:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0009be:	a910      	add	r1, sp, #64	; 0x40
1a0009c0:	4628      	mov	r0, r5
1a0009c2:	f7ff ff89 	bl	1a0008d8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0009c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0009c8:	42ab      	cmp	r3, r5
1a0009ca:	d01f      	beq.n	1a000a0c <pll_get_frac+0x94>
	if (val < 0)
1a0009cc:	1aeb      	subs	r3, r5, r3
1a0009ce:	d425      	bmi.n	1a000a1c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0009d0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0009d2:	4b2b      	ldr	r3, [pc, #172]	; (1a000a80 <pll_get_frac+0x108>)
1a0009d4:	429d      	cmp	r5, r3
1a0009d6:	d923      	bls.n	1a000a20 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0009d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0009da:	1aed      	subs	r5, r5, r3
1a0009dc:	d433      	bmi.n	1a000a46 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0009de:	42ae      	cmp	r6, r5
1a0009e0:	dc3b      	bgt.n	1a000a5a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0009e2:	42be      	cmp	r6, r7
1a0009e4:	dc31      	bgt.n	1a000a4a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0009e6:	466d      	mov	r5, sp
1a0009e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0009ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0009ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0009f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0009f4:	e006      	b.n	1a000a04 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0009f6:	466d      	mov	r5, sp
1a0009f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0009fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0009fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000a04:	b019      	add	sp, #100	; 0x64
1a000a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000a08:	425b      	negs	r3, r3
1a000a0a:	e7ce      	b.n	1a0009aa <pll_get_frac+0x32>
		*ppll = pll[2];
1a000a0c:	ad10      	add	r5, sp, #64	; 0x40
1a000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a12:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000a1a:	e7f3      	b.n	1a000a04 <pll_get_frac+0x8c>
		return -val;
1a000a1c:	425b      	negs	r3, r3
1a000a1e:	e7d7      	b.n	1a0009d0 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000a20:	2340      	movs	r3, #64	; 0x40
1a000a22:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000a24:	6963      	ldr	r3, [r4, #20]
1a000a26:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000a28:	a908      	add	r1, sp, #32
1a000a2a:	4628      	mov	r0, r5
1a000a2c:	f7ff ff54 	bl	1a0008d8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000a32:	42ab      	cmp	r3, r5
1a000a34:	d1d0      	bne.n	1a0009d8 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000a36:	ad08      	add	r5, sp, #32
1a000a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000a44:	e7de      	b.n	1a000a04 <pll_get_frac+0x8c>
		return -val;
1a000a46:	426d      	negs	r5, r5
1a000a48:	e7c9      	b.n	1a0009de <pll_get_frac+0x66>
			*ppll = pll[2];
1a000a4a:	ad10      	add	r5, sp, #64	; 0x40
1a000a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a58:	e7d4      	b.n	1a000a04 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000a5a:	42af      	cmp	r7, r5
1a000a5c:	db07      	blt.n	1a000a6e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000a5e:	ad08      	add	r5, sp, #32
1a000a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a6c:	e7ca      	b.n	1a000a04 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000a6e:	ad10      	add	r5, sp, #64	; 0x40
1a000a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a7c:	e7c2      	b.n	1a000a04 <pll_get_frac+0x8c>
1a000a7e:	bf00      	nop
1a000a80:	068e7780 	.word	0x068e7780

1a000a84 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000a84:	b430      	push	{r4, r5}
1a000a86:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000a88:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000a8a:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000a8c:	e000      	b.n	1a000a90 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000a8e:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000a90:	281c      	cmp	r0, #28
1a000a92:	d118      	bne.n	1a000ac6 <Chip_Clock_FindBaseClock+0x42>
1a000a94:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000a98:	0051      	lsls	r1, r2, #1
1a000a9a:	4a0c      	ldr	r2, [pc, #48]	; (1a000acc <Chip_Clock_FindBaseClock+0x48>)
1a000a9c:	440a      	add	r2, r1
1a000a9e:	7914      	ldrb	r4, [r2, #4]
1a000aa0:	4284      	cmp	r4, r0
1a000aa2:	d010      	beq.n	1a000ac6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000aa4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000aa8:	004a      	lsls	r2, r1, #1
1a000aaa:	4908      	ldr	r1, [pc, #32]	; (1a000acc <Chip_Clock_FindBaseClock+0x48>)
1a000aac:	5a8a      	ldrh	r2, [r1, r2]
1a000aae:	42aa      	cmp	r2, r5
1a000ab0:	d8ed      	bhi.n	1a000a8e <Chip_Clock_FindBaseClock+0xa>
1a000ab2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000ab6:	0051      	lsls	r1, r2, #1
1a000ab8:	4a04      	ldr	r2, [pc, #16]	; (1a000acc <Chip_Clock_FindBaseClock+0x48>)
1a000aba:	440a      	add	r2, r1
1a000abc:	8852      	ldrh	r2, [r2, #2]
1a000abe:	42aa      	cmp	r2, r5
1a000ac0:	d3e5      	bcc.n	1a000a8e <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000ac2:	4620      	mov	r0, r4
1a000ac4:	e7e4      	b.n	1a000a90 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000ac6:	bc30      	pop	{r4, r5}
1a000ac8:	4770      	bx	lr
1a000aca:	bf00      	nop
1a000acc:	1a001958 	.word	0x1a001958

1a000ad0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000ad0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000ad6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000ad8:	4a0d      	ldr	r2, [pc, #52]	; (1a000b10 <Chip_Clock_EnableCrystal+0x40>)
1a000ada:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000adc:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000ae0:	6992      	ldr	r2, [r2, #24]
1a000ae2:	428a      	cmp	r2, r1
1a000ae4:	d001      	beq.n	1a000aea <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000ae6:	4a0a      	ldr	r2, [pc, #40]	; (1a000b10 <Chip_Clock_EnableCrystal+0x40>)
1a000ae8:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000aea:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000aee:	4a09      	ldr	r2, [pc, #36]	; (1a000b14 <Chip_Clock_EnableCrystal+0x44>)
1a000af0:	6811      	ldr	r1, [r2, #0]
1a000af2:	4a09      	ldr	r2, [pc, #36]	; (1a000b18 <Chip_Clock_EnableCrystal+0x48>)
1a000af4:	4291      	cmp	r1, r2
1a000af6:	d901      	bls.n	1a000afc <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000af8:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000afc:	4a04      	ldr	r2, [pc, #16]	; (1a000b10 <Chip_Clock_EnableCrystal+0x40>)
1a000afe:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000b00:	9b01      	ldr	r3, [sp, #4]
1a000b02:	1e5a      	subs	r2, r3, #1
1a000b04:	9201      	str	r2, [sp, #4]
1a000b06:	2b00      	cmp	r3, #0
1a000b08:	d1fa      	bne.n	1a000b00 <Chip_Clock_EnableCrystal+0x30>
}
1a000b0a:	b002      	add	sp, #8
1a000b0c:	4770      	bx	lr
1a000b0e:	bf00      	nop
1a000b10:	40050000 	.word	0x40050000
1a000b14:	1a0018c0 	.word	0x1a0018c0
1a000b18:	01312cff 	.word	0x01312cff

1a000b1c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000b1c:	3012      	adds	r0, #18
1a000b1e:	4b05      	ldr	r3, [pc, #20]	; (1a000b34 <Chip_Clock_GetDividerSource+0x18>)
1a000b20:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000b24:	f010 0f01 	tst.w	r0, #1
1a000b28:	d102      	bne.n	1a000b30 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000b2a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000b2e:	4770      	bx	lr
		return CLKINPUT_PD;
1a000b30:	2011      	movs	r0, #17
}
1a000b32:	4770      	bx	lr
1a000b34:	40050000 	.word	0x40050000

1a000b38 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000b38:	f100 0212 	add.w	r2, r0, #18
1a000b3c:	4b03      	ldr	r3, [pc, #12]	; (1a000b4c <Chip_Clock_GetDividerDivisor+0x14>)
1a000b3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000b42:	4b03      	ldr	r3, [pc, #12]	; (1a000b50 <Chip_Clock_GetDividerDivisor+0x18>)
1a000b44:	5c18      	ldrb	r0, [r3, r0]
}
1a000b46:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000b4a:	4770      	bx	lr
1a000b4c:	40050000 	.word	0x40050000
1a000b50:	1a001950 	.word	0x1a001950

1a000b54 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000b54:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000b56:	2810      	cmp	r0, #16
1a000b58:	d80a      	bhi.n	1a000b70 <Chip_Clock_GetClockInputHz+0x1c>
1a000b5a:	e8df f000 	tbb	[pc, r0]
1a000b5e:	0b44      	.short	0x0b44
1a000b60:	0921180d 	.word	0x0921180d
1a000b64:	2d2a2724 	.word	0x2d2a2724
1a000b68:	34300909 	.word	0x34300909
1a000b6c:	3c38      	.short	0x3c38
1a000b6e:	40          	.byte	0x40
1a000b6f:	00          	.byte	0x00
	uint32_t rate = 0;
1a000b70:	2000      	movs	r0, #0
1a000b72:	e03a      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000b74:	481e      	ldr	r0, [pc, #120]	; (1a000bf0 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000b76:	e038      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000b78:	4b1e      	ldr	r3, [pc, #120]	; (1a000bf4 <Chip_Clock_GetClockInputHz+0xa0>)
1a000b7a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000b7e:	f003 0307 	and.w	r3, r3, #7
1a000b82:	2b04      	cmp	r3, #4
1a000b84:	d001      	beq.n	1a000b8a <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000b86:	481c      	ldr	r0, [pc, #112]	; (1a000bf8 <Chip_Clock_GetClockInputHz+0xa4>)
1a000b88:	e02f      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a000b8a:	2000      	movs	r0, #0
1a000b8c:	e02d      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000b8e:	4b19      	ldr	r3, [pc, #100]	; (1a000bf4 <Chip_Clock_GetClockInputHz+0xa0>)
1a000b90:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000b94:	f003 0307 	and.w	r3, r3, #7
1a000b98:	2b04      	cmp	r3, #4
1a000b9a:	d027      	beq.n	1a000bec <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000b9c:	4816      	ldr	r0, [pc, #88]	; (1a000bf8 <Chip_Clock_GetClockInputHz+0xa4>)
1a000b9e:	e024      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000ba0:	4b16      	ldr	r3, [pc, #88]	; (1a000bfc <Chip_Clock_GetClockInputHz+0xa8>)
1a000ba2:	6818      	ldr	r0, [r3, #0]
		break;
1a000ba4:	e021      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000ba6:	4b16      	ldr	r3, [pc, #88]	; (1a000c00 <Chip_Clock_GetClockInputHz+0xac>)
1a000ba8:	6818      	ldr	r0, [r3, #0]
		break;
1a000baa:	e01e      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000bac:	4b15      	ldr	r3, [pc, #84]	; (1a000c04 <Chip_Clock_GetClockInputHz+0xb0>)
1a000bae:	6818      	ldr	r0, [r3, #0]
		break;
1a000bb0:	e01b      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000bb2:	4b14      	ldr	r3, [pc, #80]	; (1a000c04 <Chip_Clock_GetClockInputHz+0xb0>)
1a000bb4:	6858      	ldr	r0, [r3, #4]
		break;
1a000bb6:	e018      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000bb8:	f000 f868 	bl	1a000c8c <Chip_Clock_GetMainPLLHz>
		break;
1a000bbc:	e015      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000bbe:	2100      	movs	r1, #0
1a000bc0:	f000 f89a 	bl	1a000cf8 <Chip_Clock_GetDivRate>
		break;
1a000bc4:	e011      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000bc6:	2101      	movs	r1, #1
1a000bc8:	f000 f896 	bl	1a000cf8 <Chip_Clock_GetDivRate>
		break;
1a000bcc:	e00d      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000bce:	2102      	movs	r1, #2
1a000bd0:	f000 f892 	bl	1a000cf8 <Chip_Clock_GetDivRate>
		break;
1a000bd4:	e009      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000bd6:	2103      	movs	r1, #3
1a000bd8:	f000 f88e 	bl	1a000cf8 <Chip_Clock_GetDivRate>
		break;
1a000bdc:	e005      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000bde:	2104      	movs	r1, #4
1a000be0:	f000 f88a 	bl	1a000cf8 <Chip_Clock_GetDivRate>
		break;
1a000be4:	e001      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a000be6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000bea:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000bec:	4806      	ldr	r0, [pc, #24]	; (1a000c08 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000bee:	e7fc      	b.n	1a000bea <Chip_Clock_GetClockInputHz+0x96>
1a000bf0:	00b71b00 	.word	0x00b71b00
1a000bf4:	40043000 	.word	0x40043000
1a000bf8:	017d7840 	.word	0x017d7840
1a000bfc:	1a001894 	.word	0x1a001894
1a000c00:	1a0018c0 	.word	0x1a0018c0
1a000c04:	10000048 	.word	0x10000048
1a000c08:	02faf080 	.word	0x02faf080

1a000c0c <Chip_Clock_CalcMainPLLValue>:
{
1a000c0c:	b538      	push	{r3, r4, r5, lr}
1a000c0e:	4605      	mov	r5, r0
1a000c10:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000c12:	7908      	ldrb	r0, [r1, #4]
1a000c14:	f7ff ff9e 	bl	1a000b54 <Chip_Clock_GetClockInputHz>
1a000c18:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000c1a:	4b19      	ldr	r3, [pc, #100]	; (1a000c80 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000c1c:	442b      	add	r3, r5
1a000c1e:	4a19      	ldr	r2, [pc, #100]	; (1a000c84 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000c20:	4293      	cmp	r3, r2
1a000c22:	d821      	bhi.n	1a000c68 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000c24:	b318      	cbz	r0, 1a000c6e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000c26:	2380      	movs	r3, #128	; 0x80
1a000c28:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000c2a:	2300      	movs	r3, #0
1a000c2c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000c2e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000c30:	fbb5 f3f0 	udiv	r3, r5, r0
1a000c34:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000c36:	4a14      	ldr	r2, [pc, #80]	; (1a000c88 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000c38:	4295      	cmp	r5, r2
1a000c3a:	d903      	bls.n	1a000c44 <Chip_Clock_CalcMainPLLValue+0x38>
1a000c3c:	fb03 f000 	mul.w	r0, r3, r0
1a000c40:	42a8      	cmp	r0, r5
1a000c42:	d007      	beq.n	1a000c54 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000c44:	4621      	mov	r1, r4
1a000c46:	4628      	mov	r0, r5
1a000c48:	f7ff fe96 	bl	1a000978 <pll_get_frac>
		if (!ppll->nsel) {
1a000c4c:	68a3      	ldr	r3, [r4, #8]
1a000c4e:	b18b      	cbz	r3, 1a000c74 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000c50:	3b01      	subs	r3, #1
1a000c52:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000c54:	6923      	ldr	r3, [r4, #16]
1a000c56:	b183      	cbz	r3, 1a000c7a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000c58:	68e2      	ldr	r2, [r4, #12]
1a000c5a:	b10a      	cbz	r2, 1a000c60 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000c5c:	3a01      	subs	r2, #1
1a000c5e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000c60:	3b01      	subs	r3, #1
1a000c62:	6123      	str	r3, [r4, #16]
	return 0;
1a000c64:	2000      	movs	r0, #0
}
1a000c66:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c6c:	e7fb      	b.n	1a000c66 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c72:	e7f8      	b.n	1a000c66 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c78:	e7f5      	b.n	1a000c66 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c7e:	e7f2      	b.n	1a000c66 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000c80:	ff6b3a10 	.word	0xff6b3a10
1a000c84:	0b940510 	.word	0x0b940510
1a000c88:	094c5eff 	.word	0x094c5eff

1a000c8c <Chip_Clock_GetMainPLLHz>:
{
1a000c8c:	b530      	push	{r4, r5, lr}
1a000c8e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000c90:	4d17      	ldr	r5, [pc, #92]	; (1a000cf0 <Chip_Clock_GetMainPLLHz+0x64>)
1a000c92:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000c94:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000c98:	f7ff ff5c 	bl	1a000b54 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000c9c:	4b15      	ldr	r3, [pc, #84]	; (1a000cf4 <Chip_Clock_GetMainPLLHz+0x68>)
1a000c9e:	681b      	ldr	r3, [r3, #0]
1a000ca0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000ca2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000ca4:	f013 0f01 	tst.w	r3, #1
1a000ca8:	d020      	beq.n	1a000cec <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a000caa:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000cae:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000cb2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000cb6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a000cba:	3301      	adds	r3, #1
	n = nsel + 1;
1a000cbc:	3201      	adds	r2, #1
	p = ptab[psel];
1a000cbe:	f10d 0c08 	add.w	ip, sp, #8
1a000cc2:	4461      	add	r1, ip
1a000cc4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000cc8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000ccc:	d108      	bne.n	1a000ce0 <Chip_Clock_GetMainPLLHz+0x54>
1a000cce:	b93d      	cbnz	r5, 1a000ce0 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a000cd0:	0049      	lsls	r1, r1, #1
1a000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
1a000cd6:	fbb0 f0f2 	udiv	r0, r0, r2
1a000cda:	fb00 f003 	mul.w	r0, r0, r3
1a000cde:	e003      	b.n	1a000ce8 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a000ce0:	fbb0 f0f2 	udiv	r0, r0, r2
1a000ce4:	fb03 f000 	mul.w	r0, r3, r0
}
1a000ce8:	b003      	add	sp, #12
1a000cea:	bd30      	pop	{r4, r5, pc}
		return 0;
1a000cec:	2000      	movs	r0, #0
1a000cee:	e7fb      	b.n	1a000ce8 <Chip_Clock_GetMainPLLHz+0x5c>
1a000cf0:	40050000 	.word	0x40050000
1a000cf4:	1a00194c 	.word	0x1a00194c

1a000cf8 <Chip_Clock_GetDivRate>:
{
1a000cf8:	b538      	push	{r3, r4, r5, lr}
1a000cfa:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000cfc:	4608      	mov	r0, r1
1a000cfe:	f7ff ff0d 	bl	1a000b1c <Chip_Clock_GetDividerSource>
1a000d02:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000d04:	4620      	mov	r0, r4
1a000d06:	f7ff ff17 	bl	1a000b38 <Chip_Clock_GetDividerDivisor>
1a000d0a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000d0c:	4628      	mov	r0, r5
1a000d0e:	f7ff ff21 	bl	1a000b54 <Chip_Clock_GetClockInputHz>
1a000d12:	3401      	adds	r4, #1
}
1a000d14:	fbb0 f0f4 	udiv	r0, r0, r4
1a000d18:	bd38      	pop	{r3, r4, r5, pc}
1a000d1a:	Address 0x000000001a000d1a is out of bounds.


1a000d1c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000d1c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000d1e:	f100 0416 	add.w	r4, r0, #22
1a000d22:	00a4      	lsls	r4, r4, #2
1a000d24:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000d28:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000d2c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000d2e:	281b      	cmp	r0, #27
1a000d30:	d813      	bhi.n	1a000d5a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a000d32:	2911      	cmp	r1, #17
1a000d34:	d01a      	beq.n	1a000d6c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000d36:	4d0e      	ldr	r5, [pc, #56]	; (1a000d70 <Chip_Clock_SetBaseClock+0x54>)
1a000d38:	4025      	ands	r5, r4

			if (autoblocken) {
1a000d3a:	b10a      	cbz	r2, 1a000d40 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a000d3c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000d40:	b10b      	cbz	r3, 1a000d46 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a000d42:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000d46:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000d4a:	3016      	adds	r0, #22
1a000d4c:	0080      	lsls	r0, r0, #2
1a000d4e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000d52:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000d56:	6045      	str	r5, [r0, #4]
1a000d58:	e008      	b.n	1a000d6c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000d5a:	f044 0401 	orr.w	r4, r4, #1
1a000d5e:	3016      	adds	r0, #22
1a000d60:	0080      	lsls	r0, r0, #2
1a000d62:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000d66:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000d6a:	6044      	str	r4, [r0, #4]
	}
}
1a000d6c:	bc30      	pop	{r4, r5}
1a000d6e:	4770      	bx	lr
1a000d70:	e0fff7fe 	.word	0xe0fff7fe

1a000d74 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000d74:	281b      	cmp	r0, #27
1a000d76:	d80c      	bhi.n	1a000d92 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000d78:	3016      	adds	r0, #22
1a000d7a:	0080      	lsls	r0, r0, #2
1a000d7c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000d80:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000d84:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000d86:	f010 0f01 	tst.w	r0, #1
1a000d8a:	d104      	bne.n	1a000d96 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000d8c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000d90:	4770      	bx	lr
		return CLKINPUT_PD;
1a000d92:	2011      	movs	r0, #17
1a000d94:	4770      	bx	lr
		return CLKINPUT_PD;
1a000d96:	2011      	movs	r0, #17
}
1a000d98:	4770      	bx	lr

1a000d9a <Chip_Clock_GetBaseClocktHz>:
{
1a000d9a:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000d9c:	f7ff ffea 	bl	1a000d74 <Chip_Clock_GetBaseClock>
1a000da0:	f7ff fed8 	bl	1a000b54 <Chip_Clock_GetClockInputHz>
}
1a000da4:	bd08      	pop	{r3, pc}
1a000da6:	Address 0x000000001a000da6 is out of bounds.


1a000da8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000da8:	b971      	cbnz	r1, 1a000dc8 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a000daa:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000dac:	b10a      	cbz	r2, 1a000db2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000dae:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000db2:	2b02      	cmp	r3, #2
1a000db4:	d00a      	beq.n	1a000dcc <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000db6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000dba:	d30a      	bcc.n	1a000dd2 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000dbc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000dc0:	4b06      	ldr	r3, [pc, #24]	; (1a000ddc <Chip_Clock_EnableOpts+0x34>)
1a000dc2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000dc6:	4770      	bx	lr
		reg |= (1 << 1);
1a000dc8:	2103      	movs	r1, #3
1a000dca:	e7ef      	b.n	1a000dac <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000dcc:	f041 0120 	orr.w	r1, r1, #32
1a000dd0:	e7f1      	b.n	1a000db6 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000dd2:	3020      	adds	r0, #32
1a000dd4:	4b02      	ldr	r3, [pc, #8]	; (1a000de0 <Chip_Clock_EnableOpts+0x38>)
1a000dd6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000dda:	4770      	bx	lr
1a000ddc:	40052000 	.word	0x40052000
1a000de0:	40051000 	.word	0x40051000

1a000de4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000de4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000de8:	d309      	bcc.n	1a000dfe <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000dea:	4a09      	ldr	r2, [pc, #36]	; (1a000e10 <Chip_Clock_Enable+0x2c>)
1a000dec:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000df0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000df4:	f043 0301 	orr.w	r3, r3, #1
1a000df8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000dfc:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000dfe:	4a05      	ldr	r2, [pc, #20]	; (1a000e14 <Chip_Clock_Enable+0x30>)
1a000e00:	3020      	adds	r0, #32
1a000e02:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000e06:	f043 0301 	orr.w	r3, r3, #1
1a000e0a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a000e0e:	4770      	bx	lr
1a000e10:	40052000 	.word	0x40052000
1a000e14:	40051000 	.word	0x40051000

1a000e18 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000e18:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000e1a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000e1e:	d309      	bcc.n	1a000e34 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000e20:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000e24:	4a0d      	ldr	r2, [pc, #52]	; (1a000e5c <Chip_Clock_GetRate+0x44>)
1a000e26:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000e2a:	f014 0f01 	tst.w	r4, #1
1a000e2e:	d107      	bne.n	1a000e40 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a000e30:	2000      	movs	r0, #0
	}

	return rate;
}
1a000e32:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000e34:	f100 0320 	add.w	r3, r0, #32
1a000e38:	4a09      	ldr	r2, [pc, #36]	; (1a000e60 <Chip_Clock_GetRate+0x48>)
1a000e3a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000e3e:	e7f4      	b.n	1a000e2a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000e40:	f7ff fe20 	bl	1a000a84 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000e44:	f7ff ffa9 	bl	1a000d9a <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a000e48:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000e4c:	d103      	bne.n	1a000e56 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a000e4e:	2301      	movs	r3, #1
		rate = rate / div;
1a000e50:	fbb0 f0f3 	udiv	r0, r0, r3
1a000e54:	e7ed      	b.n	1a000e32 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a000e56:	2302      	movs	r3, #2
1a000e58:	e7fa      	b.n	1a000e50 <Chip_Clock_GetRate+0x38>
1a000e5a:	bf00      	nop
1a000e5c:	40052000 	.word	0x40052000
1a000e60:	40051000 	.word	0x40051000

1a000e64 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000e64:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000e66:	2069      	movs	r0, #105	; 0x69
1a000e68:	f7ff ffd6 	bl	1a000e18 <Chip_Clock_GetRate>
1a000e6c:	4b01      	ldr	r3, [pc, #4]	; (1a000e74 <SystemCoreClockUpdate+0x10>)
1a000e6e:	6018      	str	r0, [r3, #0]
}
1a000e70:	bd08      	pop	{r3, pc}
1a000e72:	bf00      	nop
1a000e74:	10000068 	.word	0x10000068

1a000e78 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000e78:	4770      	bx	lr
1a000e7a:	Address 0x000000001a000e7a is out of bounds.


1a000e7c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000e7c:	b570      	push	{r4, r5, r6, lr}
1a000e7e:	b08a      	sub	sp, #40	; 0x28
1a000e80:	4605      	mov	r5, r0
1a000e82:	460e      	mov	r6, r1
1a000e84:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000e86:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000e8a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000e8c:	2806      	cmp	r0, #6
1a000e8e:	d018      	beq.n	1a000ec2 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000e90:	2300      	movs	r3, #0
1a000e92:	2201      	movs	r2, #1
1a000e94:	4629      	mov	r1, r5
1a000e96:	2004      	movs	r0, #4
1a000e98:	f7ff ff40 	bl	1a000d1c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000e9c:	4a4a      	ldr	r2, [pc, #296]	; (1a000fc8 <Chip_SetupCoreClock+0x14c>)
1a000e9e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000ea0:	f043 0301 	orr.w	r3, r3, #1
1a000ea4:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000ea6:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000eaa:	a901      	add	r1, sp, #4
1a000eac:	4630      	mov	r0, r6
1a000eae:	f7ff fead 	bl	1a000c0c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000eb2:	4b46      	ldr	r3, [pc, #280]	; (1a000fcc <Chip_SetupCoreClock+0x150>)
1a000eb4:	429e      	cmp	r6, r3
1a000eb6:	d916      	bls.n	1a000ee6 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000eb8:	9b01      	ldr	r3, [sp, #4]
1a000eba:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000ebe:	d003      	beq.n	1a000ec8 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a000ec0:	e7fe      	b.n	1a000ec0 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000ec2:	f7ff fe05 	bl	1a000ad0 <Chip_Clock_EnableCrystal>
1a000ec6:	e7e3      	b.n	1a000e90 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a000ec8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000ecc:	d005      	beq.n	1a000eda <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000ed2:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000ed4:	2500      	movs	r5, #0
			direct = 1;
1a000ed6:	2601      	movs	r6, #1
1a000ed8:	e007      	b.n	1a000eea <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000eda:	9b04      	ldr	r3, [sp, #16]
1a000edc:	3301      	adds	r3, #1
1a000ede:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000ee0:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000ee2:	2600      	movs	r6, #0
1a000ee4:	e001      	b.n	1a000eea <Chip_SetupCoreClock+0x6e>
1a000ee6:	2500      	movs	r5, #0
1a000ee8:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000eea:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000eee:	9b01      	ldr	r3, [sp, #4]
1a000ef0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000ef4:	9a05      	ldr	r2, [sp, #20]
1a000ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000efa:	9a03      	ldr	r2, [sp, #12]
1a000efc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000f00:	9a04      	ldr	r2, [sp, #16]
1a000f02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000f06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000f0a:	4a2f      	ldr	r2, [pc, #188]	; (1a000fc8 <Chip_SetupCoreClock+0x14c>)
1a000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000f0e:	4b2e      	ldr	r3, [pc, #184]	; (1a000fc8 <Chip_SetupCoreClock+0x14c>)
1a000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000f12:	f013 0f01 	tst.w	r3, #1
1a000f16:	d0fa      	beq.n	1a000f0e <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000f18:	2300      	movs	r3, #0
1a000f1a:	2201      	movs	r2, #1
1a000f1c:	2109      	movs	r1, #9
1a000f1e:	2004      	movs	r0, #4
1a000f20:	f7ff fefc 	bl	1a000d1c <Chip_Clock_SetBaseClock>

	if (direct) {
1a000f24:	b306      	cbz	r6, 1a000f68 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000f26:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000f2a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000f2e:	1e5a      	subs	r2, r3, #1
1a000f30:	9209      	str	r2, [sp, #36]	; 0x24
1a000f32:	2b00      	cmp	r3, #0
1a000f34:	d1fa      	bne.n	1a000f2c <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000f36:	9b01      	ldr	r3, [sp, #4]
1a000f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000f3c:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000f3e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000f42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000f46:	9a05      	ldr	r2, [sp, #20]
1a000f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000f4c:	9a03      	ldr	r2, [sp, #12]
1a000f4e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000f52:	9a04      	ldr	r2, [sp, #16]
1a000f54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000f58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000f5c:	4a1a      	ldr	r2, [pc, #104]	; (1a000fc8 <Chip_SetupCoreClock+0x14c>)
1a000f5e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a000f60:	2c00      	cmp	r4, #0
1a000f62:	d12e      	bne.n	1a000fc2 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a000f64:	b00a      	add	sp, #40	; 0x28
1a000f66:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a000f68:	2d00      	cmp	r5, #0
1a000f6a:	d0f9      	beq.n	1a000f60 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000f6c:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000f70:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a000f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000f74:	1e5a      	subs	r2, r3, #1
1a000f76:	9209      	str	r2, [sp, #36]	; 0x24
1a000f78:	2b00      	cmp	r3, #0
1a000f7a:	d1fa      	bne.n	1a000f72 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a000f7c:	9b04      	ldr	r3, [sp, #16]
1a000f7e:	1e5a      	subs	r2, r3, #1
1a000f80:	9204      	str	r2, [sp, #16]
1a000f82:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a000f86:	9b01      	ldr	r3, [sp, #4]
1a000f88:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000f8c:	9905      	ldr	r1, [sp, #20]
1a000f8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a000f92:	9903      	ldr	r1, [sp, #12]
1a000f94:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a000f98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000f9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000fa0:	4a09      	ldr	r2, [pc, #36]	; (1a000fc8 <Chip_SetupCoreClock+0x14c>)
1a000fa2:	6453      	str	r3, [r2, #68]	; 0x44
1a000fa4:	e7dc      	b.n	1a000f60 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000fa6:	480a      	ldr	r0, [pc, #40]	; (1a000fd0 <Chip_SetupCoreClock+0x154>)
1a000fa8:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000fac:	78cb      	ldrb	r3, [r1, #3]
1a000fae:	788a      	ldrb	r2, [r1, #2]
1a000fb0:	7849      	ldrb	r1, [r1, #1]
1a000fb2:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000fb6:	f7ff feb1 	bl	1a000d1c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000fba:	3401      	adds	r4, #1
1a000fbc:	2c11      	cmp	r4, #17
1a000fbe:	d9f2      	bls.n	1a000fa6 <Chip_SetupCoreClock+0x12a>
1a000fc0:	e7d0      	b.n	1a000f64 <Chip_SetupCoreClock+0xe8>
1a000fc2:	2400      	movs	r4, #0
1a000fc4:	e7fa      	b.n	1a000fbc <Chip_SetupCoreClock+0x140>
1a000fc6:	bf00      	nop
1a000fc8:	40050000 	.word	0x40050000
1a000fcc:	068e7780 	.word	0x068e7780
1a000fd0:	1a0019c4 	.word	0x1a0019c4

1a000fd4 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000fd4:	4b03      	ldr	r3, [pc, #12]	; (1a000fe4 <Chip_SSP_GetClockIndex+0x10>)
1a000fd6:	4298      	cmp	r0, r3
1a000fd8:	d001      	beq.n	1a000fde <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000fda:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000fdc:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000fde:	20a5      	movs	r0, #165	; 0xa5
1a000fe0:	4770      	bx	lr
1a000fe2:	bf00      	nop
1a000fe4:	400c5000 	.word	0x400c5000

1a000fe8 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000fe8:	4b04      	ldr	r3, [pc, #16]	; (1a000ffc <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000fea:	4298      	cmp	r0, r3
1a000fec:	d002      	beq.n	1a000ff4 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000fee:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000ff2:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a000ff4:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000ff8:	4770      	bx	lr
1a000ffa:	bf00      	nop
1a000ffc:	400c5000 	.word	0x400c5000

1a001000 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001000:	6803      	ldr	r3, [r0, #0]
1a001002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001006:	0209      	lsls	r1, r1, #8
1a001008:	b289      	uxth	r1, r1
1a00100a:	4319      	orrs	r1, r3
1a00100c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00100e:	6102      	str	r2, [r0, #16]
}
1a001010:	4770      	bx	lr

1a001012 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001012:	b570      	push	{r4, r5, r6, lr}
1a001014:	4606      	mov	r6, r0
1a001016:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001018:	f7ff ffe6 	bl	1a000fe8 <Chip_SSP_GetPeriphClockIndex>
1a00101c:	f7ff fefc 	bl	1a000e18 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001020:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a001022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001026:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001028:	e000      	b.n	1a00102c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00102a:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a00102c:	42ab      	cmp	r3, r5
1a00102e:	d90b      	bls.n	1a001048 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001030:	1c4c      	adds	r4, r1, #1
1a001032:	fb02 f304 	mul.w	r3, r2, r4
1a001036:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00103a:	429d      	cmp	r5, r3
1a00103c:	d2f6      	bcs.n	1a00102c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a00103e:	2cff      	cmp	r4, #255	; 0xff
1a001040:	d9f3      	bls.n	1a00102a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001042:	3202      	adds	r2, #2
				cr0_div = 0;
1a001044:	2100      	movs	r1, #0
1a001046:	e7f1      	b.n	1a00102c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001048:	4630      	mov	r0, r6
1a00104a:	f7ff ffd9 	bl	1a001000 <Chip_SSP_SetClockRate>
}
1a00104e:	bd70      	pop	{r4, r5, r6, pc}

1a001050 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001050:	b510      	push	{r4, lr}
1a001052:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001054:	f7ff ffbe 	bl	1a000fd4 <Chip_SSP_GetClockIndex>
1a001058:	f7ff fec4 	bl	1a000de4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00105c:	4620      	mov	r0, r4
1a00105e:	f7ff ffc3 	bl	1a000fe8 <Chip_SSP_GetPeriphClockIndex>
1a001062:	f7ff febf 	bl	1a000de4 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001066:	6863      	ldr	r3, [r4, #4]
1a001068:	f023 0304 	bic.w	r3, r3, #4
1a00106c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00106e:	6823      	ldr	r3, [r4, #0]
1a001070:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001074:	f043 0307 	orr.w	r3, r3, #7
1a001078:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00107a:	4902      	ldr	r1, [pc, #8]	; (1a001084 <Chip_SSP_Init+0x34>)
1a00107c:	4620      	mov	r0, r4
1a00107e:	f7ff ffc8 	bl	1a001012 <Chip_SSP_SetBitRate>
}
1a001082:	bd10      	pop	{r4, pc}
1a001084:	000186a0 	.word	0x000186a0

1a001088 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001088:	2901      	cmp	r1, #1
1a00108a:	d109      	bne.n	1a0010a0 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a00108c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001090:	0082      	lsls	r2, r0, #2
1a001092:	4b04      	ldr	r3, [pc, #16]	; (1a0010a4 <Chip_I2C_EventHandler+0x1c>)
1a001094:	4413      	add	r3, r2
1a001096:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001098:	7d13      	ldrb	r3, [r2, #20]
1a00109a:	b2db      	uxtb	r3, r3
1a00109c:	2b04      	cmp	r3, #4
1a00109e:	d0fb      	beq.n	1a001098 <Chip_I2C_EventHandler+0x10>
}
1a0010a0:	4770      	bx	lr
1a0010a2:	bf00      	nop
1a0010a4:	10000000 	.word	0x10000000

1a0010a8 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0010a8:	b570      	push	{r4, r5, r6, lr}
1a0010aa:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0010ac:	4e06      	ldr	r6, [pc, #24]	; (1a0010c8 <Chip_I2C_Init+0x20>)
1a0010ae:	00c4      	lsls	r4, r0, #3
1a0010b0:	1a22      	subs	r2, r4, r0
1a0010b2:	0093      	lsls	r3, r2, #2
1a0010b4:	4433      	add	r3, r6
1a0010b6:	8898      	ldrh	r0, [r3, #4]
1a0010b8:	f7ff fe94 	bl	1a000de4 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0010bc:	1b64      	subs	r4, r4, r5
1a0010be:	00a3      	lsls	r3, r4, #2
1a0010c0:	58f3      	ldr	r3, [r6, r3]
1a0010c2:	226c      	movs	r2, #108	; 0x6c
1a0010c4:	619a      	str	r2, [r3, #24]
}
1a0010c6:	bd70      	pop	{r4, r5, r6, pc}
1a0010c8:	10000000 	.word	0x10000000

1a0010cc <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0010cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0010d0:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0010d2:	4e0b      	ldr	r6, [pc, #44]	; (1a001100 <Chip_I2C_SetClockRate+0x34>)
1a0010d4:	00c5      	lsls	r5, r0, #3
1a0010d6:	1a2b      	subs	r3, r5, r0
1a0010d8:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0010dc:	eb06 0308 	add.w	r3, r6, r8
1a0010e0:	8898      	ldrh	r0, [r3, #4]
1a0010e2:	f7ff fe99 	bl	1a000e18 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0010e6:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0010ea:	f856 3008 	ldr.w	r3, [r6, r8]
1a0010ee:	0842      	lsrs	r2, r0, #1
1a0010f0:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0010f2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0010f6:	691a      	ldr	r2, [r3, #16]
1a0010f8:	1a80      	subs	r0, r0, r2
1a0010fa:	6158      	str	r0, [r3, #20]
}
1a0010fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001100:	10000000 	.word	0x10000000

1a001104 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001104:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001106:	4a0b      	ldr	r2, [pc, #44]	; (1a001134 <SystemInit+0x30>)
1a001108:	4b0b      	ldr	r3, [pc, #44]	; (1a001138 <SystemInit+0x34>)
1a00110a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00110c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001110:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001112:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001116:	2b20      	cmp	r3, #32
1a001118:	d004      	beq.n	1a001124 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a00111a:	f7ff fac5 	bl	1a0006a8 <Board_SystemInit>
   Board_Init();
1a00111e:	f7ff fa55 	bl	1a0005cc <Board_Init>
}
1a001122:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001124:	4a04      	ldr	r2, [pc, #16]	; (1a001138 <SystemInit+0x34>)
1a001126:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a00112a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00112e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001132:	e7f2      	b.n	1a00111a <SystemInit+0x16>
1a001134:	1a000000 	.word	0x1a000000
1a001138:	e000ed00 	.word	0xe000ed00

1a00113c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00113c:	4b04      	ldr	r3, [pc, #16]	; (1a001150 <cyclesCounterInit+0x14>)
1a00113e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001140:	4a04      	ldr	r2, [pc, #16]	; (1a001154 <cyclesCounterInit+0x18>)
1a001142:	6813      	ldr	r3, [r2, #0]
1a001144:	f043 0301 	orr.w	r3, r3, #1
1a001148:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00114a:	2001      	movs	r0, #1
1a00114c:	4770      	bx	lr
1a00114e:	bf00      	nop
1a001150:	10000038 	.word	0x10000038
1a001154:	e0001000 	.word	0xe0001000

1a001158 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001158:	4b01      	ldr	r3, [pc, #4]	; (1a001160 <tickRead+0x8>)
1a00115a:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00115e:	4770      	bx	lr
1a001160:	10000058 	.word	0x10000058

1a001164 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001164:	b118      	cbz	r0, 1a00116e <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001166:	4b04      	ldr	r3, [pc, #16]	; (1a001178 <tickPowerSet+0x14>)
1a001168:	2207      	movs	r2, #7
1a00116a:	601a      	str	r2, [r3, #0]
1a00116c:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a00116e:	4b02      	ldr	r3, [pc, #8]	; (1a001178 <tickPowerSet+0x14>)
1a001170:	2200      	movs	r2, #0
1a001172:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001174:	4770      	bx	lr
1a001176:	bf00      	nop
1a001178:	e000e010 	.word	0xe000e010

1a00117c <tickInit>:
{
1a00117c:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a00117e:	ea50 0401 	orrs.w	r4, r0, r1
1a001182:	d02a      	beq.n	1a0011da <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001184:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001188:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a00118c:	2b00      	cmp	r3, #0
1a00118e:	bf08      	it	eq
1a001190:	2a32      	cmpeq	r2, #50	; 0x32
1a001192:	d227      	bcs.n	1a0011e4 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001194:	4b14      	ldr	r3, [pc, #80]	; (1a0011e8 <tickInit+0x6c>)
1a001196:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a00119a:	4b14      	ldr	r3, [pc, #80]	; (1a0011ec <tickInit+0x70>)
1a00119c:	681b      	ldr	r3, [r3, #0]
1a00119e:	fba3 4500 	umull	r4, r5, r3, r0
1a0011a2:	fb03 5501 	mla	r5, r3, r1, r5
1a0011a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0011aa:	2300      	movs	r3, #0
1a0011ac:	4620      	mov	r0, r4
1a0011ae:	4629      	mov	r1, r5
1a0011b0:	f000 f9c2 	bl	1a001538 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a0011b4:	3801      	subs	r0, #1
1a0011b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0011ba:	d209      	bcs.n	1a0011d0 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a0011bc:	4b0c      	ldr	r3, [pc, #48]	; (1a0011f0 <tickInit+0x74>)
1a0011be:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0011c0:	4a0c      	ldr	r2, [pc, #48]	; (1a0011f4 <tickInit+0x78>)
1a0011c2:	21e0      	movs	r1, #224	; 0xe0
1a0011c4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a0011c8:	2200      	movs	r2, #0
1a0011ca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0011cc:	2207      	movs	r2, #7
1a0011ce:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a0011d0:	2001      	movs	r0, #1
1a0011d2:	f7ff ffc7 	bl	1a001164 <tickPowerSet>
      bool_t ret_val = 1;
1a0011d6:	2001      	movs	r0, #1
}
1a0011d8:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a0011da:	2000      	movs	r0, #0
1a0011dc:	f7ff ffc2 	bl	1a001164 <tickPowerSet>
         ret_val = 0;
1a0011e0:	2000      	movs	r0, #0
1a0011e2:	e7f9      	b.n	1a0011d8 <tickInit+0x5c>
            ret_val = 0;
1a0011e4:	2000      	movs	r0, #0
1a0011e6:	e7f7      	b.n	1a0011d8 <tickInit+0x5c>
1a0011e8:	10000040 	.word	0x10000040
1a0011ec:	10000068 	.word	0x10000068
1a0011f0:	e000e010 	.word	0xe000e010
1a0011f4:	e000ed00 	.word	0xe000ed00

1a0011f8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0011f8:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0011fa:	4a07      	ldr	r2, [pc, #28]	; (1a001218 <SysTick_Handler+0x20>)
1a0011fc:	6813      	ldr	r3, [r2, #0]
1a0011fe:	6851      	ldr	r1, [r2, #4]
1a001200:	3301      	adds	r3, #1
1a001202:	f141 0100 	adc.w	r1, r1, #0
1a001206:	6013      	str	r3, [r2, #0]
1a001208:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00120a:	4b04      	ldr	r3, [pc, #16]	; (1a00121c <SysTick_Handler+0x24>)
1a00120c:	681b      	ldr	r3, [r3, #0]
1a00120e:	b113      	cbz	r3, 1a001216 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a001210:	4a03      	ldr	r2, [pc, #12]	; (1a001220 <SysTick_Handler+0x28>)
1a001212:	6810      	ldr	r0, [r2, #0]
1a001214:	4798      	blx	r3
   }
}
1a001216:	bd08      	pop	{r3, pc}
1a001218:	10000058 	.word	0x10000058
1a00121c:	10000060 	.word	0x10000060
1a001220:	10000050 	.word	0x10000050

1a001224 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001224:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001226:	4d0b      	ldr	r5, [pc, #44]	; (1a001254 <gpioObtainPinInit+0x30>)
1a001228:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a00122c:	182c      	adds	r4, r5, r0
1a00122e:	5628      	ldrsb	r0, [r5, r0]
1a001230:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001232:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001236:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001238:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a00123c:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a00123e:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001242:	9b02      	ldr	r3, [sp, #8]
1a001244:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001246:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00124a:	9b03      	ldr	r3, [sp, #12]
1a00124c:	701a      	strb	r2, [r3, #0]
}
1a00124e:	bc30      	pop	{r4, r5}
1a001250:	4770      	bx	lr
1a001252:	bf00      	nop
1a001254:	1a001a0c 	.word	0x1a001a0c

1a001258 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001258:	f110 0f02 	cmn.w	r0, #2
1a00125c:	f000 80c7 	beq.w	1a0013ee <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a001260:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001264:	f000 80c5 	beq.w	1a0013f2 <gpioInit+0x19a>
{
1a001268:	b570      	push	{r4, r5, r6, lr}
1a00126a:	b084      	sub	sp, #16
1a00126c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00126e:	2300      	movs	r3, #0
1a001270:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001274:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001278:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00127c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001280:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001284:	f10d 030b 	add.w	r3, sp, #11
1a001288:	9301      	str	r3, [sp, #4]
1a00128a:	ab03      	add	r3, sp, #12
1a00128c:	9300      	str	r3, [sp, #0]
1a00128e:	f10d 030d 	add.w	r3, sp, #13
1a001292:	f10d 020e 	add.w	r2, sp, #14
1a001296:	f10d 010f 	add.w	r1, sp, #15
1a00129a:	f7ff ffc3 	bl	1a001224 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00129e:	2c05      	cmp	r4, #5
1a0012a0:	f200 80a9 	bhi.w	1a0013f6 <gpioInit+0x19e>
1a0012a4:	e8df f004 	tbb	[pc, r4]
1a0012a8:	45278109 	.word	0x45278109
1a0012ac:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0012ae:	4853      	ldr	r0, [pc, #332]	; (1a0013fc <gpioInit+0x1a4>)
1a0012b0:	f7ff fde2 	bl	1a000e78 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0012b4:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0012b6:	b004      	add	sp, #16
1a0012b8:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0012ba:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0012be:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0012c2:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0012c6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0012ca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0012ce:	494c      	ldr	r1, [pc, #304]	; (1a001400 <gpioInit+0x1a8>)
1a0012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0012d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0012d8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0012dc:	2001      	movs	r0, #1
1a0012de:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0012e2:	4c46      	ldr	r4, [pc, #280]	; (1a0013fc <gpioInit+0x1a4>)
1a0012e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0012e8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0012ec:	ea22 0201 	bic.w	r2, r2, r1
1a0012f0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0012f4:	e7df      	b.n	1a0012b6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0012f6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0012fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0012fe:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001302:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001306:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00130a:	493d      	ldr	r1, [pc, #244]	; (1a001400 <gpioInit+0x1a8>)
1a00130c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001310:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001314:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001318:	2001      	movs	r0, #1
1a00131a:	fa00 f102 	lsl.w	r1, r0, r2
1a00131e:	4c37      	ldr	r4, [pc, #220]	; (1a0013fc <gpioInit+0x1a4>)
1a001320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001324:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001328:	ea22 0201 	bic.w	r2, r2, r1
1a00132c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001330:	e7c1      	b.n	1a0012b6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001332:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001336:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00133a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00133e:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001342:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001346:	492e      	ldr	r1, [pc, #184]	; (1a001400 <gpioInit+0x1a8>)
1a001348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00134c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001350:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001354:	2001      	movs	r0, #1
1a001356:	fa00 f102 	lsl.w	r1, r0, r2
1a00135a:	4c28      	ldr	r4, [pc, #160]	; (1a0013fc <gpioInit+0x1a4>)
1a00135c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001360:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001364:	ea22 0201 	bic.w	r2, r2, r1
1a001368:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00136c:	e7a3      	b.n	1a0012b6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00136e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001372:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001376:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00137a:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00137e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001382:	491f      	ldr	r1, [pc, #124]	; (1a001400 <gpioInit+0x1a8>)
1a001384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001388:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00138c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001390:	2001      	movs	r0, #1
1a001392:	fa00 f102 	lsl.w	r1, r0, r2
1a001396:	4c19      	ldr	r4, [pc, #100]	; (1a0013fc <gpioInit+0x1a4>)
1a001398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00139c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0013a0:	ea22 0201 	bic.w	r2, r2, r1
1a0013a4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0013a8:	e785      	b.n	1a0012b6 <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0013aa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0013ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0013b2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0013b6:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0013ba:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0013be:	4910      	ldr	r1, [pc, #64]	; (1a001400 <gpioInit+0x1a8>)
1a0013c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0013c4:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0013c8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0013cc:	2001      	movs	r0, #1
1a0013ce:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a0013d2:	4b0a      	ldr	r3, [pc, #40]	; (1a0013fc <gpioInit+0x1a4>)
1a0013d4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0013d8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0013dc:	4331      	orrs	r1, r6
1a0013de:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0013e2:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0013e4:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0013e8:	2100      	movs	r1, #0
1a0013ea:	5499      	strb	r1, [r3, r2]
1a0013ec:	e763      	b.n	1a0012b6 <gpioInit+0x5e>
	  return FALSE;
1a0013ee:	2000      	movs	r0, #0
1a0013f0:	4770      	bx	lr
	  return FALSE;
1a0013f2:	2000      	movs	r0, #0
}
1a0013f4:	4770      	bx	lr
      ret_val = 0;
1a0013f6:	2000      	movs	r0, #0
1a0013f8:	e75d      	b.n	1a0012b6 <gpioInit+0x5e>
1a0013fa:	bf00      	nop
1a0013fc:	400f4000 	.word	0x400f4000
1a001400:	40086000 	.word	0x40086000

1a001404 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001404:	f110 0f02 	cmn.w	r0, #2
1a001408:	d02d      	beq.n	1a001466 <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a00140a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00140e:	d02c      	beq.n	1a00146a <gpioWrite+0x66>
{
1a001410:	b510      	push	{r4, lr}
1a001412:	b084      	sub	sp, #16
1a001414:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001416:	2300      	movs	r3, #0
1a001418:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00141c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001420:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001424:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001428:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00142c:	f10d 030b 	add.w	r3, sp, #11
1a001430:	9301      	str	r3, [sp, #4]
1a001432:	ab03      	add	r3, sp, #12
1a001434:	9300      	str	r3, [sp, #0]
1a001436:	f10d 030d 	add.w	r3, sp, #13
1a00143a:	f10d 020e 	add.w	r2, sp, #14
1a00143e:	f10d 010f 	add.w	r1, sp, #15
1a001442:	f7ff feef 	bl	1a001224 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001446:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00144a:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00144e:	1c21      	adds	r1, r4, #0
1a001450:	bf18      	it	ne
1a001452:	2101      	movne	r1, #1
1a001454:	015b      	lsls	r3, r3, #5
1a001456:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00145a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00145e:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a001460:	2001      	movs	r0, #1
}
1a001462:	b004      	add	sp, #16
1a001464:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001466:	2000      	movs	r0, #0
1a001468:	4770      	bx	lr
	  return FALSE;
1a00146a:	2000      	movs	r0, #0
}
1a00146c:	4770      	bx	lr
1a00146e:	Address 0x000000001a00146e is out of bounds.


1a001470 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001470:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001472:	4b04      	ldr	r3, [pc, #16]	; (1a001484 <USB0_IRQHandler+0x14>)
1a001474:	681b      	ldr	r3, [r3, #0]
1a001476:	681b      	ldr	r3, [r3, #0]
1a001478:	68db      	ldr	r3, [r3, #12]
1a00147a:	4a03      	ldr	r2, [pc, #12]	; (1a001488 <USB0_IRQHandler+0x18>)
1a00147c:	6810      	ldr	r0, [r2, #0]
1a00147e:	4798      	blx	r3
}
1a001480:	bd08      	pop	{r3, pc}
1a001482:	bf00      	nop
1a001484:	1000006c 	.word	0x1000006c
1a001488:	10000064 	.word	0x10000064

1a00148c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a00148c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00148e:	f7ff fce9 	bl	1a000e64 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001492:	4b1a      	ldr	r3, [pc, #104]	; (1a0014fc <boardInit+0x70>)
1a001494:	6818      	ldr	r0, [r3, #0]
1a001496:	f7ff fe51 	bl	1a00113c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a00149a:	2001      	movs	r0, #1
1a00149c:	2100      	movs	r1, #0
1a00149e:	f7ff fe6d 	bl	1a00117c <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0014a2:	2105      	movs	r1, #5
1a0014a4:	2000      	movs	r0, #0
1a0014a6:	f7ff fed7 	bl	1a001258 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0014aa:	2100      	movs	r1, #0
1a0014ac:	2024      	movs	r0, #36	; 0x24
1a0014ae:	f7ff fed3 	bl	1a001258 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a0014b2:	2100      	movs	r1, #0
1a0014b4:	2025      	movs	r0, #37	; 0x25
1a0014b6:	f7ff fecf 	bl	1a001258 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a0014ba:	2100      	movs	r1, #0
1a0014bc:	2026      	movs	r0, #38	; 0x26
1a0014be:	f7ff fecb 	bl	1a001258 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a0014c2:	2100      	movs	r1, #0
1a0014c4:	2027      	movs	r0, #39	; 0x27
1a0014c6:	f7ff fec7 	bl	1a001258 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a0014ca:	2101      	movs	r1, #1
1a0014cc:	2028      	movs	r0, #40	; 0x28
1a0014ce:	f7ff fec3 	bl	1a001258 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0014d2:	2101      	movs	r1, #1
1a0014d4:	2029      	movs	r0, #41	; 0x29
1a0014d6:	f7ff febf 	bl	1a001258 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0014da:	2101      	movs	r1, #1
1a0014dc:	202a      	movs	r0, #42	; 0x2a
1a0014de:	f7ff febb 	bl	1a001258 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0014e2:	2101      	movs	r1, #1
1a0014e4:	202b      	movs	r0, #43	; 0x2b
1a0014e6:	f7ff feb7 	bl	1a001258 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0014ea:	2101      	movs	r1, #1
1a0014ec:	202c      	movs	r0, #44	; 0x2c
1a0014ee:	f7ff feb3 	bl	1a001258 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0014f2:	2101      	movs	r1, #1
1a0014f4:	202d      	movs	r0, #45	; 0x2d
1a0014f6:	f7ff feaf 	bl	1a001258 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0014fa:	bd08      	pop	{r3, pc}
1a0014fc:	10000068 	.word	0x10000068

1a001500 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a001500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001504:	4680      	mov	r8, r0
1a001506:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001508:	f7ff fe26 	bl	1a001158 <tickRead>
1a00150c:	4606      	mov	r6, r0
1a00150e:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a001510:	f7ff fe22 	bl	1a001158 <tickRead>
1a001514:	1b84      	subs	r4, r0, r6
1a001516:	eb61 0507 	sbc.w	r5, r1, r7
1a00151a:	4b06      	ldr	r3, [pc, #24]	; (1a001534 <delay+0x34>)
1a00151c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001520:	4640      	mov	r0, r8
1a001522:	4649      	mov	r1, r9
1a001524:	f000 f808 	bl	1a001538 <__aeabi_uldivmod>
1a001528:	428d      	cmp	r5, r1
1a00152a:	bf08      	it	eq
1a00152c:	4284      	cmpeq	r4, r0
1a00152e:	d3ef      	bcc.n	1a001510 <delay+0x10>
}
1a001530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001534:	10000040 	.word	0x10000040

1a001538 <__aeabi_uldivmod>:
1a001538:	b953      	cbnz	r3, 1a001550 <__aeabi_uldivmod+0x18>
1a00153a:	b94a      	cbnz	r2, 1a001550 <__aeabi_uldivmod+0x18>
1a00153c:	2900      	cmp	r1, #0
1a00153e:	bf08      	it	eq
1a001540:	2800      	cmpeq	r0, #0
1a001542:	bf1c      	itt	ne
1a001544:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001548:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a00154c:	f000 b974 	b.w	1a001838 <__aeabi_idiv0>
1a001550:	f1ad 0c08 	sub.w	ip, sp, #8
1a001554:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001558:	f000 f806 	bl	1a001568 <__udivmoddi4>
1a00155c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001564:	b004      	add	sp, #16
1a001566:	4770      	bx	lr

1a001568 <__udivmoddi4>:
1a001568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00156c:	9e08      	ldr	r6, [sp, #32]
1a00156e:	4604      	mov	r4, r0
1a001570:	4688      	mov	r8, r1
1a001572:	2b00      	cmp	r3, #0
1a001574:	f040 8085 	bne.w	1a001682 <__udivmoddi4+0x11a>
1a001578:	428a      	cmp	r2, r1
1a00157a:	4615      	mov	r5, r2
1a00157c:	d948      	bls.n	1a001610 <__udivmoddi4+0xa8>
1a00157e:	fab2 f282 	clz	r2, r2
1a001582:	b14a      	cbz	r2, 1a001598 <__udivmoddi4+0x30>
1a001584:	f1c2 0720 	rsb	r7, r2, #32
1a001588:	fa01 f302 	lsl.w	r3, r1, r2
1a00158c:	fa20 f707 	lsr.w	r7, r0, r7
1a001590:	4095      	lsls	r5, r2
1a001592:	ea47 0803 	orr.w	r8, r7, r3
1a001596:	4094      	lsls	r4, r2
1a001598:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00159c:	0c23      	lsrs	r3, r4, #16
1a00159e:	fbb8 f7fe 	udiv	r7, r8, lr
1a0015a2:	fa1f fc85 	uxth.w	ip, r5
1a0015a6:	fb0e 8817 	mls	r8, lr, r7, r8
1a0015aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0015ae:	fb07 f10c 	mul.w	r1, r7, ip
1a0015b2:	4299      	cmp	r1, r3
1a0015b4:	d909      	bls.n	1a0015ca <__udivmoddi4+0x62>
1a0015b6:	18eb      	adds	r3, r5, r3
1a0015b8:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0015bc:	f080 80e3 	bcs.w	1a001786 <__udivmoddi4+0x21e>
1a0015c0:	4299      	cmp	r1, r3
1a0015c2:	f240 80e0 	bls.w	1a001786 <__udivmoddi4+0x21e>
1a0015c6:	3f02      	subs	r7, #2
1a0015c8:	442b      	add	r3, r5
1a0015ca:	1a5b      	subs	r3, r3, r1
1a0015cc:	b2a4      	uxth	r4, r4
1a0015ce:	fbb3 f0fe 	udiv	r0, r3, lr
1a0015d2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0015d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0015da:	fb00 fc0c 	mul.w	ip, r0, ip
1a0015de:	45a4      	cmp	ip, r4
1a0015e0:	d909      	bls.n	1a0015f6 <__udivmoddi4+0x8e>
1a0015e2:	192c      	adds	r4, r5, r4
1a0015e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0015e8:	f080 80cb 	bcs.w	1a001782 <__udivmoddi4+0x21a>
1a0015ec:	45a4      	cmp	ip, r4
1a0015ee:	f240 80c8 	bls.w	1a001782 <__udivmoddi4+0x21a>
1a0015f2:	3802      	subs	r0, #2
1a0015f4:	442c      	add	r4, r5
1a0015f6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0015fa:	eba4 040c 	sub.w	r4, r4, ip
1a0015fe:	2700      	movs	r7, #0
1a001600:	b11e      	cbz	r6, 1a00160a <__udivmoddi4+0xa2>
1a001602:	40d4      	lsrs	r4, r2
1a001604:	2300      	movs	r3, #0
1a001606:	e9c6 4300 	strd	r4, r3, [r6]
1a00160a:	4639      	mov	r1, r7
1a00160c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001610:	2a00      	cmp	r2, #0
1a001612:	d053      	beq.n	1a0016bc <__udivmoddi4+0x154>
1a001614:	fab2 f282 	clz	r2, r2
1a001618:	2a00      	cmp	r2, #0
1a00161a:	f040 80b6 	bne.w	1a00178a <__udivmoddi4+0x222>
1a00161e:	1b49      	subs	r1, r1, r5
1a001620:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001624:	fa1f f885 	uxth.w	r8, r5
1a001628:	2701      	movs	r7, #1
1a00162a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00162e:	0c23      	lsrs	r3, r4, #16
1a001630:	fb0e 111c 	mls	r1, lr, ip, r1
1a001634:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001638:	fb08 f10c 	mul.w	r1, r8, ip
1a00163c:	4299      	cmp	r1, r3
1a00163e:	d907      	bls.n	1a001650 <__udivmoddi4+0xe8>
1a001640:	18eb      	adds	r3, r5, r3
1a001642:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001646:	d202      	bcs.n	1a00164e <__udivmoddi4+0xe6>
1a001648:	4299      	cmp	r1, r3
1a00164a:	f200 80ec 	bhi.w	1a001826 <__udivmoddi4+0x2be>
1a00164e:	4684      	mov	ip, r0
1a001650:	1a59      	subs	r1, r3, r1
1a001652:	b2a3      	uxth	r3, r4
1a001654:	fbb1 f0fe 	udiv	r0, r1, lr
1a001658:	fb0e 1410 	mls	r4, lr, r0, r1
1a00165c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001660:	fb08 f800 	mul.w	r8, r8, r0
1a001664:	45a0      	cmp	r8, r4
1a001666:	d907      	bls.n	1a001678 <__udivmoddi4+0x110>
1a001668:	192c      	adds	r4, r5, r4
1a00166a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00166e:	d202      	bcs.n	1a001676 <__udivmoddi4+0x10e>
1a001670:	45a0      	cmp	r8, r4
1a001672:	f200 80dc 	bhi.w	1a00182e <__udivmoddi4+0x2c6>
1a001676:	4618      	mov	r0, r3
1a001678:	eba4 0408 	sub.w	r4, r4, r8
1a00167c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001680:	e7be      	b.n	1a001600 <__udivmoddi4+0x98>
1a001682:	428b      	cmp	r3, r1
1a001684:	d908      	bls.n	1a001698 <__udivmoddi4+0x130>
1a001686:	2e00      	cmp	r6, #0
1a001688:	d078      	beq.n	1a00177c <__udivmoddi4+0x214>
1a00168a:	2700      	movs	r7, #0
1a00168c:	e9c6 0100 	strd	r0, r1, [r6]
1a001690:	4638      	mov	r0, r7
1a001692:	4639      	mov	r1, r7
1a001694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001698:	fab3 f783 	clz	r7, r3
1a00169c:	b97f      	cbnz	r7, 1a0016be <__udivmoddi4+0x156>
1a00169e:	428b      	cmp	r3, r1
1a0016a0:	d302      	bcc.n	1a0016a8 <__udivmoddi4+0x140>
1a0016a2:	4282      	cmp	r2, r0
1a0016a4:	f200 80bd 	bhi.w	1a001822 <__udivmoddi4+0x2ba>
1a0016a8:	1a84      	subs	r4, r0, r2
1a0016aa:	eb61 0303 	sbc.w	r3, r1, r3
1a0016ae:	2001      	movs	r0, #1
1a0016b0:	4698      	mov	r8, r3
1a0016b2:	2e00      	cmp	r6, #0
1a0016b4:	d0a9      	beq.n	1a00160a <__udivmoddi4+0xa2>
1a0016b6:	e9c6 4800 	strd	r4, r8, [r6]
1a0016ba:	e7a6      	b.n	1a00160a <__udivmoddi4+0xa2>
1a0016bc:	deff      	udf	#255	; 0xff
1a0016be:	f1c7 0520 	rsb	r5, r7, #32
1a0016c2:	40bb      	lsls	r3, r7
1a0016c4:	fa22 fc05 	lsr.w	ip, r2, r5
1a0016c8:	ea4c 0c03 	orr.w	ip, ip, r3
1a0016cc:	fa01 f407 	lsl.w	r4, r1, r7
1a0016d0:	fa20 f805 	lsr.w	r8, r0, r5
1a0016d4:	fa21 f305 	lsr.w	r3, r1, r5
1a0016d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0016dc:	ea48 0404 	orr.w	r4, r8, r4
1a0016e0:	fbb3 f9fe 	udiv	r9, r3, lr
1a0016e4:	0c21      	lsrs	r1, r4, #16
1a0016e6:	fb0e 3319 	mls	r3, lr, r9, r3
1a0016ea:	fa1f f88c 	uxth.w	r8, ip
1a0016ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0016f2:	fb09 fa08 	mul.w	sl, r9, r8
1a0016f6:	459a      	cmp	sl, r3
1a0016f8:	fa02 f207 	lsl.w	r2, r2, r7
1a0016fc:	fa00 f107 	lsl.w	r1, r0, r7
1a001700:	d90b      	bls.n	1a00171a <__udivmoddi4+0x1b2>
1a001702:	eb1c 0303 	adds.w	r3, ip, r3
1a001706:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a00170a:	f080 8088 	bcs.w	1a00181e <__udivmoddi4+0x2b6>
1a00170e:	459a      	cmp	sl, r3
1a001710:	f240 8085 	bls.w	1a00181e <__udivmoddi4+0x2b6>
1a001714:	f1a9 0902 	sub.w	r9, r9, #2
1a001718:	4463      	add	r3, ip
1a00171a:	eba3 030a 	sub.w	r3, r3, sl
1a00171e:	b2a4      	uxth	r4, r4
1a001720:	fbb3 f0fe 	udiv	r0, r3, lr
1a001724:	fb0e 3310 	mls	r3, lr, r0, r3
1a001728:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00172c:	fb00 f808 	mul.w	r8, r0, r8
1a001730:	45a0      	cmp	r8, r4
1a001732:	d908      	bls.n	1a001746 <__udivmoddi4+0x1de>
1a001734:	eb1c 0404 	adds.w	r4, ip, r4
1a001738:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00173c:	d26b      	bcs.n	1a001816 <__udivmoddi4+0x2ae>
1a00173e:	45a0      	cmp	r8, r4
1a001740:	d969      	bls.n	1a001816 <__udivmoddi4+0x2ae>
1a001742:	3802      	subs	r0, #2
1a001744:	4464      	add	r4, ip
1a001746:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00174a:	eba4 0408 	sub.w	r4, r4, r8
1a00174e:	fba0 8902 	umull	r8, r9, r0, r2
1a001752:	454c      	cmp	r4, r9
1a001754:	46c6      	mov	lr, r8
1a001756:	464b      	mov	r3, r9
1a001758:	d354      	bcc.n	1a001804 <__udivmoddi4+0x29c>
1a00175a:	d051      	beq.n	1a001800 <__udivmoddi4+0x298>
1a00175c:	2e00      	cmp	r6, #0
1a00175e:	d069      	beq.n	1a001834 <__udivmoddi4+0x2cc>
1a001760:	ebb1 020e 	subs.w	r2, r1, lr
1a001764:	eb64 0403 	sbc.w	r4, r4, r3
1a001768:	fa04 f505 	lsl.w	r5, r4, r5
1a00176c:	fa22 f307 	lsr.w	r3, r2, r7
1a001770:	40fc      	lsrs	r4, r7
1a001772:	431d      	orrs	r5, r3
1a001774:	e9c6 5400 	strd	r5, r4, [r6]
1a001778:	2700      	movs	r7, #0
1a00177a:	e746      	b.n	1a00160a <__udivmoddi4+0xa2>
1a00177c:	4637      	mov	r7, r6
1a00177e:	4630      	mov	r0, r6
1a001780:	e743      	b.n	1a00160a <__udivmoddi4+0xa2>
1a001782:	4618      	mov	r0, r3
1a001784:	e737      	b.n	1a0015f6 <__udivmoddi4+0x8e>
1a001786:	4607      	mov	r7, r0
1a001788:	e71f      	b.n	1a0015ca <__udivmoddi4+0x62>
1a00178a:	f1c2 0320 	rsb	r3, r2, #32
1a00178e:	fa20 f703 	lsr.w	r7, r0, r3
1a001792:	4095      	lsls	r5, r2
1a001794:	fa01 f002 	lsl.w	r0, r1, r2
1a001798:	fa21 f303 	lsr.w	r3, r1, r3
1a00179c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0017a0:	4338      	orrs	r0, r7
1a0017a2:	0c01      	lsrs	r1, r0, #16
1a0017a4:	fbb3 f7fe 	udiv	r7, r3, lr
1a0017a8:	fa1f f885 	uxth.w	r8, r5
1a0017ac:	fb0e 3317 	mls	r3, lr, r7, r3
1a0017b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0017b4:	fb07 f308 	mul.w	r3, r7, r8
1a0017b8:	428b      	cmp	r3, r1
1a0017ba:	fa04 f402 	lsl.w	r4, r4, r2
1a0017be:	d907      	bls.n	1a0017d0 <__udivmoddi4+0x268>
1a0017c0:	1869      	adds	r1, r5, r1
1a0017c2:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0017c6:	d228      	bcs.n	1a00181a <__udivmoddi4+0x2b2>
1a0017c8:	428b      	cmp	r3, r1
1a0017ca:	d926      	bls.n	1a00181a <__udivmoddi4+0x2b2>
1a0017cc:	3f02      	subs	r7, #2
1a0017ce:	4429      	add	r1, r5
1a0017d0:	1acb      	subs	r3, r1, r3
1a0017d2:	b281      	uxth	r1, r0
1a0017d4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0017d8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0017dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0017e0:	fb00 f308 	mul.w	r3, r0, r8
1a0017e4:	428b      	cmp	r3, r1
1a0017e6:	d907      	bls.n	1a0017f8 <__udivmoddi4+0x290>
1a0017e8:	1869      	adds	r1, r5, r1
1a0017ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0017ee:	d210      	bcs.n	1a001812 <__udivmoddi4+0x2aa>
1a0017f0:	428b      	cmp	r3, r1
1a0017f2:	d90e      	bls.n	1a001812 <__udivmoddi4+0x2aa>
1a0017f4:	3802      	subs	r0, #2
1a0017f6:	4429      	add	r1, r5
1a0017f8:	1ac9      	subs	r1, r1, r3
1a0017fa:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0017fe:	e714      	b.n	1a00162a <__udivmoddi4+0xc2>
1a001800:	4541      	cmp	r1, r8
1a001802:	d2ab      	bcs.n	1a00175c <__udivmoddi4+0x1f4>
1a001804:	ebb8 0e02 	subs.w	lr, r8, r2
1a001808:	eb69 020c 	sbc.w	r2, r9, ip
1a00180c:	3801      	subs	r0, #1
1a00180e:	4613      	mov	r3, r2
1a001810:	e7a4      	b.n	1a00175c <__udivmoddi4+0x1f4>
1a001812:	4660      	mov	r0, ip
1a001814:	e7f0      	b.n	1a0017f8 <__udivmoddi4+0x290>
1a001816:	4618      	mov	r0, r3
1a001818:	e795      	b.n	1a001746 <__udivmoddi4+0x1de>
1a00181a:	4667      	mov	r7, ip
1a00181c:	e7d8      	b.n	1a0017d0 <__udivmoddi4+0x268>
1a00181e:	4681      	mov	r9, r0
1a001820:	e77b      	b.n	1a00171a <__udivmoddi4+0x1b2>
1a001822:	4638      	mov	r0, r7
1a001824:	e745      	b.n	1a0016b2 <__udivmoddi4+0x14a>
1a001826:	f1ac 0c02 	sub.w	ip, ip, #2
1a00182a:	442b      	add	r3, r5
1a00182c:	e710      	b.n	1a001650 <__udivmoddi4+0xe8>
1a00182e:	3802      	subs	r0, #2
1a001830:	442c      	add	r4, r5
1a001832:	e721      	b.n	1a001678 <__udivmoddi4+0x110>
1a001834:	4637      	mov	r7, r6
1a001836:	e6e8      	b.n	1a00160a <__udivmoddi4+0xa2>

1a001838 <__aeabi_idiv0>:
1a001838:	4770      	bx	lr
1a00183a:	bf00      	nop

1a00183c <__libc_init_array>:
1a00183c:	b570      	push	{r4, r5, r6, lr}
1a00183e:	4d0d      	ldr	r5, [pc, #52]	; (1a001874 <__libc_init_array+0x38>)
1a001840:	4c0d      	ldr	r4, [pc, #52]	; (1a001878 <__libc_init_array+0x3c>)
1a001842:	1b64      	subs	r4, r4, r5
1a001844:	10a4      	asrs	r4, r4, #2
1a001846:	2600      	movs	r6, #0
1a001848:	42a6      	cmp	r6, r4
1a00184a:	d109      	bne.n	1a001860 <__libc_init_array+0x24>
1a00184c:	4d0b      	ldr	r5, [pc, #44]	; (1a00187c <__libc_init_array+0x40>)
1a00184e:	4c0c      	ldr	r4, [pc, #48]	; (1a001880 <__libc_init_array+0x44>)
1a001850:	f7fe fe01 	bl	1a000456 <_init>
1a001854:	1b64      	subs	r4, r4, r5
1a001856:	10a4      	asrs	r4, r4, #2
1a001858:	2600      	movs	r6, #0
1a00185a:	42a6      	cmp	r6, r4
1a00185c:	d105      	bne.n	1a00186a <__libc_init_array+0x2e>
1a00185e:	bd70      	pop	{r4, r5, r6, pc}
1a001860:	f855 3b04 	ldr.w	r3, [r5], #4
1a001864:	4798      	blx	r3
1a001866:	3601      	adds	r6, #1
1a001868:	e7ee      	b.n	1a001848 <__libc_init_array+0xc>
1a00186a:	f855 3b04 	ldr.w	r3, [r5], #4
1a00186e:	4798      	blx	r3
1a001870:	3601      	adds	r6, #1
1a001872:	e7f2      	b.n	1a00185a <__libc_init_array+0x1e>
1a001874:	1a001af4 	.word	0x1a001af4
1a001878:	1a001af4 	.word	0x1a001af4
1a00187c:	1a001af4 	.word	0x1a001af4
1a001880:	1a001af8 	.word	0x1a001af8

1a001884 <memset>:
1a001884:	4402      	add	r2, r0
1a001886:	4603      	mov	r3, r0
1a001888:	4293      	cmp	r3, r2
1a00188a:	d100      	bne.n	1a00188e <memset+0xa>
1a00188c:	4770      	bx	lr
1a00188e:	f803 1b01 	strb.w	r1, [r3], #1
1a001892:	e7f9      	b.n	1a001888 <memset+0x4>

1a001894 <ExtRateIn>:
1a001894:	0000 0000                                   ....

1a001898 <GpioButtons>:
1a001898:	0400 0800 0900 0901                         ........

1a0018a0 <GpioLeds>:
1a0018a0:	0005 0105 0205 0e00 0b01 0c01               ............

1a0018ac <GpioPorts>:
1a0018ac:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a0018bc:	0802 ffff                                   ....

1a0018c0 <OscRateIn>:
1a0018c0:	1b00 00b7                                   ....

1a0018c4 <InitClkStates>:
1a0018c4:	0f01 0101                                   ....

1a0018c8 <pinmuxing>:
1a0018c8:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a0018d8:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a0018e8:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a0018f8:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a001908:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a001918:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a001928:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a001938:	0206 0057                                   ..W.

1a00193c <UART_BClock>:
1a00193c:	01c2 01a2 0182 0162                         ......b.

1a001944 <UART_PClock>:
1a001944:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a001954:	00ff 0000                                   ....

1a001958 <periph_to_base>:
1a001958:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a001968:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a001978:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a001988:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a001998:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a0019a8:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a0019b8:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a0019c4 <InitClkStates>:
1a0019c4:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a0019d4:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a0019e4:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a0019f4:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a001a04:	111a 0001 111b 0001                         ........

1a001a0c <gpioPinsInit>:
1a001a0c:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a001a1c:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a001a2c:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a001a3c:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a001a4c:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a001a5c:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a001a6c:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a001a7c:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a001a8c:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a001a9c:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a001aac:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a001abc:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a001acc:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a001adc:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a001aec:	020b 000c 0c01 ffff                         ........
